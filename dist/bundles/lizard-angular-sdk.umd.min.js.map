{"version":3,"file":"lizard-angular-sdk.umd.min.js","sources":["../../node_modules/rxjs/src/add/observable/of.ts","../../src/common/local-storage.service.ts","../../src/common/auth.service.ts","../../src/common/app-config.factory.ts","../../src/common/api.service.ts","../../src/common/crud.service.ts","../../src/resources/users.service.ts","../../src/modules/lizard-sdk.module.ts","../../packages/http/src/static_request.ts","../../packages/http/src/http.ts","../../packages/http/src/http_module.ts","../../packages/http/src/base_request_options.ts","../../packages/http/src/backends/xhr_backend.ts","../../packages/http/src/backends/jsonp_backend.ts","../../packages/http/src/http_utils.ts","../../packages/http/src/url_search_params.ts","../../packages/http/src/body.ts","../../packages/http/src/static_response.ts","../../packages/http/src/backends/browser_jsonp.ts","../../packages/http/src/backends/browser_xhr.ts","../../packages/http/src/enums.ts","../../packages/http/src/headers.ts","../../packages/http/src/base_response_options.ts","../../packages/platform-browser/src/security/url_sanitizer.ts","../../packages/platform-browser/src/security/html_sanitizer.ts","../../packages/platform-browser/src/security/dom_sanitization_service.ts","../../packages/platform-browser/src/browser.ts","../../packages/platform-browser/src/dom/events/key_events.ts","../../packages/platform-browser/src/dom/events/hammer_gestures.ts","../../packages/platform-browser/src/dom/dom_renderer.ts","../../packages/platform-browser/src/dom/events/dom_events.ts","../../packages/platform-browser/src/dom/debug/ng_probe.ts","../../packages/platform-browser/src/dom/events/event_manager.ts","../../packages/platform-browser/src/dom/shared_styles_host.ts","../../packages/platform-browser/src/browser/server-transition.ts","../../packages/platform-browser/src/browser/testability.ts","../../packages/platform-browser/src/browser/title.ts","../../packages/platform-browser/src/browser/meta.ts","../../node_modules/rxjs/src/add/operator/catch.ts","../../packages/platform-browser/src/browser/browser_adapter.ts","../../packages/platform-browser/src/dom/dom_adapter.ts","../../packages/platform-browser/src/browser/generic_browser_adapter.ts","../../packages/platform-browser/src/browser/location/browser_platform_location.ts","../../packages/platform-browser/src/security/style_sanitizer.ts","../../packages/platform-browser/src/dom/dom_tokens.ts"],"sourcesContent":["import { Observable } from '../../Observable';\nimport { of as staticOf } from '../../observable/of';\n\nObservable.of = staticOf;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let of: typeof staticOf; //formOf an iceberg!\n  }\n}","import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/map';\nexport class LocalStorageService {\nprivate prefix: string = 'lizard-';\n/**\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\npublic set(key: string, value: any) {\n        if (typeof value.toStorageItem === 'function') {\n            value = value.toStorageItem();\n        }\n\n        localStorage.setItem(this.prefix + key, JSON.stringify(value));\n    }\n/**\n * @param {?} key\n * @return {?}\n */\npublic get(key: string): any {\n        const /** @type {?} */ value = localStorage.getItem(this.prefix + key);\n\n        if (value != null) {\n            return JSON.parse(value);\n        }\n\n        return null;\n    }\n/**\n * @param {?} key\n * @return {?}\n */\npublic remove(key: string) {\n        localStorage.removeItem(key);\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LocalStorageService_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalStorageService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocalStorageService.ctorParameters;\n/** @type {?} */\nLocalStorageService.prototype.prefix;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\n\nimport { LocalStorageService } from './local-storage.service';\nexport class AuthService {\nprivate cachedAccessToken: string;\nprivate cachedUser: any;\n/**\n * @param {?} http\n * @param {?} localStorage\n */\nconstructor(public http: Http,\npublic localStorage: LocalStorageService) {\n    }\n/**\n * @param {?} accessToken\n * @return {?}\n */\npublic setAccessToken(accessToken: string) {\n        this.localStorage.set('AT', accessToken);\n        this.cachedAccessToken = accessToken;\n    }\n/**\n * @return {?}\n */\npublic getAccessToken() {\n        if (!this.cachedAccessToken) {\n            this.cachedAccessToken = this.localStorage.get('AT');\n        }\n\n        return this.cachedAccessToken;\n    }\n/**\n * @param {?} user\n * @return {?}\n */\npublic setUser(user: any) {\n        this.localStorage.set('US', user);\n    }\n/**\n * @return {?}\n */\npublic getUser(): any {\n        if (!this.cachedAccessToken) {\n            this.cachedAccessToken = this.localStorage.get('US');\n        }\n\n        return this.cachedAccessToken;\n    }\n/**\n * @return {?}\n */\npublic isLoggedIn() {\n        return this.getUser() != null;\n    }\n/**\n * @return {?}\n */\npublic logout() {\n        this.localStorage.remove('AT');\n        this.localStorage.remove('US');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: LocalStorageService, },\n];\n}\n\nfunction AuthService_tsickle_Closure_declarations() {\n/** @type {?} */\nAuthService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAuthService.ctorParameters;\n/** @type {?} */\nAuthService.prototype.cachedAccessToken;\n/** @type {?} */\nAuthService.prototype.cachedUser;\n/** @type {?} */\nAuthService.prototype.http;\n/** @type {?} */\nAuthService.prototype.localStorage;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { ILizardConfig } from './lizard-config.interface';\nexport class AppConfig {\nprivate static initialConfig: ILizardConfig;\n/**\n * @param {?} config\n * @return {?}\n */\npublic static setInitialConfig(config: ILizardConfig) {\n        AppConfig.initialConfig = config;\n    }\n/**\n * @return {?}\n */\npublic static get config(): ILizardConfig {\n        return AppConfig.initialConfig;\n    }\n}\n\nfunction AppConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nAppConfig.initialConfig;\n}\n\n","import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/map';\n\nimport { AuthService } from './auth.service';\nimport { AppConfig } from './app-config.factory';\nexport class APIService {\nprivate apiURL: string;\nprivate clientId: string | undefined;\nprivate clientSecret: string | undefined;\n/**\n * @param {?} http\n * @param {?} authService\n */\nconstructor(public http: Http,\npublic authService: AuthService) {\n        this.apiURL = AppConfig.config.apiURL;\n        this.clientId = AppConfig.config.clientId;\n        this.clientSecret = AppConfig.config.clientSecret;\n    }\n/**\n * @param {?} path\n * @param {?=} query\n * @param {?=} options\n * @return {?}\n */\npublic get(path: string, query?: any, options?: any): Observable<any> {\n        return this.http.get(this.apiURL + '/' + path + this.getUrlParams(query),\n            this.getRequestOptions(options))\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n/**\n * @param {?} path\n * @param {?=} data\n * @param {?=} query\n * @param {?=} options\n * @return {?}\n */\npublic put(path: string, data?: any, query?: any, options?: any): Observable<any> {\n        return this.http.put(this.apiURL + '/' + path + this.getUrlParams(query), data,\n            this.getRequestOptions(options))\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n/**\n * @param {?} path\n * @param {?=} data\n * @param {?=} query\n * @param {?=} options\n * @return {?}\n */\npublic post(path: string, data?: any, query?: any, options?: any): Observable<any> {\n        return this.http.post(this.apiURL + '/' + path +\n            this.getUrlParams(query), data, this.getRequestOptions(options))\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n/**\n * @param {?} path\n * @param {?=} query\n * @param {?=} options\n * @return {?}\n */\npublic delete(path: string, query?: any, options?: any): Observable<any> {\n        return this.http.delete(this.apiURL + '/' + path +\n            this.getUrlParams(query), this.getRequestOptions(options))\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n/**\n * @param {?=} options\n * @return {?}\n */\nprivate getRequestOptions(options?: any): RequestOptions {\n        const /** @type {?} */ headers = new Headers({ 'Content-Type': 'application/json' });\n        const /** @type {?} */ requestOptions = new RequestOptions({ headers });\n\n        if (!options || options.credentials === undefined || options.credentials === true) {\n            headers.append('Authorization', 'Bearer ' + this.authService.getAccessToken());\n        }\n\n        return requestOptions;\n    }\n/**\n * @param {?} data\n * @return {?}\n */\nprivate getUrlParams(data: any): string {\n        let /** @type {?} */ urlParams = '';\n\n        if (data) {\n            const /** @type {?} */ params = [];\n            const /** @type {?} */ keys = Object.keys(data);\n            for (const /** @type {?} */ key of keys) {\n                params.push(key + '=' + encodeURIComponent(data[key]));\n            }\n\n            if (params.length > 0) {\n                urlParams = '?' + params.join('&');\n            }\n        }\n\n        return urlParams;\n    }\n/**\n * @param {?} res\n * @return {?}\n */\nprivate extractData(res: Response) {\n        const /** @type {?} */ body = res.json();\n        return body.data || {};\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate handleError(error: Response | any) {\n        // TODO use a remote logging infrastructure\n        let /** @type {?} */ errMsg: string;\n        if (error instanceof Response) {\n            const /** @type {?} */ body = error.json() || '';\n            const /** @type {?} */ err = body.error || JSON.stringify(body);\n            errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n        } else {\n            errMsg = error.message ? error.message : error.toString();\n        }\n        return Observable.throw(errMsg);\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: AuthService, },\n];\n}\n\nfunction APIService_tsickle_Closure_declarations() {\n/** @type {?} */\nAPIService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAPIService.ctorParameters;\n/** @type {?} */\nAPIService.prototype.apiURL;\n/** @type {?} */\nAPIService.prototype.clientId;\n/** @type {?} */\nAPIService.prototype.clientSecret;\n/** @type {?} */\nAPIService.prototype.http;\n/** @type {?} */\nAPIService.prototype.authService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\n\nimport { Observable } from 'rxjs/Observable';\n\nimport { APIService } from './api.service';\nimport { AuthService } from './auth.service';\nexport class CRUDService extends APIService {\nprivate resourceName: string;\nprivate localResourceIdName: string = '_id';\n/**\n * @param {?} value\n * @return {?}\n */\npublic set resourceIdName(value: string) {\n        this.localResourceIdName = value;\n    }\n/**\n * @return {?}\n */\npublic get resourceIdName(): string {\n        return this.localResourceIdName;\n    }\n/**\n * @param {?} resourceName\n * @param {?} http\n * @param {?} authService\n */\nconstructor(resourceName: string,\npublic http: Http,\npublic authService: AuthService) {\n        super(http, authService);\n\n        this.resourceName = resourceName;\n    }\n/**\n * @param {?=} query\n * @param {?=} limit\n * @param {?=} fields\n * @param {?=} sort\n * @param {?=} options\n * @return {?}\n */\npublic list(query: any = {}, limit?: number, fields?: [string], sort?: [string], options?: any): Observable<any> {\n        return this.get(this.resourceName, { query, fields, sort }, options);\n    }\n/**\n * @param {?} resourceId\n * @param {?=} fields\n * @param {?=} options\n * @return {?}\n */\npublic read(resourceId: string, fields?: [string], options?: any): Observable<any> {\n        return this.get(this.resourceName + '/' + resourceId, { fields }, options);\n    }\n/**\n * @param {?} resource\n * @param {?} data\n * @param {?} options\n * @return {?}\n */\npublic save(resource: any, data: any, options: any): Observable<any> {\n        if (resource[this.resourceIdName]) {\n            return this.put(this.resourceName + '/' + resource[this.resourceIdName], data, options);\n        } else {\n            return this.post(this.resourceName, data, options);\n        }\n    }\n/**\n * @param {?} resourceId\n * @param {?} options\n * @return {?}\n */\npublic delete(resourceId: string, options: any): Observable<any> {\n        return super.delete(this.resourceName + '/' + resourceId, options);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\nnull,\n{type: Http, },\n{type: AuthService, },\n];\n}\n\nfunction CRUDService_tsickle_Closure_declarations() {\n/** @type {?} */\nCRUDService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCRUDService.ctorParameters;\n/** @type {?} */\nCRUDService.prototype.resourceName;\n/** @type {?} */\nCRUDService.prototype.localResourceIdName;\n/** @type {?} */\nCRUDService.prototype.http;\n/** @type {?} */\nCRUDService.prototype.authService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/of';\n\nimport { Subject } from 'rxjs/Subject';\n\nimport { AuthService } from '../common/auth.service';\nimport { CRUDService } from '../common/crud.service';\nexport class UsersService extends CRUDService {\nprivate localOnUserLogsIn: Subject<any> = new Subject();\n/**\n * @return {?}\n */\npublic get onUserLogsIn(): Observable<any> {\n        return this.localOnUserLogsIn.asObservable();\n    }\n/**\n * @param {?} http\n * @param {?} authService\n */\nconstructor(public http: Http,\npublic authService: AuthService) {\n        super('users', http, authService);\n    }\n/**\n * @param {?} username\n * @param {?} password\n * @return {?}\n */\npublic login(username: string, password: string): Observable<any> {\n        return this.post('login', { username, password }, null, { credentials: false })\n            .map((loginResponse) => {\n                if (loginResponse && loginResponse.access_token) {\n                    const /** @type {?} */ accessToken = loginResponse.access_token;\n                    this.authService.setAccessToken(accessToken);\n\n                    this.localOnUserLogsIn.next();\n                }\n\n                return Observable.of(loginResponse);\n            });\n    }\n/**\n * @return {?}\n */\npublic logout() {\n        this.authService.logout();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: AuthService, },\n];\n}\n\nfunction UsersService_tsickle_Closure_declarations() {\n/** @type {?} */\nUsersService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUsersService.ctorParameters;\n/** @type {?} */\nUsersService.prototype.localOnUserLogsIn;\n/** @type {?} */\nUsersService.prototype.http;\n/** @type {?} */\nUsersService.prototype.authService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { LocalStorageService } from '../common/local-storage.service';\nimport { AuthService } from '../common/auth.service';\nimport { APIService } from '../common/api.service';\nimport { ILizardConfig } from '../common/lizard-config.interface';\nimport { AppConfig } from '../common/app-config.factory';\n\nimport { UsersService } from '../resources/users.service';\nexport class LizardSDKModule {\n/**\n * @param {?} config\n * @return {?}\n */\npublic static forRoot(config: ILizardConfig): ModuleWithProviders {\n        AppConfig.setInitialConfig(config);\n\n        return {\n            ngModule: LizardSDKModule,\n            providers: [\n                LocalStorageService,\n                AuthService,\n                APIService,\n\n                UsersService\n            ]\n        };\n    }\n/**\n * @return {?}\n */\npublic static forChild(): ModuleWithProviders {\n        return {\n            ngModule: LizardSDKModule,\n            providers: [\n                APIService,\n                AuthService,\n                APIService,\n\n                UsersService\n            ]\n        };\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    declarations: [\n        // Pipes.\n        // Directives.\n    ],\n    exports: [\n        // Pipes.\n        // Directives.\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LizardSDKModule_tsickle_Closure_declarations() {\n/** @type {?} */\nLizardSDKModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLizardSDKModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Body} from './body';\nimport {ContentType, RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n/**\n * Creates `Request` instances from provided values.\n * \n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n * \n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n * \n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n * \n * \\@Injectable() \n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n * \n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n * \n * \\@experimental\n */\nexport class Request extends Body {\n  /**\n   * Http method with which to perform the request.\n   */\n  method: RequestMethod;\n  /**\n   * {@link Headers} instance\n   */\n  headers: Headers;\n  /** Url of the remote resource */\n  url: string;\nprivate contentType: ContentType;\n  /** Enable use credentials */\n  withCredentials: boolean;\n  /** Buffer to store the response */\n  responseType: ResponseContentType;\n/**\n * @param {?} requestOptions\n */\nconstructor(requestOptions: RequestArgs) {\n    super();\n    // TODO: assert that url is present\n    const url = requestOptions.url;\n    this.url = requestOptions.url !;\n    const paramsArg = requestOptions.params || requestOptions.search;\n    if (paramsArg) {\n      let params: string;\n      if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n        params = urlEncodeParams(paramsArg).toString();\n      } else {\n        params = paramsArg.toString();\n      }\n      if (params.length > 0) {\n        let prefix = '?';\n        if (this.url.indexOf('?') != -1) {\n          prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';\n        }\n        // TODO: just delete search-query-looking string in url?\n        this.url = url + prefix + params;\n      }\n    }\n    this._body = requestOptions.body;\n    this.method = normalizeMethodName(requestOptions.method !);\n    // TODO(jeffbcross): implement behavior\n    // Defaults to 'omit', consistent with browser\n    this.headers = new Headers(requestOptions.headers);\n    this.contentType = this.detectContentType();\n    this.withCredentials = requestOptions.withCredentials !;\n    this.responseType = requestOptions.responseType !;\n  }\n/**\n * Returns the content type enum based on header options.\n * @return {?}\n */\ndetectContentType(): ContentType {\n    switch (this.headers.get('content-type')) {\n      case 'application/json':\n        return ContentType.JSON;\n      case 'application/x-www-form-urlencoded':\n        return ContentType.FORM;\n      case 'multipart/form-data':\n        return ContentType.FORM_DATA;\n      case 'text/plain':\n      case 'text/html':\n        return ContentType.TEXT;\n      case 'application/octet-stream':\n        return this._body instanceof ArrayBuffer ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n      default:\n        return this.detectContentTypeFromBody();\n    }\n  }\n/**\n * Returns the content type of request's body based on its type.\n * @return {?}\n */\ndetectContentTypeFromBody(): ContentType {\n    if (this._body == null) {\n      return ContentType.NONE;\n    } else if (this._body instanceof URLSearchParams) {\n      return ContentType.FORM;\n    } else if (this._body instanceof FormData) {\n      return ContentType.FORM_DATA;\n    } else if (this._body instanceof Blob) {\n      return ContentType.BLOB;\n    } else if (this._body instanceof ArrayBuffer) {\n      return ContentType.ARRAY_BUFFER;\n    } else if (this._body && typeof this._body === 'object') {\n      return ContentType.JSON;\n    } else {\n      return ContentType.TEXT;\n    }\n  }\n/**\n * Returns the request's body according to its type. If body is undefined, return\n * null.\n * @return {?}\n */\ngetBody(): any {\n    switch (this.contentType) {\n      case ContentType.JSON:\n        return this.text();\n      case ContentType.FORM:\n        return this.text();\n      case ContentType.FORM_DATA:\n        return this._body;\n      case ContentType.TEXT:\n        return this.text();\n      case ContentType.BLOB:\n        return this.blob();\n      case ContentType.ARRAY_BUFFER:\n        return this.arrayBuffer();\n      default:\n        return null;\n    }\n  }\n}\n\nfunction Request_tsickle_Closure_declarations() {\n/**\n * Http method with which to perform the request.\n * @type {?}\n */\nRequest.prototype.method;\n/**\n * {\\@link Headers} instance\n * @type {?}\n */\nRequest.prototype.headers;\n/**\n * Url of the remote resource\n * @type {?}\n */\nRequest.prototype.url;\n/**\n * Type of the request body *\n * @type {?}\n */\nRequest.prototype.contentType;\n/**\n * Enable use credentials\n * @type {?}\n */\nRequest.prototype.withCredentials;\n/**\n * Buffer to store the response\n * @type {?}\n */\nRequest.prototype.responseType;\n}\n\n/**\n * @param {?} params\n * @return {?}\n */\nfunction urlEncodeParams(params: {[key: string]: any}): URLSearchParams {\n  const /** @type {?} */ searchParams = new URLSearchParams();\n  Object.keys(params).forEach(key => {\n    const /** @type {?} */ value = params[key];\n    if (value && Array.isArray(value)) {\n      value.forEach(element => searchParams.append(key, element.toString()));\n    } else {\n      searchParams.append(key, value.toString());\n    }\n  });\n  return searchParams;\n}\n\nconst /** @type {?} */ noop = function() {};\nconst /** @type {?} */ w = typeof window == 'object' ? window : noop;\nconst /** @type {?} */ FormData = ( /** @type {?} */((w as any)) /** TODO #9100 */)['FormData'] || noop;\nconst /** @type {?} */ Blob = ( /** @type {?} */((w as any)) /** TODO #9100 */)['Blob'] || noop;\nexport const /** @type {?} */ ArrayBuffer: ArrayBufferConstructor =\n    ( /** @type {?} */((w as any)) /** TODO #9100 */)['ArrayBuffer'] || noop;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\n\nimport {BaseRequestOptions, RequestOptions} from './base_request_options';\nimport {RequestMethod} from './enums';\nimport {ConnectionBackend, RequestArgs, RequestOptionsArgs} from './interfaces';\nimport {Request} from './static_request';\nimport {Response} from './static_response';\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\nfunction httpRequest(backend: ConnectionBackend, request: Request): Observable<Response> {\n  return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\nfunction mergeOptions(\n    defaultOpts: BaseRequestOptions, providedOpts: RequestOptionsArgs | undefined,\n    method: RequestMethod, url: string): RequestArgs {\n  const /** @type {?} */ newOptions = defaultOpts;\n  if (providedOpts) {\n    // Hack so Dart can used named parameters\n    return /** @type {?} */(( newOptions.merge(new RequestOptions({\n      method: providedOpts.method || method,\n      url: providedOpts.url || url,\n      search: providedOpts.search,\n      params: providedOpts.params,\n      headers: providedOpts.headers,\n      body: providedOpts.body,\n      withCredentials: providedOpts.withCredentials,\n      responseType: providedOpts.responseType\n    })) as RequestArgs));\n  }\n\n  return /** @type {?} */(( newOptions.merge(new RequestOptions({method, url})) as RequestArgs));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n * \n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n * \n * ### Example\n * \n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import 'rxjs/add/operator/map'\n * \\@Component({ \n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .map(res => res.json())\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n * \n * \n * ### Example\n * \n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n * \n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n * \n * ### Example\n * \n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n * \n * \\@experimental\n */\nexport class Http {\n/**\n * @param {?} _backend\n * @param {?} _defaultOptions\n */\nconstructor(protected _backend: ConnectionBackend, protected _defaultOptions: RequestOptions) {}\n/**\n * Performs any type of http request. First argument is required, and can either be a url or\n * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n * object can be provided as the 2nd argument. The options object will be merged with the values\n * of {\\@link BaseRequestOptions} before performing the request.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nrequest(url: string|Request, options?: RequestOptionsArgs): Observable<Response> {\n    let /** @type {?} */ responseObservable: any;\n    if (typeof url === 'string') {\n      responseObservable = httpRequest(\n          this._backend,\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */(( <string>url)))));\n    } else if (url instanceof Request) {\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\n/**\n * Performs a request with `get` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nget(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n  }\n/**\n * Performs a request with `post` http method.\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npost(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Post,\n        url)));\n  }\n/**\n * Performs a request with `put` http method.\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\nput(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Put,\n        url)));\n  }\n/**\n * Performs a request with `delete` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\ndelete (url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n  }\n/**\n * Performs a request with `patch` http method.\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npatch(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(new Request(mergeOptions(\n        this._defaultOptions.merge(new RequestOptions({body: body})), options, RequestMethod.Patch,\n        url)));\n  }\n/**\n * Performs a request with `head` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nhead(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n  }\n/**\n * Performs a request with `options` http method.\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\noptions(url: string, options?: RequestOptionsArgs): Observable<Response> {\n    return this.request(\n        new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ConnectionBackend, },\n{type: RequestOptions, },\n];\n}\n\nfunction Http_tsickle_Closure_declarations() {\n/** @type {?} */\nHttp.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttp.ctorParameters;\n/** @type {?} */\nHttp.prototype._backend;\n/** @type {?} */\nHttp.prototype._defaultOptions;\n}\n\n/**\n * \\@experimental\n */\nexport class Jsonp extends Http {\n/**\n * @param {?} backend\n * @param {?} defaultOptions\n */\nconstructor(backend: ConnectionBackend, defaultOptions: RequestOptions) {\n    super(backend, defaultOptions);\n  }\n/**\n * Performs any type of http request. First argument is required, and can either be a url or\n * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n * object can be provided as the 2nd argument. The options object will be merged with the values\n * of {\\@link BaseRequestOptions} before performing the request.\n * \n * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n * supported by all current browsers. Because JSONP creates a `<script>` element with\n * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n * source could expose your application to XSS risks. Data exposed by JSONP may also be\n * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n * future security issues (e.g. content sniffing).  For more detail, see the\n * [Security Guide](http://g.co/ng/security).\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nrequest(url: string|Request, options?: RequestOptionsArgs): Observable<Response> {\n    let /** @type {?} */ responseObservable: any;\n    if (typeof url === 'string') {\n      url =\n          new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */(( <string>url))));\n    }\n    if (url instanceof Request) {\n      if (url.method !== RequestMethod.Get) {\n        throw new Error('JSONP requests must use GET request method.');\n      }\n      responseObservable = httpRequest(this._backend, url);\n    } else {\n      throw new Error('First argument must be a url string or Request instance.');\n    }\n    return responseObservable;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ConnectionBackend, },\n{type: RequestOptions, },\n];\n}\n\nfunction Jsonp_tsickle_Closure_declarations() {\n/** @type {?} */\nJsonp.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJsonp.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * The http module provides services to perform http requests. To get started, see the {@link Http}\n * class.\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {BrowserJsonp} from './backends/browser_jsonp';\nimport {BrowserXhr} from './backends/browser_xhr';\nimport {JSONPBackend, JSONPBackend_} from './backends/jsonp_backend';\nimport {CookieXSRFStrategy, XHRBackend} from './backends/xhr_backend';\nimport {BaseRequestOptions, RequestOptions} from './base_request_options';\nimport {BaseResponseOptions, ResponseOptions} from './base_response_options';\nimport {Http, Jsonp} from './http';\nimport {XSRFStrategy} from './interfaces';\n/**\n * @return {?}\n */\nexport function _createDefaultCookieXSRFStrategy() {\n  return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\nexport function httpFactory(xhrBackend: XHRBackend, requestOptions: RequestOptions): Http {\n  return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\nexport function jsonpFactory(jsonpBackend: JSONPBackend, requestOptions: RequestOptions): Jsonp {\n  return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n * \n * \\@experimental\n */\nexport class HttpModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions]},\n    BrowserXhr,\n    {provide: RequestOptions, useClass: BaseRequestOptions},\n    {provide: ResponseOptions, useClass: BaseResponseOptions},\n    XHRBackend,\n    {provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy},\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction HttpModule_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttpModule.ctorParameters;\n}\n\n/**\n * The module that includes jsonp's providers\n * \n * \\@experimental\n */\nexport class JsonpModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions]},\n    BrowserJsonp,\n    {provide: RequestOptions, useClass: BaseRequestOptions},\n    {provide: ResponseOptions, useClass: BaseResponseOptions},\n    {provide: JSONPBackend, useClass: JSONPBackend_},\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction JsonpModule_tsickle_Closure_declarations() {\n/** @type {?} */\nJsonpModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJsonpModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n\nimport {RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestOptionsArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n * \n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n * \n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n * \n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n * \n * \\@experimental\n */\nexport class RequestOptions {\n  /**\n   * Http method with which to execute a {@link Request}.\n   * Acceptable methods are defined in the {@link RequestMethod} enum.\n   */\n  method: RequestMethod|string|null;\n  /**\n   * {@link Headers} to be attached to a {@link Request}.\n   */\n  headers: Headers|null;\n  /**\n   * Body to be used when creating a {@link Request}.\n   */\n  body: any;\n  /**\n   * Url with which to perform a {@link Request}.\n   */\n  url: string|null;\n  /**\n   * Search parameters to be included in a {@link Request}.\n   */\n  params: URLSearchParams;\n/**\n * @deprecated from 4.0.0. Use params instead.\n * @return {?}\n */\nget search(): URLSearchParams { return this.params; }\n/**\n * @deprecated from 4.0.0. Use params instead.\n * @param {?} params\n * @return {?}\n */\nset search(params: URLSearchParams) { this.params = params; }\n  /**\n   * Enable use credentials for a {@link Request}.\n   */\n  withCredentials: boolean|null;\n  /*\n   * Select a buffer to store the response, such as ArrayBuffer, Blob, Json (or Document)\n   */\n  responseType: ResponseContentType|null;\n/**\n * @param {?=} __0\n */\nconstructor(\n      {method, headers, body, url, search, params, withCredentials,\n       responseType}: RequestOptionsArgs = {}) {\n    this.method = method != null ? normalizeMethodName(method) : null;\n    this.headers = headers != null ? headers : null;\n    this.body = body != null ? body : null;\n    this.url = url != null ? url : null;\n    this.params = this._mergeSearchParams(params || search);\n    this.withCredentials = withCredentials != null ? withCredentials : null;\n    this.responseType = responseType != null ? responseType : null;\n  }\n/**\n * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n * existing values. This method will not change the values of the instance on which it is being\n * called.\n * \n * Note that `headers` and `search` will override existing values completely if present in\n * the `options` object. If these values should be merged, it should be done prior to calling\n * `merge` on the `RequestOptions` instance.\n * \n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * const options = new RequestOptions({\n *   method: RequestMethod.Post\n * });\n * const req = new Request(options.merge({\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n * @param {?=} options\n * @return {?}\n */\nmerge(options?: RequestOptionsArgs): RequestOptions {\n    return new RequestOptions({\n      method: options && options.method != null ? options.method : this.method,\n      headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n      body: options && options.body != null ? options.body : this.body,\n      url: options && options.url != null ? options.url : this.url,\n      params: options && this._mergeSearchParams(options.params || options.search),\n      withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                                                                    this.withCredentials,\n      responseType: options && options.responseType != null ? options.responseType :\n                                                              this.responseType\n    });\n  }\n/**\n * @param {?=} params\n * @return {?}\n */\nprivate _mergeSearchParams(params?: string|URLSearchParams|{[key: string]: any | any[]}|\n                             null): URLSearchParams {\n    if (!params) return this.params;\n\n    if (params instanceof URLSearchParams) {\n      return params.clone();\n    }\n\n    if (typeof params === 'string') {\n      return new URLSearchParams(params);\n    }\n\n    return this._parseParams(params);\n  }\n/**\n * @param {?=} objParams\n * @return {?}\n */\nprivate _parseParams(objParams: {[key: string]: any | any[]} = {}): URLSearchParams {\n    const /** @type {?} */ params = new URLSearchParams();\n    Object.keys(objParams).forEach((key: string) => {\n      const /** @type {?} */ value: any|any[] = objParams[key];\n      if (Array.isArray(value)) {\n        value.forEach((item: any) => this._appendParam(key, item, params));\n      } else {\n        this._appendParam(key, value, params);\n      }\n    });\n    return params;\n  }\n/**\n * @param {?} key\n * @param {?} value\n * @param {?} params\n * @return {?}\n */\nprivate _appendParam(key: string, value: any, params: URLSearchParams): void {\n    if (typeof value !== 'string') {\n      value = JSON.stringify(value);\n    }\n    params.append(key, value);\n  }\n}\n\nfunction RequestOptions_tsickle_Closure_declarations() {\n/**\n * Http method with which to execute a {\\@link Request}.\n * Acceptable methods are defined in the {\\@link RequestMethod} enum.\n * @type {?}\n */\nRequestOptions.prototype.method;\n/**\n * {\\@link Headers} to be attached to a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.headers;\n/**\n * Body to be used when creating a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.body;\n/**\n * Url with which to perform a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.url;\n/**\n * Search parameters to be included in a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.params;\n/**\n * Enable use credentials for a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.withCredentials;\n/** @type {?} */\nRequestOptions.prototype.responseType;\n}\n\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n * \n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n * \n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n * \n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n * \n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n * \n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n * \n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n * \n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n * \n * \\@experimental\n */\nexport class BaseRequestOptions extends RequestOptions {\nconstructor() { super({method: RequestMethod.Get, headers: new Headers()}); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BaseRequestOptions_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseRequestOptions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBaseRequestOptions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {ɵgetDOM as getDOM} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {ResponseOptions} from '../base_response_options';\nimport {ContentType, ReadyState, RequestMethod, ResponseContentType, ResponseType} from '../enums';\nimport {Headers} from '../headers';\nimport {getResponseURL, isSuccess} from '../http_utils';\nimport {Connection, ConnectionBackend, XSRFStrategy} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\nimport {BrowserXhr} from './browser_xhr';\n\nconst /** @type {?} */ XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n * \n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n * \n * \\@experimental\n */\nexport class XHRConnection implements Connection {\n  request: Request;\n  /**\n   * Response {@link EventEmitter} which emits a single {@link Response} value on load event of\n   * `XMLHttpRequest`.\n   */\n  response: Observable<Response>;\n  readyState: ReadyState;\n/**\n * @param {?} req\n * @param {?} browserXHR\n * @param {?=} baseResponseOptions\n */\nconstructor(req: Request, browserXHR: BrowserXhr, baseResponseOptions?: ResponseOptions) {\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n      const _xhr: XMLHttpRequest = browserXHR.build();\n      _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n      if (req.withCredentials != null) {\n        _xhr.withCredentials = req.withCredentials;\n      }\n      // load event handler\n      const onLoad = () => {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = _xhr.status === 1223 ? 204 : _xhr.status;\n\n        let body: any = null;\n\n        // HTTP 204 means no content\n        if (status !== 204) {\n          // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n          // response/responseType properties were introduced in ResourceLoader Level2 spec\n          // (supported by IE10)\n          body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n\n          // Implicitly strip a potential XSSI prefix.\n          if (typeof body === 'string') {\n            body = body.replace(XSSI_PREFIX, '');\n          }\n        }\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = body ? 200 : 0;\n        }\n\n        const headers: Headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n        // IE 9 does not provide the way to get URL of response\n        const url = getResponseURL(_xhr) || req.url;\n        const statusText: string = _xhr.statusText || 'OK';\n\n        let responseOptions = new ResponseOptions({body, status, headers, statusText, url});\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        const response = new Response(responseOptions);\n        response.ok = isSuccess(status);\n        if (response.ok) {\n          responseObserver.next(response);\n          // TODO(gdi2290): defer complete if array buffer until done\n          responseObserver.complete();\n          return;\n        }\n        responseObserver.error(response);\n      };\n      // error event handler\n      const onError = (err: ErrorEvent) => {\n        let responseOptions = new ResponseOptions({\n          body: err,\n          type: ResponseType.Error,\n          status: _xhr.status,\n          statusText: _xhr.statusText,\n        });\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      this.setDetectedContentType(req, _xhr);\n\n      if (req.headers == null) {\n        req.headers = new Headers();\n      }\n      if (!req.headers.has('Accept')) {\n        req.headers.append('Accept', 'application/json, text/plain, */*');\n      }\n      req.headers.forEach((values, name) => _xhr.setRequestHeader(name !, values.join(',')));\n\n      // Select the correct buffer type to store the response\n      if (req.responseType != null && _xhr.responseType != null) {\n        switch (req.responseType) {\n          case ResponseContentType.ArrayBuffer:\n            _xhr.responseType = 'arraybuffer';\n            break;\n          case ResponseContentType.Json:\n            _xhr.responseType = 'json';\n            break;\n          case ResponseContentType.Text:\n            _xhr.responseType = 'text';\n            break;\n          case ResponseContentType.Blob:\n            _xhr.responseType = 'blob';\n            break;\n          default:\n            throw new Error('The selected responseType is not supported');\n        }\n      }\n\n      _xhr.addEventListener('load', onLoad);\n      _xhr.addEventListener('error', onError);\n\n      _xhr.send(this.request.getBody());\n\n      return () => {\n        _xhr.removeEventListener('load', onLoad);\n        _xhr.removeEventListener('error', onError);\n        _xhr.abort();\n      };\n    });\n  }\n/**\n * @param {?} req\n * @param {?} _xhr\n * @return {?}\n */\nsetDetectedContentType(req: any /** TODO Request */, _xhr: any /** XMLHttpRequest */) {\n    // Skip if a custom Content-Type header is provided\n    if (req.headers != null && req.headers.get('Content-Type') != null) {\n      return;\n    }\n\n    // Set the detected content type\n    switch (req.contentType) {\n      case ContentType.NONE:\n        break;\n      case ContentType.JSON:\n        _xhr.setRequestHeader('content-type', 'application/json');\n        break;\n      case ContentType.FORM:\n        _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        break;\n      case ContentType.TEXT:\n        _xhr.setRequestHeader('content-type', 'text/plain');\n        break;\n      case ContentType.BLOB:\n        const /** @type {?} */ blob = req.blob();\n        if (blob.type) {\n          _xhr.setRequestHeader('content-type', blob.type);\n        }\n        break;\n    }\n  }\n}\n\nfunction XHRConnection_tsickle_Closure_declarations() {\n/** @type {?} */\nXHRConnection.prototype.request;\n/**\n * Response {\\@link EventEmitter} which emits a single {\\@link Response} value on load event of\n * `XMLHttpRequest`.\n * @type {?}\n */\nXHRConnection.prototype.response;\n/** @type {?} */\nXHRConnection.prototype.readyState;\n}\n\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n * \n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n * \n * \\@experimental\n */\nexport class CookieXSRFStrategy implements XSRFStrategy {\n/**\n * @param {?=} _cookieName\n * @param {?=} _headerName\n */\nconstructor(\nprivate _cookieName: string = 'XSRF-TOKEN',\nprivate _headerName: string = 'X-XSRF-TOKEN') {}\n/**\n * @param {?} req\n * @return {?}\n */\nconfigureRequest(req: Request): void {\n    const /** @type {?} */ xsrfToken = getDOM().getCookie(this._cookieName);\n    if (xsrfToken) {\n      req.headers.set(this._headerName, xsrfToken);\n    }\n  }\n}\n\nfunction CookieXSRFStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nCookieXSRFStrategy.prototype._cookieName;\n/** @type {?} */\nCookieXSRFStrategy.prototype._headerName;\n}\n\n/**\n * Creates {\\@link XHRConnection} instances.\n * \n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n * \n * ### Example\n * \n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({ \n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * \\@experimental\n */\nexport class XHRBackend implements ConnectionBackend {\n/**\n * @param {?} _browserXHR\n * @param {?} _baseResponseOptions\n * @param {?} _xsrfStrategy\n */\nconstructor(\nprivate _browserXHR: BrowserXhr,\nprivate _baseResponseOptions: ResponseOptions,\nprivate _xsrfStrategy: XSRFStrategy) {}\n/**\n * @param {?} request\n * @return {?}\n */\ncreateConnection(request: Request): XHRConnection {\n    this._xsrfStrategy.configureRequest(request);\n    return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: BrowserXhr, },\n{type: ResponseOptions, },\n{type: XSRFStrategy, },\n];\n}\n\nfunction XHRBackend_tsickle_Closure_declarations() {\n/** @type {?} */\nXHRBackend.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nXHRBackend.ctorParameters;\n/** @type {?} */\nXHRBackend.prototype._browserXHR;\n/** @type {?} */\nXHRBackend.prototype._baseResponseOptions;\n/** @type {?} */\nXHRBackend.prototype._xsrfStrategy;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\n\nimport {ResponseOptions} from '../base_response_options';\nimport {ReadyState, RequestMethod, ResponseType} from '../enums';\nimport {Connection, ConnectionBackend} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\n\nimport {BrowserJsonp} from './browser_jsonp';\n\nconst /** @type {?} */ JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nconst /** @type {?} */ JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Abstract base class for an in-flight JSONP request.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class JSONPConnection implements Connection {\n  /**\n   * The {@link ReadyState} of this request.\n   */\n  readyState: ReadyState;\n\n  /**\n   * The outgoing HTTP request.\n   */\n  request: Request;\n\n  /**\n   * An observable that completes with the response, when the request is finished.\n   */\n  response: Observable<Response>;\n/**\n * Callback called when the JSONP request completes, to notify the application\n * of the new data.\n * @abstract\n * @param {?=} data\n * @return {?}\n */\nfinished(data?: any) {}\n}\n\nfunction JSONPConnection_tsickle_Closure_declarations() {\n/**\n * The {\\@link ReadyState} of this request.\n * @type {?}\n */\nJSONPConnection.prototype.readyState;\n/**\n * The outgoing HTTP request.\n * @type {?}\n */\nJSONPConnection.prototype.request;\n/**\n * An observable that completes with the response, when the request is finished.\n * @type {?}\n */\nJSONPConnection.prototype.response;\n}\n\nexport class JSONPConnection_ extends JSONPConnection {\nprivate _id: string;\nprivate _script: Element;\nprivate _responseData: any;\nprivate _finished: boolean = false;\n/**\n * @param {?} req\n * @param {?} _dom\n * @param {?=} baseResponseOptions\n */\nconstructor(\n      req: Request,\nprivate _dom: BrowserJsonp,\nprivate baseResponseOptions?: ResponseOptions) {\n    super();\n    if (req.method !== RequestMethod.Get) {\n      throw new TypeError(JSONP_ERR_WRONG_METHOD);\n    }\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n\n      this.readyState = ReadyState.Loading;\n      const id = this._id = _dom.nextRequestID();\n\n      _dom.exposeConnection(id, this);\n\n      // Workaround Dart\n      // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n      const callback = _dom.requestCallback(this._id);\n      let url: string = req.url;\n      if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n        url = url.replace('=JSONP_CALLBACK&', `=${callback}&`);\n      } else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n        url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + `=${callback}`;\n      }\n\n      const script = this._script = _dom.build(url);\n\n      const onLoad = (event: Event) => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        if (!this._finished) {\n          let responseOptions =\n              new ResponseOptions({body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url});\n          if (baseResponseOptions) {\n            responseOptions = baseResponseOptions.merge(responseOptions);\n          }\n          responseObserver.error(new Response(responseOptions));\n          return;\n        }\n\n        let responseOptions = new ResponseOptions({body: this._responseData, url});\n        if (this.baseResponseOptions) {\n          responseOptions = this.baseResponseOptions.merge(responseOptions);\n        }\n\n        responseObserver.next(new Response(responseOptions));\n        responseObserver.complete();\n      };\n\n      const onError = (error: Error) => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        let responseOptions = new ResponseOptions({body: error.message, type: ResponseType.Error});\n        if (baseResponseOptions) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      script.addEventListener('load', onLoad);\n      script.addEventListener('error', onError);\n\n      _dom.send(script);\n\n      return () => {\n        this.readyState = ReadyState.Cancelled;\n        script.removeEventListener('load', onLoad);\n        script.removeEventListener('error', onError);\n        this._dom.cleanup(script);\n      };\n    });\n  }\n/**\n * @param {?=} data\n * @return {?}\n */\nfinished(data?: any) {\n    // Don't leak connections\n    this._finished = true;\n    this._dom.removeConnection(this._id);\n    if (this.readyState === ReadyState.Cancelled) return;\n    this._responseData = data;\n  }\n}\n\nfunction JSONPConnection__tsickle_Closure_declarations() {\n/** @type {?} */\nJSONPConnection_.prototype._id;\n/** @type {?} */\nJSONPConnection_.prototype._script;\n/** @type {?} */\nJSONPConnection_.prototype._responseData;\n/** @type {?} */\nJSONPConnection_.prototype._finished;\n/** @type {?} */\nJSONPConnection_.prototype._dom;\n/** @type {?} */\nJSONPConnection_.prototype.baseResponseOptions;\n}\n\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class JSONPBackend extends ConnectionBackend {}\nexport class JSONPBackend_ extends JSONPBackend {\n/**\n * @param {?} _browserJSONP\n * @param {?} _baseResponseOptions\n */\nconstructor(private _browserJSONP: BrowserJsonp,\nprivate _baseResponseOptions: ResponseOptions) {\n    super();\n  }\n/**\n * @param {?} request\n * @return {?}\n */\ncreateConnection(request: Request): JSONPConnection {\n    return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: BrowserJsonp, },\n{type: ResponseOptions, },\n];\n}\n\nfunction JSONPBackend__tsickle_Closure_declarations() {\n/** @type {?} */\nJSONPBackend_.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJSONPBackend_.ctorParameters;\n/** @type {?} */\nJSONPBackend_.prototype._browserJSONP;\n/** @type {?} */\nJSONPBackend_.prototype._baseResponseOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {RequestMethod} from './enums';\n/**\n * @param {?} method\n * @return {?}\n */\nexport function normalizeMethodName(method: string | RequestMethod): RequestMethod {\n  if (typeof method !== 'string') return method;\n\n  switch (method.toUpperCase()) {\n    case 'GET':\n      return RequestMethod.Get;\n    case 'POST':\n      return RequestMethod.Post;\n    case 'PUT':\n      return RequestMethod.Put;\n    case 'DELETE':\n      return RequestMethod.Delete;\n    case 'OPTIONS':\n      return RequestMethod.Options;\n    case 'HEAD':\n      return RequestMethod.Head;\n    case 'PATCH':\n      return RequestMethod.Patch;\n  }\n  throw new Error(`Invalid request method. The method \"${method}\" is not supported.`);\n}\n\nexport const /** @type {?} */ isSuccess = (status: number): boolean => (status >= 200 && status < 300);\n/**\n * @param {?} xhr\n * @return {?}\n */\nexport function getResponseURL(xhr: any): string|null {\n  if ('responseURL' in xhr) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\nexport function stringToArrayBuffer8(input: String): ArrayBuffer {\n  const /** @type {?} */ view = new Uint8Array(input.length);\n  for (let /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n/**\n * @param {?} input\n * @return {?}\n */\nexport function stringToArrayBuffer(input: String): ArrayBuffer {\n  const /** @type {?} */ view = new Uint16Array(input.length);\n  for (let /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n","\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @param {?=} rawParams\n * @return {?}\n */\nfunction paramParser(rawParams: string = ''): Map<string, string[]> {\n  const /** @type {?} */ map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    const /** @type {?} */ params: string[] = rawParams.split('&');\n    params.forEach((param: string) => {\n      const /** @type {?} */ eqIdx = param.indexOf('=');\n      const [key, val]: string[] =\n          eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)];\n      const /** @type {?} */ list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n/**\n * \\@experimental \n * \n */\nexport class QueryEncoder {\n/**\n * @param {?} k\n * @return {?}\n */\nencodeKey(k: string): string { return standardEncoding(k); }\n/**\n * @param {?} v\n * @return {?}\n */\nencodeValue(v: string): string { return standardEncoding(v); }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v)\n      .replace(/%40/gi, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/gi, '$')\n      .replace(/%2C/gi, ',')\n      .replace(/%3B/gi, ';')\n      .replace(/%2B/gi, '+')\n      .replace(/%3D/gi, '=')\n      .replace(/%3F/gi, '?')\n      .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n * \n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n * \n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n * \n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n * \n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n * \n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n * \n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * \\@experimental\n */\nexport class URLSearchParams {\n  paramsMap: Map<string, string[]>;\n/**\n * @param {?=} rawParams\n * @param {?=} queryEncoder\n */\nconstructor(\npublic rawParams: string = '',\nprivate queryEncoder: QueryEncoder = new QueryEncoder()) {\n    this.paramsMap = paramParser(rawParams);\n  }\n/**\n * @return {?}\n */\nclone(): URLSearchParams {\n    const /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);\n    clone.appendAll(this);\n    return clone;\n  }\n/**\n * @param {?} param\n * @return {?}\n */\nhas(param: string): boolean { return this.paramsMap.has(param); }\n/**\n * @param {?} param\n * @return {?}\n */\nget(param: string): string|null {\n    const /** @type {?} */ storedParam = this.paramsMap.get(param);\n\n    return Array.isArray(storedParam) ? storedParam[0] : null;\n  }\n/**\n * @param {?} param\n * @return {?}\n */\ngetAll(param: string): string[] { return this.paramsMap.get(param) || []; }\n/**\n * @param {?} param\n * @param {?} val\n * @return {?}\n */\nset(param: string, val: string) {\n    if (val === void 0 || val === null) {\n      this.delete(param);\n      return;\n    }\n    const /** @type {?} */ list = this.paramsMap.get(param) || [];\n    list.length = 0;\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nsetAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      list.push(value[0]);\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @param {?} param\n * @param {?} val\n * @return {?}\n */\nappend(param: string, val: string): void {\n    if (val === void 0 || val === null) return;\n    const /** @type {?} */ list = this.paramsMap.get(param) || [];\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nappendAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      for (let /** @type {?} */ i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nreplaceAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      for (let /** @type {?} */ i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    const /** @type {?} */ paramsList: string[] = [];\n    this.paramsMap.forEach((values, k) => {\n      values.forEach(\n          v => paramsList.push(\n              this.queryEncoder.encodeKey(k) + '=' + this.queryEncoder.encodeValue(v)));\n    });\n    return paramsList.join('&');\n  }\n/**\n * @param {?} param\n * @return {?}\n */\ndelete (param: string): void { this.paramsMap.delete(param); }\n}\n\nfunction URLSearchParams_tsickle_Closure_declarations() {\n/** @type {?} */\nURLSearchParams.prototype.paramsMap;\n/** @type {?} */\nURLSearchParams.prototype.rawParams;\n/** @type {?} */\nURLSearchParams.prototype.queryEncoder;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {stringToArrayBuffer} from './http_utils';\nimport {URLSearchParams} from './url_search_params';\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\nexport abstract class Body {\n/**\n * \\@internal\n */\nprotected _body: any;\n/**\n * Attempts to return body as parsed `JSON` object, or raises an exception.\n * @return {?}\n */\njson(): any {\n    if (typeof this._body === 'string') {\n      return JSON.parse( /** @type {?} */((<string>this._body)));\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return JSON.parse(this.text());\n    }\n\n    return this._body;\n  }\n/**\n * Returns the body as a string, presuming `toString()` can be called on the response body.\n * \n * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n * bytes in the buffer will be interpreted. Valid values are:\n * \n * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n *   into consideration. This is the default behavior to avoid breaking apps, but should be\n *   considered deprecated.\n * \n * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n * @param {?=} encodingHint\n * @return {?}\n */\ntext(encodingHint: 'legacy'|'iso-8859' = 'legacy'): string {\n    if (this._body instanceof URLSearchParams) {\n      return this._body.toString();\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      switch (encodingHint) {\n        case 'legacy':\n          return String.fromCharCode.apply(null, new Uint16Array( /** @type {?} */((this._body as ArrayBuffer))));\n        case 'iso-8859':\n          return String.fromCharCode.apply(null, new Uint8Array( /** @type {?} */((this._body as ArrayBuffer))));\n        default:\n          throw new Error(`Invalid value for encodingHint: ${encodingHint}`);\n      }\n    }\n\n    if (this._body == null) {\n      return '';\n    }\n\n    if (typeof this._body === 'object') {\n      return JSON.stringify(this._body, null, 2);\n    }\n\n    return this._body.toString();\n  }\n/**\n * Return the body as an ArrayBuffer\n * @return {?}\n */\narrayBuffer(): ArrayBuffer {\n    if (this._body instanceof ArrayBuffer) {\n      return /** @type {?} */(( <ArrayBuffer>this._body));\n    }\n\n    return stringToArrayBuffer(this.text());\n  }\n/**\n * Returns the request's body as a Blob, assuming that body exists.\n * @return {?}\n */\nblob(): Blob {\n    if (this._body instanceof Blob) {\n      return /** @type {?} */(( <Blob>this._body));\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return new Blob([this._body]);\n    }\n\n    throw new Error('The request body isn\\'t either a blob or an array buffer');\n  }\n}\n\nfunction Body_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nBody.prototype._body;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\n\nimport {ResponseOptions} from './base_response_options';\nimport {Body} from './body';\nimport {ResponseType} from './enums';\nimport {Headers} from './headers';\n/**\n * Creates `Response` instances from provided values.\n * \n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n * \n * ### Example\n * \n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n * \n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n * \n * \\@experimental\n */\nexport class Response extends Body {\n  /**\n   * One of \"basic\", \"cors\", \"default\", \"error\", or \"opaque\".\n   *\n   * Defaults to \"default\".\n   */\n  type: ResponseType;\n  /**\n   * True if the response's status is within 200-299\n   */\n  ok: boolean;\n  /**\n   * URL of response.\n   *\n   * Defaults to empty string.\n   */\n  url: string;\n  /**\n   * Status code returned by server.\n   *\n   * Defaults to 200.\n   */\n  status: number;\n  /**\n   * Text representing the corresponding reason phrase to the `status`, as defined in [ietf rfc 2616\n   * section 6.1.1](https://tools.ietf.org/html/rfc2616#section-6.1.1)\n   *\n   * Defaults to \"OK\"\n   */\n  statusText: string|null;\n  /**\n   * Non-standard property\n   *\n   * Denotes how many of the response body's bytes have been loaded, for example if the response is\n   * the result of a progress event.\n   */\n  bytesLoaded: number;\n  /**\n   * Non-standard property\n   *\n   * Denotes how many bytes are expected in the final response body.\n   */\n  totalBytes: number;\n  /**\n   * Headers object based on the `Headers` class in the [Fetch\n   * Spec](https://fetch.spec.whatwg.org/#headers-class).\n   */\n  headers: Headers|null;\n/**\n * @param {?} responseOptions\n */\nconstructor(responseOptions: ResponseOptions) {\n    super();\n    this._body = responseOptions.body;\n    this.status = responseOptions.status !;\n    this.ok = (this.status >= 200 && this.status <= 299);\n    this.statusText = responseOptions.statusText;\n    this.headers = responseOptions.headers;\n    this.type = responseOptions.type !;\n    this.url = responseOptions.url !;\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    return `Response with status: ${this.status} ${this.statusText} for URL: ${this.url}`;\n  }\n}\n\nfunction Response_tsickle_Closure_declarations() {\n/**\n * One of \"basic\", \"cors\", \"default\", \"error\", or \"opaque\".\n * \n * Defaults to \"default\".\n * @type {?}\n */\nResponse.prototype.type;\n/**\n * True if the response's status is within 200-299\n * @type {?}\n */\nResponse.prototype.ok;\n/**\n * URL of response.\n * \n * Defaults to empty string.\n * @type {?}\n */\nResponse.prototype.url;\n/**\n * Status code returned by server.\n * \n * Defaults to 200.\n * @type {?}\n */\nResponse.prototype.status;\n/**\n * Text representing the corresponding reason phrase to the `status`, as defined in [ietf rfc 2616\n * section 6.1.1](https://tools.ietf.org/html/rfc2616#section-6.1.1)\n * \n * Defaults to \"OK\"\n * @type {?}\n */\nResponse.prototype.statusText;\n/**\n * Non-standard property\n * \n * Denotes how many of the response body's bytes have been loaded, for example if the response is\n * the result of a progress event.\n * @type {?}\n */\nResponse.prototype.bytesLoaded;\n/**\n * Non-standard property\n * \n * Denotes how many bytes are expected in the final response body.\n * @type {?}\n */\nResponse.prototype.totalBytes;\n/**\n * Headers object based on the `Headers` class in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#headers-class).\n * @type {?}\n */\nResponse.prototype.headers;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n\nlet /** @type {?} */ _nextRequestId = 0;\nexport const /** @type {?} */ JSONP_HOME = '__ng_jsonp__';\nlet /** @type {?} */ _jsonpConnections: {[key: string]: any}|null = null;\n/**\n * @return {?}\n */\nfunction _getJsonpConnections(): {[key: string]: any} {\n  const /** @type {?} */ w: {[key: string]: any} = typeof window == 'object' ? window : {};\n  if (_jsonpConnections === null) {\n    _jsonpConnections = w[JSONP_HOME] = {};\n  }\n  return _jsonpConnections;\n}\nexport class BrowserJsonp {\n/**\n * @param {?} url\n * @return {?}\n */\nbuild(url: string): any {\n    const /** @type {?} */ node = document.createElement('script');\n    node.src = url;\n    return node;\n  }\n/**\n * @return {?}\n */\nnextRequestID(): string { return `__req${_nextRequestId++}`; }\n/**\n * @param {?} id\n * @return {?}\n */\nrequestCallback(id: string): string { return `${JSONP_HOME}.${id}.finished`; }\n/**\n * @param {?} id\n * @param {?} connection\n * @return {?}\n */\nexposeConnection(id: string, connection: any) {\n    const /** @type {?} */ connections = _getJsonpConnections();\n    connections[id] = connection;\n  }\n/**\n * @param {?} id\n * @return {?}\n */\nremoveConnection(id: string) {\n    const /** @type {?} */ connections = _getJsonpConnections();\n    connections[id] = null;\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nsend(node: any) { document.body.appendChild( /** @type {?} */((<Node>(node)))); }\n/**\n * @param {?} node\n * @return {?}\n */\ncleanup(node: any) {\n    if (node.parentNode) {\n      node.parentNode.removeChild( /** @type {?} */((<Node>(node))));\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BrowserJsonp_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserJsonp.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserJsonp.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n * \n * Take care not to evaluate this in non-browser contexts.\n * \n * \\@experimental\n */\nexport class BrowserXhr {\nconstructor() {}\n/**\n * @return {?}\n */\nbuild(): any { return /** @type {?} */(( <any>(new XMLHttpRequest()))); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BrowserXhr_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserXhr.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserXhr.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nexport type RequestMethod = number;\nexport let RequestMethod: any = {};\nRequestMethod.Get = 0;\nRequestMethod.Post = 1;\nRequestMethod.Put = 2;\nRequestMethod.Delete = 3;\nRequestMethod.Options = 4;\nRequestMethod.Head = 5;\nRequestMethod.Patch = 6;\nRequestMethod[RequestMethod.Get] = \"Get\";\nRequestMethod[RequestMethod.Post] = \"Post\";\nRequestMethod[RequestMethod.Put] = \"Put\";\nRequestMethod[RequestMethod.Delete] = \"Delete\";\nRequestMethod[RequestMethod.Options] = \"Options\";\nRequestMethod[RequestMethod.Head] = \"Head\";\nRequestMethod[RequestMethod.Patch] = \"Patch\";\n\nexport type ReadyState = number;\nexport let ReadyState: any = {};\nReadyState.Unsent = 0;\nReadyState.Open = 1;\nReadyState.HeadersReceived = 2;\nReadyState.Loading = 3;\nReadyState.Done = 4;\nReadyState.Cancelled = 5;\nReadyState[ReadyState.Unsent] = \"Unsent\";\nReadyState[ReadyState.Open] = \"Open\";\nReadyState[ReadyState.HeadersReceived] = \"HeadersReceived\";\nReadyState[ReadyState.Loading] = \"Loading\";\nReadyState[ReadyState.Done] = \"Done\";\nReadyState[ReadyState.Cancelled] = \"Cancelled\";\n\nexport type ResponseType = number;\nexport let ResponseType: any = {};\nResponseType.Basic = 0;\nResponseType.Cors = 1;\nResponseType.Default = 2;\nResponseType.Error = 3;\nResponseType.Opaque = 4;\nResponseType[ResponseType.Basic] = \"Basic\";\nResponseType[ResponseType.Cors] = \"Cors\";\nResponseType[ResponseType.Default] = \"Default\";\nResponseType[ResponseType.Error] = \"Error\";\nResponseType[ResponseType.Opaque] = \"Opaque\";\n\nexport type ContentType = number;\nexport let ContentType: any = {};\nContentType.NONE = 0;\nContentType.JSON = 1;\nContentType.FORM = 2;\nContentType.FORM_DATA = 3;\nContentType.TEXT = 4;\nContentType.BLOB = 5;\nContentType.ARRAY_BUFFER = 6;\nContentType[ContentType.NONE] = \"NONE\";\nContentType[ContentType.JSON] = \"JSON\";\nContentType[ContentType.FORM] = \"FORM\";\nContentType[ContentType.FORM_DATA] = \"FORM_DATA\";\nContentType[ContentType.TEXT] = \"TEXT\";\nContentType[ContentType.BLOB] = \"BLOB\";\nContentType[ContentType.ARRAY_BUFFER] = \"ARRAY_BUFFER\";\n\nexport type ResponseContentType = number;\nexport let ResponseContentType: any = {};\nResponseContentType.Text = 0;\nResponseContentType.Json = 1;\nResponseContentType.ArrayBuffer = 2;\nResponseContentType.Blob = 3;\nResponseContentType[ResponseContentType.Text] = \"Text\";\nResponseContentType[ResponseContentType.Json] = \"Json\";\nResponseContentType[ResponseContentType.ArrayBuffer] = \"ArrayBuffer\";\nResponseContentType[ResponseContentType.Blob] = \"Blob\";\n\n","\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n * \n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n * \n * ### Example\n * \n * ```\n * import {Headers} from '\\@angular/http';\n * \n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n * \n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n * \n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n * \n * \\@experimental\n */\nexport class Headers {\n/**\n * \\@internal header names are lower case\n */\n_headers: Map<string, string[]> = new Map();\n/**\n * \\@internal map lower case names to actual names\n */\n_normalizedNames: Map<string, string> = new Map();\n/**\n * @param {?=} headers\n */\nconstructor(headers?: Headers|{[name: string]: any}|null) {\n    if (!headers) {\n      return;\n    }\n\n    if (headers instanceof Headers) {\n      headers.forEach((values: string[], name: string) => {\n        values.forEach(value => this.append(name, value));\n      });\n      return;\n    }\n\n    Object.keys(headers).forEach((name: string) => {\n      const values: string[] = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n      this.delete(name);\n      values.forEach(value => this.append(name, value));\n    });\n  }\n/**\n * Returns a new Headers instance from the given DOMString of Response Headers\n * @param {?} headersString\n * @return {?}\n */\nstatic fromResponseHeaderString(headersString: string): Headers {\n    const /** @type {?} */ headers = new Headers();\n\n    headersString.split('\\n').forEach(line => {\n      const /** @type {?} */ index = line.indexOf(':');\n      if (index > 0) {\n        const /** @type {?} */ name = line.slice(0, index);\n        const /** @type {?} */ value = line.slice(index + 1).trim();\n        headers.set(name, value);\n      }\n    });\n\n    return headers;\n  }\n/**\n * Appends a header to existing list of header values for a given header name.\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nappend(name: string, value: string): void {\n    const /** @type {?} */ values = this.getAll(name);\n\n    if (values === null) {\n      this.set(name, value);\n    } else {\n      values.push(value);\n    }\n  }\n/**\n * Deletes all header values for the given name.\n * @param {?} name\n * @return {?}\n */\ndelete (name: string): void {\n    const /** @type {?} */ lcName = name.toLowerCase();\n    this._normalizedNames.delete(lcName);\n    this._headers.delete(lcName);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nforEach(fn: (values: string[], name: string|undefined, headers: Map<string, string[]>) => void):\n      void {\n    this._headers.forEach(\n        (values, lcName) => fn(values, this._normalizedNames.get(lcName), this._headers));\n  }\n/**\n * Returns first header that matches given name.\n * @param {?} name\n * @return {?}\n */\nget(name: string): string|null {\n    const /** @type {?} */ values = this.getAll(name);\n\n    if (values === null) {\n      return null;\n    }\n\n    return values.length > 0 ? values[0] : null;\n  }\n/**\n * Checks for existence of header by given name.\n * @param {?} name\n * @return {?}\n */\nhas(name: string): boolean { return this._headers.has(name.toLowerCase()); }\n/**\n * Returns the names of the headers\n * @return {?}\n */\nkeys(): string[] { return Array.from(this._normalizedNames.values()); }\n/**\n * Sets or overrides header value for given name.\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nset(name: string, value: string|string[]): void {\n    if (Array.isArray(value)) {\n      if (value.length) {\n        this._headers.set(name.toLowerCase(), [value.join(',')]);\n      }\n    } else {\n      this._headers.set(name.toLowerCase(), [value]);\n    }\n    this.mayBeSetNormalizedName(name);\n  }\n/**\n * Returns values of all headers.\n * @return {?}\n */\nvalues(): string[][] { return Array.from(this._headers.values()); }\n/**\n * @return {?}\n */\ntoJSON(): {[name: string]: any} {\n    const /** @type {?} */ serialized: {[name: string]: string[]} = {};\n\n    this._headers.forEach((values: string[], name: string) => {\n      const /** @type {?} */ split: string[] = [];\n      values.forEach(v => split.push(...v.split(',')));\n      serialized[ /** @type {?} */((this._normalizedNames.get(name)))] = split;\n    });\n\n    return serialized;\n  }\n/**\n * Returns list of header values for a given name.\n * @param {?} name\n * @return {?}\n */\ngetAll(name: string): string[]|null {\n    return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n  }\n/**\n * This method is not implemented.\n * @return {?}\n */\nentries() { throw new Error('\"entries\" method is not implemented on Headers class'); }\n/**\n * @param {?} name\n * @return {?}\n */\nprivate mayBeSetNormalizedName(name: string): void {\n    const /** @type {?} */ lcName = name.toLowerCase();\n\n    if (!this._normalizedNames.has(lcName)) {\n      this._normalizedNames.set(lcName, name);\n    }\n  }\n}\n\nfunction Headers_tsickle_Closure_declarations() {\n/**\n * \\@internal header names are lower case\n * @type {?}\n */\nHeaders.prototype._headers;\n/**\n * \\@internal map lower case names to actual names\n * @type {?}\n */\nHeaders.prototype._normalizedNames;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n\nimport {ResponseType} from './enums';\nimport {Headers} from './headers';\nimport {ResponseOptionsArgs} from './interfaces';\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n * \n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n * \n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n * \n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n * \n * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n * \n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n * \n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n * \n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n * \n * \\@experimental\n */\nexport class ResponseOptions {\n  // TODO: FormData | Blob\n  /**\n   * String, Object, ArrayBuffer or Blob representing the body of the {@link Response}.\n   */\n  body: string|Object|ArrayBuffer|Blob|null;\n  /**\n   * Http {@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html status code}\n   * associated with the response.\n   */\n  status: number|null;\n  /**\n   * Response {@link Headers headers}\n   */\n  headers: Headers|null;\n/**\n * \\@internal\n */\nstatusText: string|null;\n/**\n * \\@internal\n */\ntype: ResponseType|null;\n  url: string|null;\n/**\n * @param {?=} __0\n */\nconstructor({body, status, headers, statusText, type, url}: ResponseOptionsArgs = {}) {\n    this.body = body != null ? body : null;\n    this.status = status != null ? status : null;\n    this.headers = headers != null ? headers : null;\n    this.statusText = statusText != null ? statusText : null;\n    this.type = type != null ? type : null;\n    this.url = url != null ? url : null;\n  }\n/**\n * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n * override\n * existing values. This method will not change the values of the instance on which it is being\n * called.\n * \n * This may be useful when sharing a base `ResponseOptions` object inside tests,\n * where certain properties may change from test to test.\n * \n * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n * \n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n * \n * var options = new ResponseOptions({\n *   body: {name: 'Jeff'}\n * });\n * var res = new Response(options.merge({\n *   url: 'https://google.com'\n * }));\n * console.log('options.url:', options.url); // null\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * console.log('res.url:', res.url); // https://google.com\n * ```\n * @param {?=} options\n * @return {?}\n */\nmerge(options?: ResponseOptionsArgs): ResponseOptions {\n    return new ResponseOptions({\n      body: options && options.body != null ? options.body : this.body,\n      status: options && options.status != null ? options.status : this.status,\n      headers: options && options.headers != null ? options.headers : this.headers,\n      statusText: options && options.statusText != null ? options.statusText : this.statusText,\n      type: options && options.type != null ? options.type : this.type,\n      url: options && options.url != null ? options.url : this.url,\n    });\n  }\n}\n\nfunction ResponseOptions_tsickle_Closure_declarations() {\n/**\n * String, Object, ArrayBuffer or Blob representing the body of the {\\@link Response}.\n * @type {?}\n */\nResponseOptions.prototype.body;\n/**\n * Http {\\@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html status code}\n * associated with the response.\n * @type {?}\n */\nResponseOptions.prototype.status;\n/**\n * Response {\\@link Headers headers}\n * @type {?}\n */\nResponseOptions.prototype.headers;\n/**\n * \\@internal\n * @type {?}\n */\nResponseOptions.prototype.statusText;\n/**\n * \\@internal\n * @type {?}\n */\nResponseOptions.prototype.type;\n/** @type {?} */\nResponseOptions.prototype.url;\n}\n\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n * \n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n * \n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n * \n * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n * \n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n * \n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n * \n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n * \n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n * \n * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n * \n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n * \n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n * \n * \\@experimental\n */\nexport class BaseResponseOptions extends ResponseOptions {\nconstructor() {\n    super({status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers()});\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BaseResponseOptions_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseResponseOptions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBaseResponseOptions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {isDevMode} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\n\n\n/**\n * A pattern that recognizes a commonly useful subset of URLs that are safe.\n *\n * This regular expression matches a subset of URLs that will not cause script\n * execution if used in URL context within a HTML document. Specifically, this\n * regular expression matches if (comment from here on and regex copied from\n * Soy's EscapingConventions):\n * (1) Either a protocol in a whitelist (http, https, mailto or ftp).\n * (2) or no protocol.  A protocol must be followed by a colon. The below\n *     allows that by allowing colons only after one of the characters [/?#].\n *     A colon after a hash (#) must be in the fragment.\n *     Otherwise, a colon after a (?) must be in a query.\n *     Otherwise, a colon after a single solidus (/) must be in a path.\n *     Otherwise, a colon after a double solidus (//) must be in the authority\n *     (before port).\n *\n * The pattern disallows &, used in HTML entity declarations before\n * one of the characters in [/?#]. This disallows HTML entities used in the\n * protocol name, which should never happen, e.g. \"h&#116;tp\" for \"http\".\n * It also disallows HTML entities in the first path part of a relative path,\n * e.g. \"foo&lt;bar/baz\".  Our existing escaping functions should not produce\n * that. More importantly, it disallows masking of a colon,\n * e.g. \"javascript&#58;...\".\n *\n * This regular expression was taken from the Closure sanitization library.\n */\nconst /** @type {?} */ SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n\n/* A pattern that matches safe srcset values */\nconst /** @type {?} */ SAFE_SRCSET_PATTERN = /^(?:(?:https?|file):|[^&:/?#]*(?:[/?#]|$))/gi;\n\n/** A pattern that matches safe data URLs. Only matches image, video and audio types. */\nconst /** @type {?} */ DATA_URL_PATTERN =\n    /^data:(?:image\\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\\/(?:mpeg|mp4|ogg|webm)|audio\\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\\/]+=*$/i;\n/**\n * @param {?} url\n * @return {?}\n */\nexport function sanitizeUrl(url: string): string {\n  url = String(url);\n  if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN)) return url;\n\n  if (isDevMode()) {\n    getDOM().log(`WARNING: sanitizing unsafe URL value ${url} (see http://g.co/ng/security#xss)`);\n  }\n\n  return 'unsafe:' + url;\n}\n/**\n * @param {?} srcset\n * @return {?}\n */\nexport function sanitizeSrcset(srcset: string): string {\n  srcset = String(srcset);\n  return srcset.split(',').map((srcset) => sanitizeUrl(srcset.trim())).join(', ');\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {isDevMode} from '@angular/core';\n\nimport {DomAdapter, getDOM} from '../dom/dom_adapter';\n\nimport {sanitizeSrcset, sanitizeUrl} from './url_sanitizer';\n\n/** A <body> element that can be safely used to parse untrusted HTML. Lazily initialized below. */\nlet /** @type {?} */ inertElement: HTMLElement|null = null;\n/** Lazily initialized to make sure the DOM adapter gets set before use. */\nlet /** @type {?} */ DOM: DomAdapter = /** @type {?} */(( null));\n/**\n * Returns an HTML element that is guaranteed to not execute code when creating elements in it.\n * @return {?}\n */\nfunction getInertElement() {\n  if (inertElement) return inertElement;\n  DOM = getDOM();\n\n  // Prefer using <template> element if supported.\n  const /** @type {?} */ templateEl = DOM.createElement('template');\n  if ('content' in templateEl) return templateEl;\n\n  const /** @type {?} */ doc = DOM.createHtmlDocument();\n  inertElement = DOM.querySelector(doc, 'body');\n  if (inertElement == null) {\n    // usually there should be only one body element in the document, but IE doesn't have any, so we\n    // need to create one.\n    const /** @type {?} */ html = DOM.createElement('html', doc);\n    inertElement = DOM.createElement('body', doc);\n    DOM.appendChild(html, inertElement);\n    DOM.appendChild(doc, html);\n  }\n  return inertElement;\n}\n/**\n * @param {?} tags\n * @return {?}\n */\nfunction tagSet(tags: string): {[k: string]: boolean} {\n  const /** @type {?} */ res: {[k: string]: boolean} = {};\n  for (const /** @type {?} */ t of tags.split(',')) res[t] = true;\n  return res;\n}\n/**\n * @param {...?} sets\n * @return {?}\n */\nfunction merge(...sets: {[k: string]: boolean}[]): {[k: string]: boolean} {\n  const /** @type {?} */ res: {[k: string]: boolean} = {};\n  for (const /** @type {?} */ s of sets) {\n    for (const /** @type {?} */ v in s) {\n      if (s.hasOwnProperty(v)) res[v] = true;\n    }\n  }\n  return res;\n}\n\n// Good source of info about elements and attributes\n// http://dev.w3.org/html5/spec/Overview.html#semantics\n// http://simon.html5.org/html-elements\n\n// Safe Void Elements - HTML5\n// http://dev.w3.org/html5/spec/Overview.html#void-elements\nconst /** @type {?} */ VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');\n\n// Elements that you can, intentionally, leave open (and which close themselves)\n// http://dev.w3.org/html5/spec/Overview.html#optional-tags\nconst /** @type {?} */ OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');\nconst /** @type {?} */ OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');\nconst /** @type {?} */ OPTIONAL_END_TAG_ELEMENTS =\n    merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);\n\n// Safe Block Elements - HTML5\nconst /** @type {?} */ BLOCK_ELEMENTS = merge(\n    OPTIONAL_END_TAG_BLOCK_ELEMENTS,\n    tagSet(\n        'address,article,' +\n        'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n        'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));\n\n// Inline Elements - HTML5\nconst /** @type {?} */ INLINE_ELEMENTS = merge(\n    OPTIONAL_END_TAG_INLINE_ELEMENTS,\n    tagSet(\n        'a,abbr,acronym,audio,b,' +\n        'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +\n        'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));\n\nconst /** @type {?} */ VALID_ELEMENTS =\n    merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);\n\n// Attributes that have href and hence need to be sanitized\nconst /** @type {?} */ URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');\n\n// Attributes that have special href set hence need to be sanitized\nconst /** @type {?} */ SRCSET_ATTRS = tagSet('srcset');\n\nconst /** @type {?} */ HTML_ATTRS = tagSet(\n    'abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +\n    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +\n    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +\n    'valign,value,vspace,width');\n\n// NB: This currently conciously doesn't support SVG. SVG sanitization has had several security\n// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via\n// innerHTML is required, SVG attributes should be added here.\n\n// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those\n// can be sanitized, but they increase security surface area without a legitimate use case, so they\n// are left out here.\n\nconst /** @type {?} */ VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);\n/**\n * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe\n * attributes.\n */\nclass SanitizingHtmlSerializer {\npublic sanitizedSomething = false;\nprivate buf: string[] = [];\n/**\n * @param {?} el\n * @return {?}\n */\nsanitizeChildren(el: Element): string {\n    // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.\n    // However this code never accesses properties off of `document` before deleting its contents\n    // again, so it shouldn't be vulnerable to DOM clobbering.\n    let /** @type {?} */ current: Node = /** @type {?} */(( el.firstChild));\n    while (current) {\n      if (DOM.isElementNode(current)) {\n        this.startElement( /** @type {?} */((current as Element)));\n      } else if (DOM.isTextNode(current)) {\n        this.chars( /** @type {?} */((DOM.nodeValue(current))));\n      } else {\n        // Strip non-element, non-text nodes.\n        this.sanitizedSomething = true;\n      }\n      if (DOM.firstChild(current)) {\n        current = /** @type {?} */(( DOM.firstChild(current)));\n        continue;\n      }\n      while (current) {\n        // Leaving the element. Walk up and to the right, closing tags as we go.\n        if (DOM.isElementNode(current)) {\n          this.endElement( /** @type {?} */((current as Element)));\n        }\n\n        let /** @type {?} */ next = checkClobberedElement(current, /** @type {?} */(( DOM.nextSibling(current))));\n\n        if (next) {\n          current = next;\n          break;\n        }\n\n        current = checkClobberedElement(current, /** @type {?} */(( DOM.parentElement(current))));\n      }\n    }\n    return this.buf.join('');\n  }\n/**\n * @param {?} element\n * @return {?}\n */\nprivate startElement(element: Element) {\n    const /** @type {?} */ tagName = DOM.nodeName(element).toLowerCase();\n    if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.sanitizedSomething = true;\n      return;\n    }\n    this.buf.push('<');\n    this.buf.push(tagName);\n    DOM.attributeMap(element).forEach((value: string, attrName: string) => {\n      const /** @type {?} */ lower = attrName.toLowerCase();\n      if (!VALID_ATTRS.hasOwnProperty(lower)) {\n        this.sanitizedSomething = true;\n        return;\n      }\n      // TODO(martinprobst): Special case image URIs for data:image/...\n      if (URI_ATTRS[lower]) value = sanitizeUrl(value);\n      if (SRCSET_ATTRS[lower]) value = sanitizeSrcset(value);\n      this.buf.push(' ');\n      this.buf.push(attrName);\n      this.buf.push('=\"');\n      this.buf.push(encodeEntities(value));\n      this.buf.push('\"');\n    });\n    this.buf.push('>');\n  }\n/**\n * @param {?} current\n * @return {?}\n */\nprivate endElement(current: Element) {\n    const /** @type {?} */ tagName = DOM.nodeName(current).toLowerCase();\n    if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {\n      this.buf.push('</');\n      this.buf.push(tagName);\n      this.buf.push('>');\n    }\n  }\n/**\n * @param {?} chars\n * @return {?}\n */\nprivate chars(chars: string) { this.buf.push(encodeEntities(chars)); }\n}\n\nfunction SanitizingHtmlSerializer_tsickle_Closure_declarations() {\n/** @type {?} */\nSanitizingHtmlSerializer.prototype.sanitizedSomething;\n/** @type {?} */\nSanitizingHtmlSerializer.prototype.buf;\n}\n\n/**\n * @param {?} node\n * @param {?} nextNode\n * @return {?}\n */\nfunction checkClobberedElement(node: Node, nextNode: Node): Node {\n  if (nextNode && DOM.contains(node, nextNode)) {\n    throw new Error(\n        `Failed to sanitize html because the element is clobbered: ${DOM.getOuterHTML(node)}`);\n  }\n  return nextNode;\n}\n\n// Regular Expressions for parsing tags and attributes\nconst /** @type {?} */ SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\nconst /** @type {?} */ NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param {?} value\n * @return {?}\n */\nfunction encodeEntities(value: string) {\n  return value.replace(/&/g, '&amp;')\n      .replace(\n          SURROGATE_PAIR_REGEXP,\n          function(match: string) {\n            const /** @type {?} */ hi = match.charCodeAt(0);\n            const /** @type {?} */ low = match.charCodeAt(1);\n            return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n          })\n      .replace(\n          NON_ALPHANUMERIC_REGEXP,\n          function(match: string) { return '&#' + match.charCodeAt(0) + ';'; })\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;');\n}\n/**\n * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'\n * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo').\n * \n * This is undesirable since we don't want to allow any of these custom attributes. This method\n * strips them all.\n * @param {?} el\n * @return {?}\n */\nfunction stripCustomNsAttrs(el: Element) {\n  DOM.attributeMap(el).forEach((_, attrName) => {\n    if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n      DOM.removeAttribute(el, attrName);\n    }\n  });\n  for (const /** @type {?} */ n of DOM.childNodesAsList(el)) {\n    if (DOM.isElementNode(n)) stripCustomNsAttrs( /** @type {?} */((n as Element)));\n  }\n}\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n * @param {?} defaultDoc\n * @param {?} unsafeHtmlInput\n * @return {?}\n */\nexport function sanitizeHtml(defaultDoc: any, unsafeHtmlInput: string): string {\n  try {\n    const /** @type {?} */ containerEl = getInertElement();\n    // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).\n    let /** @type {?} */ unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';\n\n    // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser\n    // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.\n    let /** @type {?} */ mXSSAttempts = 5;\n    let /** @type {?} */ parsedHtml = unsafeHtml;\n\n    do {\n      if (mXSSAttempts === 0) {\n        throw new Error('Failed to sanitize html because the input is unstable');\n      }\n      mXSSAttempts--;\n\n      unsafeHtml = parsedHtml;\n      DOM.setInnerHTML(containerEl, unsafeHtml);\n      if (defaultDoc.documentMode) {\n        // strip custom-namespaced attributes on IE<=11\n        stripCustomNsAttrs(containerEl);\n      }\n      parsedHtml = DOM.getInnerHTML(containerEl);\n    } while (unsafeHtml !== parsedHtml);\n\n    const /** @type {?} */ sanitizer = new SanitizingHtmlSerializer();\n    const /** @type {?} */ safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);\n\n    // Clear out the body element.\n    const /** @type {?} */ parent = DOM.getTemplateContent(containerEl) || containerEl;\n    for (const /** @type {?} */ child of DOM.childNodesAsList(parent)) {\n      DOM.removeChild(parent, child);\n    }\n\n    if (isDevMode() && sanitizer.sanitizedSomething) {\n      DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');\n    }\n\n    return safeHtml;\n  } catch ( /** @type {?} */e) {\n    // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.\n    inertElement = null;\n    throw e;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, Sanitizer, SecurityContext} from '@angular/core';\n\nimport {DOCUMENT} from '../dom/dom_tokens';\n\nimport {sanitizeHtml} from './html_sanitizer';\nimport {sanitizeStyle} from './style_sanitizer';\nimport {sanitizeUrl} from './url_sanitizer';\n\nexport {SecurityContext};\n\n\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * @stable\n */\nexport interface SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * @stable\n */\nexport interface SafeHtml extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * @stable\n */\nexport interface SafeStyle extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * @stable\n */\nexport interface SafeScript extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * @stable\n */\nexport interface SafeUrl extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * @stable\n */\nexport interface SafeResourceUrl extends SafeValue {}\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n * \n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n * \n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n * \n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n * \n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n * \n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n * \n * \\@security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](http://g.co/ng/security).\n * \n * \\@stable\n * @abstract\n */\nexport abstract class DomSanitizer implements Sanitizer {\n/**\n * Sanitizes a value for use in the given SecurityContext.\n * \n * If value is trusted for the context, this method will unwrap the contained safe value and use\n * it directly. Otherwise, value will be sanitized to be safe in the given context, for example\n * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation\n * is responsible to make sure that the value can definitely be safely used in the given context.\n * @abstract\n * @param {?} context\n * @param {?} value\n * @return {?}\n */\nsanitize(context: SecurityContext, value: SafeValue|string|null) {}\n/**\n * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\n * leave safe HTML intact, so in most situations this method should not be used.\n * \n * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n * security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustHtml(value: string) {}\n/**\n * Bypass security and trust the given value to be safe style value (CSS).\n * \n * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n * security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustStyle(value: string) {}\n/**\n * Bypass security and trust the given value to be safe JavaScript.\n * \n * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n * security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustScript(value: string) {}\n/**\n * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n * in hyperlinks or `<img src>`.\n * \n * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n * security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustUrl(value: string) {}\n/**\n * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n * be used to load executable code from, like `<script src>`, or `<iframe src>`.\n * \n * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n * security risks!\n * @abstract\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustResourceUrl(value: string) {}\n}\nexport class DomSanitizerImpl extends DomSanitizer {\n/**\n * @param {?} _doc\n */\nconstructor(\nprivate _doc: any) { super(); }\n/**\n * @param {?} ctx\n * @param {?} value\n * @return {?}\n */\nsanitize(ctx: SecurityContext, value: SafeValue|string|null): string|null {\n    if (value == null) return null;\n    switch (ctx) {\n      case SecurityContext.NONE:\n        return /** @type {?} */(( value as string));\n      case SecurityContext.HTML:\n        if (value instanceof SafeHtmlImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'HTML');\n        return sanitizeHtml(this._doc, String(value));\n      case SecurityContext.STYLE:\n        if (value instanceof SafeStyleImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'Style');\n        return sanitizeStyle( /** @type {?} */((value as string)));\n      case SecurityContext.SCRIPT:\n        if (value instanceof SafeScriptImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'Script');\n        throw new Error('unsafe value used in a script context');\n      case SecurityContext.URL:\n        if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {\n          // Allow resource URLs in URL contexts, they are strictly more trusted.\n          return value.changingThisBreaksApplicationSecurity;\n        }\n        this.checkNotSafeValue(value, 'URL');\n        return sanitizeUrl(String(value));\n      case SecurityContext.RESOURCE_URL:\n        if (value instanceof SafeResourceUrlImpl) {\n          return value.changingThisBreaksApplicationSecurity;\n        }\n        this.checkNotSafeValue(value, 'ResourceURL');\n        throw new Error(\n            'unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n      default:\n        throw new Error(`Unexpected SecurityContext ${ctx} (see http://g.co/ng/security#xss)`);\n    }\n  }\n/**\n * @param {?} value\n * @param {?} expectedType\n * @return {?}\n */\nprivate checkNotSafeValue(value: any, expectedType: string) {\n    if (value instanceof SafeValueImpl) {\n      throw new Error(\n          `Required a safe ${expectedType}, got a ${value.getTypeName()} ` +\n          `(see http://g.co/ng/security#xss)`);\n    }\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustHtml(value: string): SafeHtml { return new SafeHtmlImpl(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustStyle(value: string): SafeStyle { return new SafeStyleImpl(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustScript(value: string): SafeScript { return new SafeScriptImpl(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustUrl(value: string): SafeUrl { return new SafeUrlImpl(value); }\n/**\n * @param {?} value\n * @return {?}\n */\nbypassSecurityTrustResourceUrl(value: string): SafeResourceUrl {\n    return new SafeResourceUrlImpl(value);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction DomSanitizerImpl_tsickle_Closure_declarations() {\n/** @type {?} */\nDomSanitizerImpl.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDomSanitizerImpl.ctorParameters;\n/** @type {?} */\nDomSanitizerImpl.prototype._doc;\n}\n\n/**\n * @abstract\n */\nabstract class SafeValueImpl implements SafeValue {\n/**\n * @param {?} changingThisBreaksApplicationSecurity\n */\nconstructor(public changingThisBreaksApplicationSecurity: string) {\n    // empty\n  }\n/**\n * @abstract\n * @return {?}\n */\ngetTypeName() {}\n/**\n * @return {?}\n */\ntoString() {\n    return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` +\n        ` (see http://g.co/ng/security#xss)`;\n  }\n}\n\nfunction SafeValueImpl_tsickle_Closure_declarations() {\n/** @type {?} */\nSafeValueImpl.prototype.changingThisBreaksApplicationSecurity;\n}\n\nclass SafeHtmlImpl extends SafeValueImpl implements SafeHtml {\n/**\n * @return {?}\n */\ngetTypeName() { return 'HTML'; }\n}\nclass SafeStyleImpl extends SafeValueImpl implements SafeStyle {\n/**\n * @return {?}\n */\ngetTypeName() { return 'Style'; }\n}\nclass SafeScriptImpl extends SafeValueImpl implements SafeScript {\n/**\n * @return {?}\n */\ngetTypeName() { return 'Script'; }\n}\nclass SafeUrlImpl extends SafeValueImpl implements SafeUrl {\n/**\n * @return {?}\n */\ngetTypeName() { return 'URL'; }\n}\nclass SafeResourceUrlImpl extends SafeValueImpl implements SafeResourceUrl {\n/**\n * @return {?}\n */\ngetTypeName() { return 'ResourceURL'; }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CommonModule, PlatformLocation, ɵPLATFORM_BROWSER_ID as PLATFORM_BROWSER_ID} from '@angular/common';\nimport {APP_ID, ApplicationModule, ErrorHandler, ModuleWithProviders, NgModule, Optional, PLATFORM_ID, PLATFORM_INITIALIZER, PlatformRef, Provider, RendererFactory2, RootRenderer, Sanitizer, SkipSelf, Testability, createPlatformFactory, platformCore} from '@angular/core';\n\nimport {BrowserDomAdapter} from './browser/browser_adapter';\nimport {BrowserPlatformLocation} from './browser/location/browser_platform_location';\nimport {Meta} from './browser/meta';\nimport {SERVER_TRANSITION_PROVIDERS, TRANSITION_ID} from './browser/server-transition';\nimport {BrowserGetTestability} from './browser/testability';\nimport {Title} from './browser/title';\nimport {ELEMENT_PROBE_PROVIDERS} from './dom/debug/ng_probe';\nimport {getDOM} from './dom/dom_adapter';\nimport {DomRendererFactory2} from './dom/dom_renderer';\nimport {DOCUMENT} from './dom/dom_tokens';\nimport {DomEventsPlugin} from './dom/events/dom_events';\nimport {EVENT_MANAGER_PLUGINS, EventManager} from './dom/events/event_manager';\nimport {HAMMER_GESTURE_CONFIG, HammerGestureConfig, HammerGesturesPlugin} from './dom/events/hammer_gestures';\nimport {KeyEventsPlugin} from './dom/events/key_events';\nimport {DomSharedStylesHost, SharedStylesHost} from './dom/shared_styles_host';\nimport {DomSanitizer, DomSanitizerImpl} from './security/dom_sanitization_service';\n\nexport const /** @type {?} */ INTERNAL_BROWSER_PLATFORM_PROVIDERS: Provider[] = [\n  {provide: PLATFORM_ID, useValue: PLATFORM_BROWSER_ID},\n  {provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true},\n  {provide: PlatformLocation, useClass: BrowserPlatformLocation},\n  {provide: DOCUMENT, useFactory: _document, deps: []},\n];\n/**\n * \\@security Replacing built-in sanitization providers exposes the application to XSS risks.\n * Attacker-controlled data introduced by an unsanitized provider could expose your\n * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\n * \\@experimental\n */\nexport const BROWSER_SANITIZATION_PROVIDERS: Array<any> = [\n  {provide: Sanitizer, useExisting: DomSanitizer},\n  {provide: DomSanitizer, useClass: DomSanitizerImpl},\n];\n/**\n * \\@stable\n */\nexport const platformBrowser: (extraProviders?: Provider[]) => PlatformRef =\n    createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n/**\n * @return {?}\n */\nexport function initDomAdapter() {\n  BrowserDomAdapter.makeCurrent();\n  BrowserGetTestability.init();\n}\n/**\n * @return {?}\n */\nexport function errorHandler(): ErrorHandler {\n  return new ErrorHandler();\n}\n/**\n * @return {?}\n */\nexport function _document(): any {\n  return document;\n}\n/**\n * The ng module for the browser.\n * \n * \\@stable\n */\nexport class BrowserModule {\n/**\n * @param {?} parentModule\n */\nconstructor(  parentModule: BrowserModule) {\n    if (parentModule) {\n      throw new Error(\n          `BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.`);\n    }\n  }\n/**\n * Configures a browser-based application to transition from a server-rendered app, if\n * one is present on the page. The specified parameters must include an application id,\n * which must match between the client and server applications.\n * \n * \\@experimental\n * @param {?} params\n * @return {?}\n */\nstatic withServerTransition(params: {appId: string}): ModuleWithProviders {\n    return {\n      ngModule: BrowserModule,\n      providers: [\n        {provide: APP_ID, useValue: params.appId},\n        {provide: TRANSITION_ID, useExisting: APP_ID},\n        SERVER_TRANSITION_PROVIDERS,\n      ],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    BROWSER_SANITIZATION_PROVIDERS,\n    {provide: ErrorHandler, useFactory: errorHandler, deps: []},\n    {provide: EVENT_MANAGER_PLUGINS, useClass: DomEventsPlugin, multi: true},\n    {provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true},\n    {provide: EVENT_MANAGER_PLUGINS, useClass: HammerGesturesPlugin, multi: true},\n    {provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig},\n    DomRendererFactory2,\n    {provide: RendererFactory2, useExisting: DomRendererFactory2},\n    {provide: SharedStylesHost, useExisting: DomSharedStylesHost},\n    DomSharedStylesHost,\n    Testability,\n    EventManager,\n    ELEMENT_PROBE_PROVIDERS,\n    Meta,\n    Title,\n  ],\n  exports: [CommonModule, ApplicationModule]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: BrowserModule, decorators: [{ type: Optional }, { type: SkipSelf }, ]},\n];\n}\n\nfunction BrowserModule_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, NgZone} from '@angular/core';\n\nimport {getDOM} from '../dom_adapter';\nimport {DOCUMENT} from '../dom_tokens';\n\nimport {EventManagerPlugin} from './event_manager';\n\nconst /** @type {?} */ MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\nconst /** @type {?} */ MODIFIER_KEY_GETTERS: {[key: string]: (event: KeyboardEvent) => boolean} = {\n  'alt': (event: KeyboardEvent) => event.altKey,\n  'control': (event: KeyboardEvent) => event.ctrlKey,\n  'meta': (event: KeyboardEvent) => event.metaKey,\n  'shift': (event: KeyboardEvent) => event.shiftKey\n};\n/**\n * \\@experimental\n */\nexport class KeyEventsPlugin extends EventManagerPlugin {\n/**\n * @param {?} doc\n */\nconstructor( doc: any) { super(doc); }\n/**\n * @param {?} eventName\n * @return {?}\n */\nsupports(eventName: string): boolean { return KeyEventsPlugin.parseEventName(eventName) != null; }\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const /** @type {?} */ parsedEvent = /** @type {?} */(( KeyEventsPlugin.parseEventName(eventName)));\n\n    const /** @type {?} */ outsideHandler =\n        KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n\n    return this.manager.getZone().runOutsideAngular(() => {\n      return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n    });\n  }\n/**\n * @param {?} eventName\n * @return {?}\n */\nstatic parseEventName(eventName: string): {[key: string]: string}|null {\n    const /** @type {?} */ parts: string[] = eventName.toLowerCase().split('.');\n\n    const /** @type {?} */ domEventName = parts.shift();\n    if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n      return null;\n    }\n\n    const /** @type {?} */ key = KeyEventsPlugin._normalizeKey( /** @type {?} */((parts.pop())));\n\n    let /** @type {?} */ fullKey = '';\n    MODIFIER_KEYS.forEach(modifierName => {\n      const /** @type {?} */ index: number = parts.indexOf(modifierName);\n      if (index > -1) {\n        parts.splice(index, 1);\n        fullKey += modifierName + '.';\n      }\n    });\n    fullKey += key;\n\n    if (parts.length != 0 || key.length === 0) {\n      // returning null instead of throwing to let another plugin process the event\n      return null;\n    }\n\n    const /** @type {?} */ result: {[k: string]: string} = {};\n    result['domEventName'] = domEventName;\n    result['fullKey'] = fullKey;\n    return result;\n  }\n/**\n * @param {?} event\n * @return {?}\n */\nstatic getEventFullKey(event: KeyboardEvent): string {\n    let /** @type {?} */ fullKey = '';\n    let /** @type {?} */ key = getDOM().getEventKey(event);\n    key = key.toLowerCase();\n    if (key === ' ') {\n      key = 'space';  // for readability\n    } else if (key === '.') {\n      key = 'dot';  // because '.' is used as a separator in event names\n    }\n    MODIFIER_KEYS.forEach(modifierName => {\n      if (modifierName != key) {\n        const /** @type {?} */ modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n        if (modifierGetter(event)) {\n          fullKey += modifierName + '.';\n        }\n      }\n    });\n    fullKey += key;\n    return fullKey;\n  }\n/**\n * @param {?} fullKey\n * @param {?} handler\n * @param {?} zone\n * @return {?}\n */\nstatic eventCallback(fullKey: any, handler: Function, zone: NgZone): Function {\n    return (event: any /** TODO #9100 */) => {\n      if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {\n        zone.runGuarded(() => handler(event));\n      }\n    };\n  }\n/**\n * \\@internal\n * @param {?} keyName\n * @return {?}\n */\nstatic _normalizeKey(keyName: string): string {\n    // TODO: switch to a Map if the mapping grows too much\n    switch (keyName) {\n      case 'esc':\n        return 'escape';\n      default:\n        return keyName;\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction KeyEventsPlugin_tsickle_Closure_declarations() {\n/** @type {?} */\nKeyEventsPlugin.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nKeyEventsPlugin.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, InjectionToken} from '@angular/core';\n\nimport {DOCUMENT} from '../dom_tokens';\n\nimport {EventManagerPlugin} from './event_manager';\n\nconst /** @type {?} */ EVENT_NAMES = {\n  // pan\n  'pan': true,\n  'panstart': true,\n  'panmove': true,\n  'panend': true,\n  'pancancel': true,\n  'panleft': true,\n  'panright': true,\n  'panup': true,\n  'pandown': true,\n  // pinch\n  'pinch': true,\n  'pinchstart': true,\n  'pinchmove': true,\n  'pinchend': true,\n  'pinchcancel': true,\n  'pinchin': true,\n  'pinchout': true,\n  // press\n  'press': true,\n  'pressup': true,\n  // rotate\n  'rotate': true,\n  'rotatestart': true,\n  'rotatemove': true,\n  'rotateend': true,\n  'rotatecancel': true,\n  // swipe\n  'swipe': true,\n  'swipeleft': true,\n  'swiperight': true,\n  'swipeup': true,\n  'swipedown': true,\n  // tap\n  'tap': true,\n};\n/**\n * A DI token that you can use to provide{\\@link HammerGestureConfig} to Angular. Use it to configure\n * Hammer gestures.\n * \n * \\@experimental\n */\nexport const HAMMER_GESTURE_CONFIG = new InjectionToken<HammerGestureConfig>('HammerGestureConfig');\n\nexport interface HammerInstance {\n  on(eventName: string, callback?: Function): void;\n  off(eventName: string, callback?: Function): void;\n}\n/**\n * \\@experimental\n */\nexport class HammerGestureConfig {\n  events: string[] = [];\n\n  overrides: {[key: string]: Object} = {};\n/**\n * @param {?} element\n * @return {?}\n */\nbuildHammer(element: HTMLElement): HammerInstance {\n    const /** @type {?} */ mc = new Hammer(element);\n\n    mc.get('pinch').set({enable: true});\n    mc.get('rotate').set({enable: true});\n\n    for (const /** @type {?} */ eventName in this.overrides) {\n      mc.get(eventName).set(this.overrides[eventName]);\n    }\n\n    return mc;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction HammerGestureConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nHammerGestureConfig.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHammerGestureConfig.ctorParameters;\n/** @type {?} */\nHammerGestureConfig.prototype.events;\n/** @type {?} */\nHammerGestureConfig.prototype.overrides;\n}\n\nexport class HammerGesturesPlugin extends EventManagerPlugin {\n/**\n * @param {?} doc\n * @param {?} _config\n */\nconstructor(\n       doc: any,\nprivate _config: HammerGestureConfig) {\n    super(doc);\n  }\n/**\n * @param {?} eventName\n * @return {?}\n */\nsupports(eventName: string): boolean {\n    if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n      return false;\n    }\n\n    if (!( /** @type {?} */((window as any))).Hammer) {\n      throw new Error(`Hammer.js is not loaded, can not bind ${eventName} event`);\n    }\n\n    return true;\n  }\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const /** @type {?} */ zone = this.manager.getZone();\n    eventName = eventName.toLowerCase();\n\n    return zone.runOutsideAngular(() => {\n      // Creating the manager bind events, must be done outside of angular\n      const /** @type {?} */ mc = this._config.buildHammer(element);\n      const /** @type {?} */ callback = function(eventObj: HammerInput) {\n        zone.runGuarded(function() { handler(eventObj); });\n      };\n      mc.on(eventName, callback);\n      return () => mc.off(eventName, callback);\n    });\n  }\n/**\n * @param {?} eventName\n * @return {?}\n */\nisCustomEvent(eventName: string): boolean { return this._config.events.indexOf(eventName) > -1; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n{type: HammerGestureConfig, decorators: [{ type: Inject, args: [HAMMER_GESTURE_CONFIG, ] }, ]},\n];\n}\n\nfunction HammerGesturesPlugin_tsickle_Closure_declarations() {\n/** @type {?} */\nHammerGesturesPlugin.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHammerGesturesPlugin.ctorParameters;\n/** @type {?} */\nHammerGesturesPlugin.prototype._config;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable, Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2, ViewEncapsulation} from '@angular/core';\n\nimport {EventManager} from './events/event_manager';\nimport {DomSharedStylesHost} from './shared_styles_host';\n\nexport const /** @type {?} */ NAMESPACE_URIS: {[ns: string]: string} = {\n  'svg': 'http://www.w3.org/2000/svg',\n  'xhtml': 'http://www.w3.org/1999/xhtml',\n  'xlink': 'http://www.w3.org/1999/xlink',\n  'xml': 'http://www.w3.org/XML/1998/namespace',\n  'xmlns': 'http://www.w3.org/2000/xmlns/',\n};\n\nconst /** @type {?} */ COMPONENT_REGEX = /%COMP%/g;\nexport const /** @type {?} */ COMPONENT_VARIABLE = '%COMP%';\nexport const /** @type {?} */ HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nexport const /** @type {?} */ CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n/**\n * @param {?} componentShortId\n * @return {?}\n */\nexport function shimContentAttribute(componentShortId: string): string {\n  return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n/**\n * @param {?} componentShortId\n * @return {?}\n */\nexport function shimHostAttribute(componentShortId: string): string {\n  return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n/**\n * @param {?} compId\n * @param {?} styles\n * @param {?} target\n * @return {?}\n */\nexport function flattenStyles(\n    compId: string, styles: Array<any|any[]>, target: string[]): string[] {\n  for (let /** @type {?} */ i = 0; i < styles.length; i++) {\n    let /** @type {?} */ style = styles[i];\n\n    if (Array.isArray(style)) {\n      flattenStyles(compId, style, target);\n    } else {\n      style = style.replace(COMPONENT_REGEX, compId);\n      target.push(style);\n    }\n  }\n  return target;\n}\n/**\n * @param {?} eventHandler\n * @return {?}\n */\nfunction decoratePreventDefault(eventHandler: Function): Function {\n  return (event: any) => {\n    const /** @type {?} */ allowDefaultBehavior = eventHandler(event);\n    if (allowDefaultBehavior === false) {\n      // TODO(tbosch): move preventDefault into event plugins...\n      event.preventDefault();\n      event.returnValue = false;\n    }\n  };\n}\nexport class DomRendererFactory2 implements RendererFactory2 {\nprivate rendererByCompId = new Map<string, Renderer2>();\nprivate defaultRenderer: Renderer2;\n/**\n * @param {?} eventManager\n * @param {?} sharedStylesHost\n */\nconstructor(private eventManager: EventManager,\nprivate sharedStylesHost: DomSharedStylesHost) {\n    this.defaultRenderer = new DefaultDomRenderer2(eventManager);\n  };\n/**\n * @param {?} element\n * @param {?} type\n * @return {?}\n */\ncreateRenderer(element: any, type: RendererType2|null): Renderer2 {\n    if (!element || !type) {\n      return this.defaultRenderer;\n    }\n    switch (type.encapsulation) {\n      case ViewEncapsulation.Emulated: {\n        let /** @type {?} */ renderer = this.rendererByCompId.get(type.id);\n        if (!renderer) {\n          renderer =\n              new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type);\n          this.rendererByCompId.set(type.id, renderer);\n        }\n        ( /** @type {?} */((<EmulatedEncapsulationDomRenderer2>renderer))).applyToHost(element);\n        return renderer;\n      }\n      case ViewEncapsulation.Native:\n        return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);\n      default: {\n        if (!this.rendererByCompId.has(type.id)) {\n          const /** @type {?} */ styles = flattenStyles(type.id, type.styles, []);\n          this.sharedStylesHost.addStyles(styles);\n          this.rendererByCompId.set(type.id, this.defaultRenderer);\n        }\n        return this.defaultRenderer;\n      }\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: EventManager, },\n{type: DomSharedStylesHost, },\n];\n}\n\nfunction DomRendererFactory2_tsickle_Closure_declarations() {\n/** @type {?} */\nDomRendererFactory2.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDomRendererFactory2.ctorParameters;\n/** @type {?} */\nDomRendererFactory2.prototype.rendererByCompId;\n/** @type {?} */\nDomRendererFactory2.prototype.defaultRenderer;\n/** @type {?} */\nDomRendererFactory2.prototype.eventManager;\n/** @type {?} */\nDomRendererFactory2.prototype.sharedStylesHost;\n}\n\nclass DefaultDomRenderer2 implements Renderer2 {\n  data: {[key: string]: any} = Object.create(null);\n/**\n * @param {?} eventManager\n */\nconstructor(private eventManager: EventManager) {}\n/**\n * @return {?}\n */\ndestroy(): void {}\n\n  destroyNode: null;\n/**\n * @param {?} name\n * @param {?=} namespace\n * @return {?}\n */\ncreateElement(name: string, namespace?: string): any {\n    if (namespace) {\n      return document.createElementNS(NAMESPACE_URIS[namespace], name);\n    }\n\n    return document.createElement(name);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\ncreateComment(value: string): any { return document.createComment(value); }\n/**\n * @param {?} value\n * @return {?}\n */\ncreateText(value: string): any { return document.createTextNode(value); }\n/**\n * @param {?} parent\n * @param {?} newChild\n * @return {?}\n */\nappendChild(parent: any, newChild: any): void { parent.appendChild(newChild); }\n/**\n * @param {?} parent\n * @param {?} newChild\n * @param {?} refChild\n * @return {?}\n */\ninsertBefore(parent: any, newChild: any, refChild: any): void {\n    if (parent) {\n      parent.insertBefore(newChild, refChild);\n    }\n  }\n/**\n * @param {?} parent\n * @param {?} oldChild\n * @return {?}\n */\nremoveChild(parent: any, oldChild: any): void {\n    if (parent) {\n      parent.removeChild(oldChild);\n    }\n  }\n/**\n * @param {?} selectorOrNode\n * @return {?}\n */\nselectRootElement(selectorOrNode: string|any): any {\n    let /** @type {?} */ el: any = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :\n                                                       selectorOrNode;\n    if (!el) {\n      throw new Error(`The selector \"${selectorOrNode}\" did not match any elements`);\n    }\n    el.textContent = '';\n    return el;\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nparentNode(node: any): any { return node.parentNode; }\n/**\n * @param {?} node\n * @return {?}\n */\nnextSibling(node: any): any { return node.nextSibling; }\n/**\n * @param {?} el\n * @param {?} name\n * @param {?} value\n * @param {?=} namespace\n * @return {?}\n */\nsetAttribute(el: any, name: string, value: string, namespace?: string): void {\n    if (namespace) {\n      name = `${namespace}:${name}`;\n      const /** @type {?} */ namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.setAttributeNS(namespaceUri, name, value);\n      } else {\n        el.setAttribute(name, value);\n      }\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n/**\n * @param {?} el\n * @param {?} name\n * @param {?=} namespace\n * @return {?}\n */\nremoveAttribute(el: any, name: string, namespace?: string): void {\n    if (namespace) {\n      const /** @type {?} */ namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.removeAttributeNS(namespaceUri, name);\n      } else {\n        el.removeAttribute(`${namespace}:${name}`);\n      }\n    } else {\n      el.removeAttribute(name);\n    }\n  }\n/**\n * @param {?} el\n * @param {?} name\n * @return {?}\n */\naddClass(el: any, name: string): void { el.classList.add(name); }\n/**\n * @param {?} el\n * @param {?} name\n * @return {?}\n */\nremoveClass(el: any, name: string): void { el.classList.remove(name); }\n/**\n * @param {?} el\n * @param {?} style\n * @param {?} value\n * @param {?} flags\n * @return {?}\n */\nsetStyle(el: any, style: string, value: any, flags: RendererStyleFlags2): void {\n    if (flags & RendererStyleFlags2.DashCase) {\n      el.style.setProperty(\n          style, value, !!(flags & RendererStyleFlags2.Important) ? 'important' : '');\n    } else {\n      el.style[style] = value;\n    }\n  }\n/**\n * @param {?} el\n * @param {?} style\n * @param {?} flags\n * @return {?}\n */\nremoveStyle(el: any, style: string, flags: RendererStyleFlags2): void {\n    if (flags & RendererStyleFlags2.DashCase) {\n      el.style.removeProperty(style);\n    } else {\n      // IE requires '' instead of null\n      // see https://github.com/angular/angular/issues/7916\n      el.style[style] = '';\n    }\n  }\n/**\n * @param {?} el\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetProperty(el: any, name: string, value: any): void {\n    checkNoSyntheticProp(name, 'property');\n    el[name] = value;\n  }\n/**\n * @param {?} node\n * @param {?} value\n * @return {?}\n */\nsetValue(node: any, value: string): void { node.nodeValue = value; }\n/**\n * @param {?} target\n * @param {?} event\n * @param {?} callback\n * @return {?}\n */\nlisten(target: 'window'|'document'|'body'|any, event: string, callback: (event: any) => boolean):\n      () => void {\n    checkNoSyntheticProp(event, 'listener');\n    if (typeof target === 'string') {\n      return /** @type {?} */(( <() => void>this.eventManager.addGlobalEventListener(\n          target, event, decoratePreventDefault(callback))));\n    }\n    return /** @type {?} */(( /** @type {?} */(( <() => void>this.eventManager.addEventListener(\n               target, event, decoratePreventDefault(callback)))) as() => void));\n  }\n}\n\nfunction DefaultDomRenderer2_tsickle_Closure_declarations() {\n/** @type {?} */\nDefaultDomRenderer2.prototype.data;\n/** @type {?} */\nDefaultDomRenderer2.prototype.destroyNode;\n/** @type {?} */\nDefaultDomRenderer2.prototype.eventManager;\n}\n\n\nconst /** @type {?} */ AT_CHARCODE = '@'.charCodeAt(0);\n/**\n * @param {?} name\n * @param {?} nameKind\n * @return {?}\n */\nfunction checkNoSyntheticProp(name: string, nameKind: string) {\n  if (name.charCodeAt(0) === AT_CHARCODE) {\n    throw new Error(\n        `Found the synthetic ${nameKind} ${name}. Please include either \"BrowserAnimationsModule\" or \"NoopAnimationsModule\" in your application.`);\n  }\n}\nclass EmulatedEncapsulationDomRenderer2 extends DefaultDomRenderer2 {\nprivate contentAttr: string;\nprivate hostAttr: string;\n/**\n * @param {?} eventManager\n * @param {?} sharedStylesHost\n * @param {?} component\n */\nconstructor(\n      eventManager: EventManager, sharedStylesHost: DomSharedStylesHost,\nprivate component: RendererType2) {\n    super(eventManager);\n    const styles = flattenStyles(component.id, component.styles, []);\n    sharedStylesHost.addStyles(styles);\n\n    this.contentAttr = shimContentAttribute(component.id);\n    this.hostAttr = shimHostAttribute(component.id);\n  }\n/**\n * @param {?} element\n * @return {?}\n */\napplyToHost(element: any) { super.setAttribute(element, this.hostAttr, ''); }\n/**\n * @param {?} parent\n * @param {?} name\n * @return {?}\n */\ncreateElement(parent: any, name: string): Element {\n    const /** @type {?} */ el = super.createElement(parent, name);\n    super.setAttribute(el, this.contentAttr, '');\n    return el;\n  }\n}\n\nfunction EmulatedEncapsulationDomRenderer2_tsickle_Closure_declarations() {\n/** @type {?} */\nEmulatedEncapsulationDomRenderer2.prototype.contentAttr;\n/** @type {?} */\nEmulatedEncapsulationDomRenderer2.prototype.hostAttr;\n/** @type {?} */\nEmulatedEncapsulationDomRenderer2.prototype.component;\n}\n\nclass ShadowDomRenderer extends DefaultDomRenderer2 {\nprivate shadowRoot: any;\n/**\n * @param {?} eventManager\n * @param {?} sharedStylesHost\n * @param {?} hostEl\n * @param {?} component\n */\nconstructor(\n      eventManager: EventManager,\nprivate sharedStylesHost: DomSharedStylesHost,\nprivate hostEl: any,\nprivate component: RendererType2) {\n    super(eventManager);\n    this.shadowRoot = (hostEl as any).createShadowRoot();\n    this.sharedStylesHost.addHost(this.shadowRoot);\n    const styles = flattenStyles(component.id, component.styles, []);\n    for (let i = 0; i < styles.length; i++) {\n      const styleEl = document.createElement('style');\n      styleEl.textContent = styles[i];\n      this.shadowRoot.appendChild(styleEl);\n    }\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nprivate nodeOrShadowRoot(node: any): any { return node === this.hostEl ? this.shadowRoot : node; }\n/**\n * @return {?}\n */\ndestroy() { this.sharedStylesHost.removeHost(this.shadowRoot); }\n/**\n * @param {?} parent\n * @param {?} newChild\n * @return {?}\n */\nappendChild(parent: any, newChild: any): void {\n    return super.appendChild(this.nodeOrShadowRoot(parent), newChild);\n  }\n/**\n * @param {?} parent\n * @param {?} newChild\n * @param {?} refChild\n * @return {?}\n */\ninsertBefore(parent: any, newChild: any, refChild: any): void {\n    return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);\n  }\n/**\n * @param {?} parent\n * @param {?} oldChild\n * @return {?}\n */\nremoveChild(parent: any, oldChild: any): void {\n    return super.removeChild(this.nodeOrShadowRoot(parent), oldChild);\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nparentNode(node: any): any {\n    return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));\n  }\n}\n\nfunction ShadowDomRenderer_tsickle_Closure_declarations() {\n/** @type {?} */\nShadowDomRenderer.prototype.shadowRoot;\n/** @type {?} */\nShadowDomRenderer.prototype.sharedStylesHost;\n/** @type {?} */\nShadowDomRenderer.prototype.hostEl;\n/** @type {?} */\nShadowDomRenderer.prototype.component;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable} from '@angular/core';\n\nimport {DOCUMENT} from '../dom_tokens';\n\nimport {EventManagerPlugin} from './event_manager';\nexport class DomEventsPlugin extends EventManagerPlugin {\n/**\n * @param {?} doc\n */\nconstructor( doc: any) { super(doc); }\n/**\n * @param {?} eventName\n * @return {?}\n */\nsupports(eventName: string): boolean { return true; }\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    element.addEventListener(eventName, /** @type {?} */(( handler as any)), false);\n    return () => element.removeEventListener(eventName, /** @type {?} */(( handler as any)), false);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction DomEventsPlugin_tsickle_Closure_declarations() {\n/** @type {?} */\nDomEventsPlugin.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDomEventsPlugin.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport * as core from '@angular/core';\nimport {getDOM} from '../dom_adapter';\n\nconst /** @type {?} */ CORE_TOKENS = {\n  'ApplicationRef': core.ApplicationRef,\n  'NgZone': core.NgZone,\n};\n\nconst /** @type {?} */ INSPECT_GLOBAL_NAME = 'ng.probe';\nconst /** @type {?} */ CORE_TOKENS_GLOBAL_NAME = 'ng.coreTokens';\n/**\n * Returns a {\\@link DebugElement} for the given native DOM element, or\n * null if the given native element does not have an Angular view associated\n * with it.\n * @param {?} element\n * @return {?}\n */\nexport function inspectNativeElement(element: any): core.DebugNode|null {\n  return core.getDebugNode(element);\n}\n/**\n * Deprecated. Use the one from '\\@angular/core'.\n * @deprecated\n */\nexport class NgProbeToken {\n/**\n * @param {?} name\n * @param {?} token\n */\nconstructor(public name: string,\npublic token: any) {}\n}\n\nfunction NgProbeToken_tsickle_Closure_declarations() {\n/** @type {?} */\nNgProbeToken.prototype.name;\n/** @type {?} */\nNgProbeToken.prototype.token;\n}\n\n/**\n * @param {?} extraTokens\n * @param {?} coreTokens\n * @return {?}\n */\nexport function _createNgProbe(extraTokens: NgProbeToken[], coreTokens: core.NgProbeToken[]): any {\n  const /** @type {?} */ tokens = (extraTokens || []).concat(coreTokens || []);\n  getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);\n  getDOM().setGlobalVar(\n      CORE_TOKENS_GLOBAL_NAME, {...CORE_TOKENS, ..._ngProbeTokensToMap(tokens || [])});\n  return () => inspectNativeElement;\n}\n/**\n * @param {?} tokens\n * @return {?}\n */\nfunction _ngProbeTokensToMap(tokens: NgProbeToken[]): {[name: string]: any} {\n  return tokens.reduce((prev: any, t: any) => (prev[t.name] = t.token, prev), {});\n}\n\n/**\n * Providers which support debugging Angular applications (e.g. via `ng.probe`).\n */\nexport const /** @type {?} */ ELEMENT_PROBE_PROVIDERS: core.Provider[] = [\n  {\n    provide: core.APP_INITIALIZER,\n    useFactory: _createNgProbe,\n    deps: [\n      [NgProbeToken, new core.Optional()],\n      [core.NgProbeToken, new core.Optional()],\n    ],\n    multi: true,\n  },\n];\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, InjectionToken, NgZone} from '@angular/core';\n\nimport {getDOM} from '../dom_adapter';\n/**\n * \\@stable\n */\nexport const EVENT_MANAGER_PLUGINS =\n    new InjectionToken<EventManagerPlugin[]>('EventManagerPlugins');\n/**\n * \\@stable\n */\nexport class EventManager {\nprivate _plugins: EventManagerPlugin[];\nprivate _eventNameToPlugin = new Map<string, EventManagerPlugin>();\n/**\n * @param {?} plugins\n * @param {?} _zone\n */\nconstructor( plugins: EventManagerPlugin[],\nprivate _zone: NgZone) {\n    plugins.forEach(p => p.manager = this);\n    this._plugins = plugins.slice().reverse();\n  }\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const /** @type {?} */ plugin = this._findPluginFor(eventName);\n    return plugin.addEventListener(element, eventName, handler);\n  }\n/**\n * @param {?} target\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddGlobalEventListener(target: string, eventName: string, handler: Function): Function {\n    const /** @type {?} */ plugin = this._findPluginFor(eventName);\n    return plugin.addGlobalEventListener(target, eventName, handler);\n  }\n/**\n * @return {?}\n */\ngetZone(): NgZone { return this._zone; }\n/**\n * \\@internal\n * @param {?} eventName\n * @return {?}\n */\n_findPluginFor(eventName: string): EventManagerPlugin {\n    const /** @type {?} */ plugin = this._eventNameToPlugin.get(eventName);\n    if (plugin) {\n      return plugin;\n    }\n\n    const /** @type {?} */ plugins = this._plugins;\n    for (let /** @type {?} */ i = 0; i < plugins.length; i++) {\n      const /** @type {?} */ plugin = plugins[i];\n      if (plugin.supports(eventName)) {\n        this._eventNameToPlugin.set(eventName, plugin);\n        return plugin;\n      }\n    }\n    throw new Error(`No event manager plugin found for event ${eventName}`);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Array, decorators: [{ type: Inject, args: [EVENT_MANAGER_PLUGINS, ] }, ]},\n{type: NgZone, },\n];\n}\n\nfunction EventManager_tsickle_Closure_declarations() {\n/** @type {?} */\nEventManager.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEventManager.ctorParameters;\n/** @type {?} */\nEventManager.prototype._plugins;\n/** @type {?} */\nEventManager.prototype._eventNameToPlugin;\n/** @type {?} */\nEventManager.prototype._zone;\n}\n\n/**\n * @abstract\n */\nexport abstract class EventManagerPlugin {\n/**\n * @param {?} _doc\n */\nconstructor(private _doc: any) {}\n\n  manager: EventManager;\n/**\n * @abstract\n * @param {?} eventName\n * @return {?}\n */\nsupports(eventName: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddEventListener(element: HTMLElement, eventName: string, handler: Function) {}\n/**\n * @param {?} element\n * @param {?} eventName\n * @param {?} handler\n * @return {?}\n */\naddGlobalEventListener(element: string, eventName: string, handler: Function): Function {\n    const /** @type {?} */ target: HTMLElement = getDOM().getGlobalEventTarget(this._doc, element);\n    if (!target) {\n      throw new Error(`Unsupported event target ${target} for event ${eventName}`);\n    }\n    return this.addEventListener(target, eventName, handler);\n  };\n}\n\nfunction EventManagerPlugin_tsickle_Closure_declarations() {\n/** @type {?} */\nEventManagerPlugin.prototype.manager;\n/** @type {?} */\nEventManagerPlugin.prototype._doc;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable, OnDestroy} from '@angular/core';\nimport {getDOM} from './dom_adapter';\nimport {DOCUMENT} from './dom_tokens';\nexport class SharedStylesHost {\n/**\n * \\@internal\n */\nprotected _stylesSet = new Set<string>();\n/**\n * @param {?} styles\n * @return {?}\n */\naddStyles(styles: string[]): void {\n    const /** @type {?} */ additions = new Set<string>();\n    styles.forEach(style => {\n      if (!this._stylesSet.has(style)) {\n        this._stylesSet.add(style);\n        additions.add(style);\n      }\n    });\n    this.onStylesAdded(additions);\n  }\n/**\n * @param {?} additions\n * @return {?}\n */\nonStylesAdded(additions: Set<string>): void {}\n/**\n * @return {?}\n */\ngetAllStyles(): string[] { return Array.from(this._stylesSet); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SharedStylesHost_tsickle_Closure_declarations() {\n/** @type {?} */\nSharedStylesHost.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSharedStylesHost.ctorParameters;\n/**\n * \\@internal\n * @type {?}\n */\nSharedStylesHost.prototype._stylesSet;\n}\n\nexport class DomSharedStylesHost extends SharedStylesHost implements OnDestroy {\nprivate _hostNodes = new Set<Node>();\nprivate _styleNodes = new Set<Node>();\n/**\n * @param {?} _doc\n */\nconstructor(\nprivate _doc: any) {\n    super();\n    this._hostNodes.add(_doc.head);\n  }\n/**\n * @param {?} styles\n * @param {?} host\n * @return {?}\n */\nprivate _addStylesToHost(styles: Set<string>, host: Node): void {\n    styles.forEach((style: string) => {\n      const /** @type {?} */ styleEl = this._doc.createElement('style');\n      styleEl.textContent = style;\n      this._styleNodes.add(host.appendChild(styleEl));\n    });\n  }\n/**\n * @param {?} hostNode\n * @return {?}\n */\naddHost(hostNode: Node): void {\n    this._addStylesToHost(this._stylesSet, hostNode);\n    this._hostNodes.add(hostNode);\n  }\n/**\n * @param {?} hostNode\n * @return {?}\n */\nremoveHost(hostNode: Node): void { this._hostNodes.delete(hostNode); }\n/**\n * @param {?} additions\n * @return {?}\n */\nonStylesAdded(additions: Set<string>): void {\n    this._hostNodes.forEach(hostNode => this._addStylesToHost(additions, hostNode));\n  }\n/**\n * @return {?}\n */\nngOnDestroy(): void { this._styleNodes.forEach(styleNode => getDOM().remove(styleNode)); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction DomSharedStylesHost_tsickle_Closure_declarations() {\n/** @type {?} */\nDomSharedStylesHost.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDomSharedStylesHost.ctorParameters;\n/** @type {?} */\nDomSharedStylesHost.prototype._hostNodes;\n/** @type {?} */\nDomSharedStylesHost.prototype._styleNodes;\n/** @type {?} */\nDomSharedStylesHost.prototype._doc;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {APP_INITIALIZER, Inject, InjectionToken, Provider} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\nimport {DOCUMENT} from '../dom/dom_tokens';\n\n/**\n * An id that identifies a particular application being bootstrapped, that should\n * match across the client/server boundary.\n */\nexport const /** @type {?} */ TRANSITION_ID = new InjectionToken('TRANSITION_ID');\n/**\n * @param {?} transitionId\n * @param {?} document\n * @return {?}\n */\nexport function bootstrapListenerFactory(transitionId: string, document: any) {\n  const /** @type {?} */ factory = () => {\n    const /** @type {?} */ dom = getDOM();\n    const /** @type {?} */ styles: any[] =\n        Array.prototype.slice.apply(dom.querySelectorAll(document, `style[ng-transition]`));\n    styles.filter(el => dom.getAttribute(el, 'ng-transition') === transitionId)\n        .forEach(el => dom.remove(el));\n  };\n  return factory;\n}\n\nexport const /** @type {?} */ SERVER_TRANSITION_PROVIDERS: Provider[] = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: bootstrapListenerFactory,\n    deps: [TRANSITION_ID, DOCUMENT],\n    multi: true\n  },\n];\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {GetTestability, Testability, TestabilityRegistry, setTestabilityGetter, ɵglobal as global} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\nexport class BrowserGetTestability implements GetTestability {\n/**\n * @return {?}\n */\nstatic init() { setTestabilityGetter(new BrowserGetTestability()); }\n/**\n * @param {?} registry\n * @return {?}\n */\naddToWindow(registry: TestabilityRegistry): void {\n    global['getAngularTestability'] = (elem: any, findInAncestors: boolean = true) => {\n      const /** @type {?} */ testability = registry.findTestabilityInTree(elem, findInAncestors);\n      if (testability == null) {\n        throw new Error('Could not find testability for element.');\n      }\n      return testability;\n    };\n\n    global['getAllAngularTestabilities'] = () => registry.getAllTestabilities();\n\n    global['getAllAngularRootElements'] = () => registry.getAllRootElements();\n\n    const /** @type {?} */ whenAllStable = (callback: any /** TODO #9100 */) => {\n      const /** @type {?} */ testabilities = global['getAllAngularTestabilities']();\n      let /** @type {?} */ count = testabilities.length;\n      let /** @type {?} */ didWork = false;\n      const /** @type {?} */ decrement = function(didWork_: any /** TODO #9100 */) {\n        didWork = didWork || didWork_;\n        count--;\n        if (count == 0) {\n          callback(didWork);\n        }\n      };\n      testabilities.forEach(function(testability: any /** TODO #9100 */) {\n        testability.whenStable(decrement);\n      });\n    };\n\n    if (!global['frameworkStabilizers']) {\n      global['frameworkStabilizers'] = [];\n    }\n    global['frameworkStabilizers'].push(whenAllStable);\n  }\n/**\n * @param {?} registry\n * @param {?} elem\n * @param {?} findInAncestors\n * @return {?}\n */\nfindTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null {\n    if (elem == null) {\n      return null;\n    }\n    const /** @type {?} */ t = registry.getTestability(elem);\n    if (t != null) {\n      return t;\n    } else if (!findInAncestors) {\n      return null;\n    }\n    if (getDOM().isShadowRoot(elem)) {\n      return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);\n    }\n    return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\nimport {DOCUMENT} from '../dom/dom_tokens';\n/**\n * A service that can be used to get and set the title of a current HTML document.\n * \n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n * \n * \\@experimental\n */\nexport class Title {\n/**\n * @param {?} _doc\n */\nconstructor(\nprivate _doc: any) {}\n/**\n * Get the title of the current HTML document.\n * @return {?}\n */\ngetTitle(): string { return getDOM().getTitle(this._doc); }\n/**\n * Set the title of the current HTML document.\n * @param {?} newTitle\n * @return {?}\n */\nsetTitle(newTitle: string) { getDOM().setTitle(this._doc, newTitle); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction Title_tsickle_Closure_declarations() {\n/** @type {?} */\nTitle.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTitle.ctorParameters;\n/** @type {?} */\nTitle.prototype._doc;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Inject, Injectable} from '@angular/core';\n\nimport {DomAdapter, getDOM} from '../dom/dom_adapter';\nimport {DOCUMENT} from '../dom/dom_tokens';\n\n\n/**\n * Represents a meta element.\n *\n * @experimental\n */\nexport type MetaDefinition = {\n  charset?: string; content?: string; httpEquiv?: string; id?: string; itemprop?: string;\n  name?: string;\n  property?: string;\n  scheme?: string;\n  url?: string;\n} &\n{\n  // TODO(IgorMinar): this type looks wrong\n  [prop: string]: string;\n};\n/**\n * A service that can be used to get and add meta tags.\n * \n * \\@experimental\n */\nexport class Meta {\nprivate _dom: DomAdapter;\n/**\n * @param {?} _doc\n */\nconstructor(\nprivate _doc: any) { this._dom = getDOM(); }\n/**\n * @param {?} tag\n * @param {?=} forceCreation\n * @return {?}\n */\naddTag(tag: MetaDefinition, forceCreation: boolean = false): HTMLMetaElement|null {\n    if (!tag) return null;\n    return this._getOrCreateElement(tag, forceCreation);\n  }\n/**\n * @param {?} tags\n * @param {?=} forceCreation\n * @return {?}\n */\naddTags(tags: MetaDefinition[], forceCreation: boolean = false): HTMLMetaElement[] {\n    if (!tags) return [];\n    return tags.reduce((result: HTMLMetaElement[], tag: MetaDefinition) => {\n      if (tag) {\n        result.push(this._getOrCreateElement(tag, forceCreation));\n      }\n      return result;\n    }, []);\n  }\n/**\n * @param {?} attrSelector\n * @return {?}\n */\ngetTag(attrSelector: string): HTMLMetaElement|null {\n    if (!attrSelector) return null;\n    return this._dom.querySelector(this._doc, `meta[${attrSelector}]`);\n  }\n/**\n * @param {?} attrSelector\n * @return {?}\n */\ngetTags(attrSelector: string): HTMLMetaElement[] {\n    if (!attrSelector) return [];\n    const /** @type {?} */ list /*NodeList*/ = this._dom.querySelectorAll(this._doc, `meta[${attrSelector}]`);\n    return list ? [].slice.call(list) : [];\n  }\n/**\n * @param {?} tag\n * @param {?=} selector\n * @return {?}\n */\nupdateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement|null {\n    if (!tag) return null;\n    selector = selector || this._parseSelector(tag);\n    const /** @type {?} */ meta: HTMLMetaElement = /** @type {?} */(( this.getTag(selector)));\n    if (meta) {\n      return this._setMetaElementAttributes(tag, meta);\n    }\n    return this._getOrCreateElement(tag, true);\n  }\n/**\n * @param {?} attrSelector\n * @return {?}\n */\nremoveTag(attrSelector: string): void { this.removeTagElement( /** @type {?} */((this.getTag(attrSelector)))); }\n/**\n * @param {?} meta\n * @return {?}\n */\nremoveTagElement(meta: HTMLMetaElement): void {\n    if (meta) {\n      this._dom.remove(meta);\n    }\n  }\n/**\n * @param {?} meta\n * @param {?=} forceCreation\n * @return {?}\n */\nprivate _getOrCreateElement(meta: MetaDefinition, forceCreation: boolean = false):\n      HTMLMetaElement {\n    if (!forceCreation) {\n      const /** @type {?} */ selector: string = this._parseSelector(meta);\n      const /** @type {?} */ elem: HTMLMetaElement = /** @type {?} */(( this.getTag(selector)));\n      // It's allowed to have multiple elements with the same name so it's not enough to\n      // just check that element with the same name already present on the page. We also need to\n      // check if element has tag attributes\n      if (elem && this._containsAttributes(meta, elem)) return elem;\n    }\n    const /** @type {?} */ element: HTMLMetaElement = /** @type {?} */(( this._dom.createElement('meta') as HTMLMetaElement));\n    this._setMetaElementAttributes(meta, element);\n    const /** @type {?} */ head = this._dom.getElementsByTagName(this._doc, 'head')[0];\n    this._dom.appendChild(head, element);\n    return element;\n  }\n/**\n * @param {?} tag\n * @param {?} el\n * @return {?}\n */\nprivate _setMetaElementAttributes(tag: MetaDefinition, el: HTMLMetaElement): HTMLMetaElement {\n    Object.keys(tag).forEach((prop: string) => this._dom.setAttribute(el, prop, tag[prop]));\n    return el;\n  }\n/**\n * @param {?} tag\n * @return {?}\n */\nprivate _parseSelector(tag: MetaDefinition): string {\n    const /** @type {?} */ attr: string = tag.name ? 'name' : 'property';\n    return `${attr}=\"${tag[attr]}\"`;\n  }\n/**\n * @param {?} tag\n * @param {?} elem\n * @return {?}\n */\nprivate _containsAttributes(tag: MetaDefinition, elem: HTMLMetaElement): boolean {\n    return Object.keys(tag).every((key: string) => this._dom.getAttribute(elem, key) === tag[key]);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction Meta_tsickle_Closure_declarations() {\n/** @type {?} */\nMeta.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMeta.ctorParameters;\n/** @type {?} */\nMeta.prototype._dom;\n/** @type {?} */\nMeta.prototype._doc;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nimport { Observable } from '../../Observable';\nimport { _catch } from '../../operator/catch';\n\nObservable.prototype.catch = _catch;\nObservable.prototype._catch = _catch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    catch: typeof _catch;\n    _catch: typeof _catch;\n  }\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ɵglobal as global} from '@angular/core';\nimport {setRootDomAdapter} from '../dom/dom_adapter';\n\nimport {GenericBrowserDomAdapter} from './generic_browser_adapter';\n\nconst /** @type {?} */ _attrToPropMap = {\n  'class': 'className',\n  'innerHtml': 'innerHTML',\n  'readonly': 'readOnly',\n  'tabindex': 'tabIndex',\n};\n\nconst /** @type {?} */ DOM_KEY_LOCATION_NUMPAD = 3;\n\n// Map to convert some key or keyIdentifier values to what will be returned by getEventKey\nconst /** @type {?} */ _keyMap: {[k: string]: string} = {\n  // The following values are here for cross-browser compatibility and to match the W3C standard\n  // cf http://www.w3.org/TR/DOM-Level-3-Events-key/\n  '\\b': 'Backspace',\n  '\\t': 'Tab',\n  '\\x7F': 'Delete',\n  '\\x1B': 'Escape',\n  'Del': 'Delete',\n  'Esc': 'Escape',\n  'Left': 'ArrowLeft',\n  'Right': 'ArrowRight',\n  'Up': 'ArrowUp',\n  'Down': 'ArrowDown',\n  'Menu': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'Win': 'OS'\n};\n\n// There is a bug in Chrome for numeric keypad keys:\n// https://code.google.com/p/chromium/issues/detail?id=155654\n// 1, 2, 3 ... are reported as A, B, C ...\nconst /** @type {?} */ _chromeNumKeyPadMap = {\n  'A': '1',\n  'B': '2',\n  'C': '3',\n  'D': '4',\n  'E': '5',\n  'F': '6',\n  'G': '7',\n  'H': '8',\n  'I': '9',\n  'J': '*',\n  'K': '+',\n  'M': '-',\n  'N': '.',\n  'O': '/',\n  '\\x60': '0',\n  '\\x90': 'NumLock'\n};\n\nlet /** @type {?} */ nodeContains: (a: any, b: any) => boolean;\n\nif (global['Node']) {\n  nodeContains = global['Node'].prototype.contains || function(node) {\n    return !!(this.compareDocumentPosition(node) & 16);\n  };\n}\nexport class BrowserDomAdapter extends GenericBrowserDomAdapter {\n/**\n * @param {?} templateHtml\n * @return {?}\n */\nparse(templateHtml: string) { throw new Error('parse not implemented'); }\n/**\n * @return {?}\n */\nstatic makeCurrent() { setRootDomAdapter(new BrowserDomAdapter()); }\n/**\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\nhasProperty(element: Node, name: string): boolean { return name in element; }\n/**\n * @param {?} el\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetProperty(el: Node, name: string, value: any) { ( /** @type {?} */((<any>el)))[name] = value; }\n/**\n * @param {?} el\n * @param {?} name\n * @return {?}\n */\ngetProperty(el: Node, name: string): any { return ( /** @type {?} */((<any>el)))[name]; }\n/**\n * @param {?} el\n * @param {?} methodName\n * @param {?} args\n * @return {?}\n */\ninvoke(el: Node, methodName: string, args: any[]): any { ( /** @type {?} */((<any>el)))[methodName](...args); }\n/**\n * @param {?} error\n * @return {?}\n */\nlogError(error: string): void {\n    if (window.console) {\n      if (console.error) {\n        console.error(error);\n      } else {\n        console.log(error);\n      }\n    }\n  }\n/**\n * @param {?} error\n * @return {?}\n */\nlog(error: string): void {\n    if (window.console) {\n      window.console.log && window.console.log(error);\n    }\n  }\n/**\n * @param {?} error\n * @return {?}\n */\nlogGroup(error: string): void {\n    if (window.console) {\n      window.console.group && window.console.group(error);\n    }\n  }\n/**\n * @return {?}\n */\nlogGroupEnd(): void {\n    if (window.console) {\n      window.console.groupEnd && window.console.groupEnd();\n    }\n  }\n/**\n * @return {?}\n */\nget attrToPropMap(): any { return _attrToPropMap; }\n/**\n * @param {?} nodeA\n * @param {?} nodeB\n * @return {?}\n */\ncontains(nodeA: any, nodeB: any): boolean { return nodeContains.call(nodeA, nodeB); }\n/**\n * @param {?} el\n * @param {?} selector\n * @return {?}\n */\nquerySelector(el: Element, selector: string): any { return el.querySelector(selector); }\n/**\n * @param {?} el\n * @param {?} selector\n * @return {?}\n */\nquerySelectorAll(el: any, selector: string): any[] { return el.querySelectorAll(selector); }\n/**\n * @param {?} el\n * @param {?} evt\n * @param {?} listener\n * @return {?}\n */\non(el: Node, evt: any, listener: any) { el.addEventListener(evt, listener, false); }\n/**\n * @param {?} el\n * @param {?} evt\n * @param {?} listener\n * @return {?}\n */\nonAndCancel(el: Node, evt: any, listener: any): Function {\n    el.addEventListener(evt, listener, false);\n    // Needed to follow Dart's subscription semantic, until fix of\n    // https://code.google.com/p/dart/issues/detail?id=17406\n    return () => { el.removeEventListener(evt, listener, false); };\n  }\n/**\n * @param {?} el\n * @param {?} evt\n * @return {?}\n */\ndispatchEvent(el: Node, evt: any) { el.dispatchEvent(evt); }\n/**\n * @param {?} eventType\n * @return {?}\n */\ncreateMouseEvent(eventType: string): MouseEvent {\n    const /** @type {?} */ evt: MouseEvent = document.createEvent('MouseEvent');\n    evt.initEvent(eventType, true, true);\n    return evt;\n  }\n/**\n * @param {?} eventType\n * @return {?}\n */\ncreateEvent(eventType: any): Event {\n    const /** @type {?} */ evt: Event = document.createEvent('Event');\n    evt.initEvent(eventType, true, true);\n    return evt;\n  }\n/**\n * @param {?} evt\n * @return {?}\n */\npreventDefault(evt: Event) {\n    evt.preventDefault();\n    evt.returnValue = false;\n  }\n/**\n * @param {?} evt\n * @return {?}\n */\nisPrevented(evt: Event): boolean {\n    return evt.defaultPrevented || evt.returnValue != null && !evt.returnValue;\n  }\n/**\n * @param {?} el\n * @return {?}\n */\ngetInnerHTML(el: HTMLElement): string { return el.innerHTML; }\n/**\n * @param {?} el\n * @return {?}\n */\ngetTemplateContent(el: Node): Node|null {\n    return 'content' in el && el instanceof HTMLTemplateElement ? el.content : null;\n  }\n/**\n * @param {?} el\n * @return {?}\n */\ngetOuterHTML(el: HTMLElement): string { return el.outerHTML; }\n/**\n * @param {?} node\n * @return {?}\n */\nnodeName(node: Node): string { return node.nodeName; }\n/**\n * @param {?} node\n * @return {?}\n */\nnodeValue(node: Node): string|null { return node.nodeValue; }\n/**\n * @param {?} node\n * @return {?}\n */\ntype(node: HTMLInputElement): string { return node.type; }\n/**\n * @param {?} node\n * @return {?}\n */\ncontent(node: Node): Node {\n    if (this.hasProperty(node, 'content')) {\n      return ( /** @type {?} */((<any>node))).content;\n    } else {\n      return node;\n    }\n  }\n/**\n * @param {?} el\n * @return {?}\n */\nfirstChild(el: Node): Node|null { return el.firstChild; }\n/**\n * @param {?} el\n * @return {?}\n */\nnextSibling(el: Node): Node|null { return el.nextSibling; }\n/**\n * @param {?} el\n * @return {?}\n */\nparentElement(el: Node): Node|null { return el.parentNode; }\n/**\n * @param {?} el\n * @return {?}\n */\nchildNodes(el: any): Node[] { return el.childNodes; }\n/**\n * @param {?} el\n * @return {?}\n */\nchildNodesAsList(el: Node): any[] {\n    const /** @type {?} */ childNodes = el.childNodes;\n    const /** @type {?} */ res = new Array(childNodes.length);\n    for (let /** @type {?} */ i = 0; i < childNodes.length; i++) {\n      res[i] = childNodes[i];\n    }\n    return res;\n  }\n/**\n * @param {?} el\n * @return {?}\n */\nclearNodes(el: Node) {\n    while (el.firstChild) {\n      el.removeChild(el.firstChild);\n    }\n  }\n/**\n * @param {?} el\n * @param {?} node\n * @return {?}\n */\nappendChild(el: Node, node: Node) { el.appendChild(node); }\n/**\n * @param {?} el\n * @param {?} node\n * @return {?}\n */\nremoveChild(el: Node, node: Node) { el.removeChild(node); }\n/**\n * @param {?} el\n * @param {?} newChild\n * @param {?} oldChild\n * @return {?}\n */\nreplaceChild(el: Node, newChild: Node, oldChild: Node) { el.replaceChild(newChild, oldChild); }\n/**\n * @param {?} node\n * @return {?}\n */\nremove(node: Node): Node {\n    if (node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n    return node;\n  }\n/**\n * @param {?} parent\n * @param {?} ref\n * @param {?} node\n * @return {?}\n */\ninsertBefore(parent: Node, ref: Node, node: Node) { parent.insertBefore(node, ref); }\n/**\n * @param {?} parent\n * @param {?} ref\n * @param {?} nodes\n * @return {?}\n */\ninsertAllBefore(parent: Node, ref: Node, nodes: Node[]) {\n    nodes.forEach((n: any) => parent.insertBefore(n, ref));\n  }\n/**\n * @param {?} parent\n * @param {?} ref\n * @param {?} node\n * @return {?}\n */\ninsertAfter(parent: Node, ref: Node, node: any) { parent.insertBefore(node, ref.nextSibling); }\n/**\n * @param {?} el\n * @param {?} value\n * @return {?}\n */\nsetInnerHTML(el: Element, value: string) { el.innerHTML = value; }\n/**\n * @param {?} el\n * @return {?}\n */\ngetText(el: Node): string|null { return el.textContent; }\n/**\n * @param {?} el\n * @param {?} value\n * @return {?}\n */\nsetText(el: Node, value: string) { el.textContent = value; }\n/**\n * @param {?} el\n * @return {?}\n */\ngetValue(el: any): string { return el.value; }\n/**\n * @param {?} el\n * @param {?} value\n * @return {?}\n */\nsetValue(el: any, value: string) { el.value = value; }\n/**\n * @param {?} el\n * @return {?}\n */\ngetChecked(el: any): boolean { return el.checked; }\n/**\n * @param {?} el\n * @param {?} value\n * @return {?}\n */\nsetChecked(el: any, value: boolean) { el.checked = value; }\n/**\n * @param {?} text\n * @return {?}\n */\ncreateComment(text: string): Comment { return document.createComment(text); }\n/**\n * @param {?} html\n * @return {?}\n */\ncreateTemplate(html: any): HTMLElement {\n    const /** @type {?} */ t = document.createElement('template');\n    t.innerHTML = html;\n    return t;\n  }\n/**\n * @param {?} tagName\n * @param {?=} doc\n * @return {?}\n */\ncreateElement(tagName: string, doc = document): HTMLElement { return doc.createElement(tagName); }\n/**\n * @param {?} ns\n * @param {?} tagName\n * @param {?=} doc\n * @return {?}\n */\ncreateElementNS(ns: string, tagName: string, doc = document): Element {\n    return doc.createElementNS(ns, tagName);\n  }\n/**\n * @param {?} text\n * @param {?=} doc\n * @return {?}\n */\ncreateTextNode(text: string, doc = document): Text { return doc.createTextNode(text); }\n/**\n * @param {?} attrName\n * @param {?} attrValue\n * @param {?=} doc\n * @return {?}\n */\ncreateScriptTag(attrName: string, attrValue: string, doc = document): HTMLScriptElement {\n    const /** @type {?} */ el = /** @type {?} */(( <HTMLScriptElement>doc.createElement('SCRIPT')));\n    el.setAttribute(attrName, attrValue);\n    return el;\n  }\n/**\n * @param {?} css\n * @param {?=} doc\n * @return {?}\n */\ncreateStyleElement(css: string, doc = document): HTMLStyleElement {\n    const /** @type {?} */ style = /** @type {?} */(( <HTMLStyleElement>doc.createElement('style')));\n    this.appendChild(style, this.createTextNode(css));\n    return style;\n  }\n/**\n * @param {?} el\n * @return {?}\n */\ncreateShadowRoot(el: HTMLElement): DocumentFragment { return ( /** @type {?} */((<any>el))).createShadowRoot(); }\n/**\n * @param {?} el\n * @return {?}\n */\ngetShadowRoot(el: HTMLElement): DocumentFragment { return ( /** @type {?} */((<any>el))).shadowRoot; }\n/**\n * @param {?} el\n * @return {?}\n */\ngetHost(el: HTMLElement): HTMLElement { return ( /** @type {?} */((<any>el))).host; }\n/**\n * @param {?} node\n * @return {?}\n */\nclone(node: Node): Node { return node.cloneNode(true); }\n/**\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\ngetElementsByClassName(element: any, name: string): HTMLElement[] {\n    return element.getElementsByClassName(name);\n  }\n/**\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\ngetElementsByTagName(element: any, name: string): HTMLElement[] {\n    return element.getElementsByTagName(name);\n  }\n/**\n * @param {?} element\n * @return {?}\n */\nclassList(element: any): any[] { return Array.prototype.slice.call(element.classList, 0); }\n/**\n * @param {?} element\n * @param {?} className\n * @return {?}\n */\naddClass(element: any, className: string) { element.classList.add(className); }\n/**\n * @param {?} element\n * @param {?} className\n * @return {?}\n */\nremoveClass(element: any, className: string) { element.classList.remove(className); }\n/**\n * @param {?} element\n * @param {?} className\n * @return {?}\n */\nhasClass(element: any, className: string): boolean {\n    return element.classList.contains(className);\n  }\n/**\n * @param {?} element\n * @param {?} styleName\n * @param {?} styleValue\n * @return {?}\n */\nsetStyle(element: any, styleName: string, styleValue: string) {\n    element.style[styleName] = styleValue;\n  }\n/**\n * @param {?} element\n * @param {?} stylename\n * @return {?}\n */\nremoveStyle(element: any, stylename: string) {\n    // IE requires '' instead of null\n    // see https://github.com/angular/angular/issues/7916\n    element.style[stylename] = '';\n  }\n/**\n * @param {?} element\n * @param {?} stylename\n * @return {?}\n */\ngetStyle(element: any, stylename: string): string { return element.style[stylename]; }\n/**\n * @param {?} element\n * @param {?} styleName\n * @param {?=} styleValue\n * @return {?}\n */\nhasStyle(element: any, styleName: string, styleValue?: string|null): boolean {\n    const /** @type {?} */ value = this.getStyle(element, styleName) || '';\n    return styleValue ? value == styleValue : value.length > 0;\n  }\n/**\n * @param {?} element\n * @return {?}\n */\ntagName(element: any): string { return element.tagName; }\n/**\n * @param {?} element\n * @return {?}\n */\nattributeMap(element: any): Map<string, string> {\n    const /** @type {?} */ res = new Map<string, string>();\n    const /** @type {?} */ elAttrs = element.attributes;\n    for (let /** @type {?} */ i = 0; i < elAttrs.length; i++) {\n      const /** @type {?} */ attrib = elAttrs[i];\n      res.set(attrib.name, attrib.value);\n    }\n    return res;\n  }\n/**\n * @param {?} element\n * @param {?} attribute\n * @return {?}\n */\nhasAttribute(element: Element, attribute: string): boolean {\n    return element.hasAttribute(attribute);\n  }\n/**\n * @param {?} element\n * @param {?} ns\n * @param {?} attribute\n * @return {?}\n */\nhasAttributeNS(element: Element, ns: string, attribute: string): boolean {\n    return element.hasAttributeNS(ns, attribute);\n  }\n/**\n * @param {?} element\n * @param {?} attribute\n * @return {?}\n */\ngetAttribute(element: Element, attribute: string): string|null {\n    return element.getAttribute(attribute);\n  }\n/**\n * @param {?} element\n * @param {?} ns\n * @param {?} name\n * @return {?}\n */\ngetAttributeNS(element: Element, ns: string, name: string): string {\n    return element.getAttributeNS(ns, name);\n  }\n/**\n * @param {?} element\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetAttribute(element: Element, name: string, value: string) { element.setAttribute(name, value); }\n/**\n * @param {?} element\n * @param {?} ns\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetAttributeNS(element: Element, ns: string, name: string, value: string) {\n    element.setAttributeNS(ns, name, value);\n  }\n/**\n * @param {?} element\n * @param {?} attribute\n * @return {?}\n */\nremoveAttribute(element: Element, attribute: string) { element.removeAttribute(attribute); }\n/**\n * @param {?} element\n * @param {?} ns\n * @param {?} name\n * @return {?}\n */\nremoveAttributeNS(element: Element, ns: string, name: string) {\n    element.removeAttributeNS(ns, name);\n  }\n/**\n * @param {?} el\n * @return {?}\n */\ntemplateAwareRoot(el: Node): any { return this.isTemplateElement(el) ? this.content(el) : el; }\n/**\n * @return {?}\n */\ncreateHtmlDocument(): HTMLDocument {\n    return document.implementation.createHTMLDocument('fakeTitle');\n  }\n/**\n * @param {?} el\n * @return {?}\n */\ngetBoundingClientRect(el: Element): any {\n    try {\n      return el.getBoundingClientRect();\n    } catch ( /** @type {?} */e) {\n      return {top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0};\n    }\n  }\n/**\n * @param {?} doc\n * @return {?}\n */\ngetTitle(doc: Document): string { return document.title; }\n/**\n * @param {?} doc\n * @param {?} newTitle\n * @return {?}\n */\nsetTitle(doc: Document, newTitle: string) { document.title = newTitle || ''; }\n/**\n * @param {?} n\n * @param {?} selector\n * @return {?}\n */\nelementMatches(n: any, selector: string): boolean {\n    if (n instanceof HTMLElement) {\n      return n.matches && n.matches(selector) ||\n          n.msMatchesSelector && n.msMatchesSelector(selector) ||\n          n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\n    }\n\n    return false;\n  }\n/**\n * @param {?} el\n * @return {?}\n */\nisTemplateElement(el: Node): boolean {\n    return el instanceof HTMLElement && el.nodeName == 'TEMPLATE';\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nisTextNode(node: Node): boolean { return node.nodeType === Node.TEXT_NODE; }\n/**\n * @param {?} node\n * @return {?}\n */\nisCommentNode(node: Node): boolean { return node.nodeType === Node.COMMENT_NODE; }\n/**\n * @param {?} node\n * @return {?}\n */\nisElementNode(node: Node): boolean { return node.nodeType === Node.ELEMENT_NODE; }\n/**\n * @param {?} node\n * @return {?}\n */\nhasShadowRoot(node: any): boolean {\n    return node.shadowRoot != null && node instanceof HTMLElement;\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nisShadowRoot(node: any): boolean { return node instanceof DocumentFragment; }\n/**\n * @param {?} node\n * @return {?}\n */\nimportIntoDoc(node: Node): any { return document.importNode(this.templateAwareRoot(node), true); }\n/**\n * @param {?} node\n * @return {?}\n */\nadoptNode(node: Node): any { return document.adoptNode(node); }\n/**\n * @param {?} el\n * @return {?}\n */\ngetHref(el: Element): string { return ( /** @type {?} */((<any>el))).href; }\n/**\n * @param {?} event\n * @return {?}\n */\ngetEventKey(event: any): string {\n    let /** @type {?} */ key = event.key;\n    if (key == null) {\n      key = event.keyIdentifier;\n      // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and\n      // Safari cf\n      // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces\n      if (key == null) {\n        return 'Unidentified';\n      }\n      if (key.startsWith('U+')) {\n        key = String.fromCharCode(parseInt(key.substring(2), 16));\n        if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {\n          // There is a bug in Chrome for numeric keypad keys:\n          // https://code.google.com/p/chromium/issues/detail?id=155654\n          // 1, 2, 3 ... are reported as A, B, C ...\n          key = ( /** @type {?} */((_chromeNumKeyPadMap as any)))[key];\n        }\n      }\n    }\n\n    return _keyMap[key] || key;\n  }\n/**\n * @param {?} doc\n * @param {?} target\n * @return {?}\n */\ngetGlobalEventTarget(doc: Document, target: string): EventTarget|null {\n    if (target === 'window') {\n      return window;\n    }\n    if (target === 'document') {\n      return document;\n    }\n    if (target === 'body') {\n      return document.body;\n    }\n    return null;\n  }\n/**\n * @return {?}\n */\ngetHistory(): History { return window.history; }\n/**\n * @return {?}\n */\ngetLocation(): Location { return window.location; }\n/**\n * @param {?} doc\n * @return {?}\n */\ngetBaseHref(doc: Document): string|null {\n    const /** @type {?} */ href = getBaseElementHref();\n    return href == null ? null : relativePath(href);\n  }\n/**\n * @return {?}\n */\nresetBaseElement(): void { baseElement = null; }\n/**\n * @return {?}\n */\ngetUserAgent(): string { return window.navigator.userAgent; }\n/**\n * @param {?} element\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetData(element: Element, name: string, value: string) {\n    this.setAttribute(element, 'data-' + name, value);\n  }\n/**\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\ngetData(element: Element, name: string): string|null {\n    return this.getAttribute(element, 'data-' + name);\n  }\n/**\n * @param {?} element\n * @return {?}\n */\ngetComputedStyle(element: any): any { return getComputedStyle(element); }\n/**\n * @param {?} path\n * @param {?} value\n * @return {?}\n */\nsetGlobalVar(path: string, value: any) { setValueOnPath(global, path, value); }\n/**\n * @return {?}\n */\nsupportsWebAnimation(): boolean {\n    return typeof( /** @type {?} */((<any>Element))).prototype['animate'] === 'function';\n  }\n/**\n * @return {?}\n */\nperformanceNow(): number {\n    // performance.now() is not available in all browsers, see\n    // http://caniuse.com/#search=performance.now\n    return window.performance && window.performance.now ? window.performance.now() :\n                                                          new Date().getTime();\n  }\n/**\n * @return {?}\n */\nsupportsCookies(): boolean { return true; }\n/**\n * @param {?} name\n * @return {?}\n */\ngetCookie(name: string): string|null { return parseCookieValue(document.cookie, name); }\n/**\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetCookie(name: string, value: string) {\n    // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does\n    // not clear other cookies.\n    document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);\n  }\n}\n\nlet /** @type {?} */ baseElement: HTMLElement|null = null;\n/**\n * @return {?}\n */\nfunction getBaseElementHref(): string|null {\n  if (!baseElement) {\n    baseElement = /** @type {?} */(( document.querySelector('base')));\n    if (!baseElement) {\n      return null;\n    }\n  }\n  return baseElement.getAttribute('href');\n}\n\n// based on urlUtils.js in AngularJS 1\nlet /** @type {?} */ urlParsingNode: any;\n/**\n * @param {?} url\n * @return {?}\n */\nfunction relativePath(url: any): string {\n  if (!urlParsingNode) {\n    urlParsingNode = document.createElement('a');\n  }\n  urlParsingNode.setAttribute('href', url);\n  return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :\n                                                       '/' + urlParsingNode.pathname;\n}\n/**\n * @param {?} cookieStr\n * @param {?} name\n * @return {?}\n */\nexport function parseCookieValue(cookieStr: string, name: string): string|null {\n  name = encodeURIComponent(name);\n  for (const /** @type {?} */ cookie of cookieStr.split(';')) {\n    const /** @type {?} */ eqIndex = cookie.indexOf('=');\n    const [cookieName, cookieValue]: string[] =\n        eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)];\n    if (cookieName.trim() === name) {\n      return decodeURIComponent(cookieValue);\n    }\n  }\n  return null;\n}\n/**\n * @param {?} global\n * @param {?} path\n * @param {?} value\n * @return {?}\n */\nexport function setValueOnPath(global: any, path: string, value: any) {\n  const /** @type {?} */ parts = path.split('.');\n  let /** @type {?} */ obj: any = global;\n  while (parts.length > 1) {\n    const /** @type {?} */ name = /** @type {?} */(( parts.shift()));\n    if (obj.hasOwnProperty(name) && obj[name] != null) {\n      obj = obj[name];\n    } else {\n      obj = obj[name] = {};\n    }\n  }\n  if (obj === undefined || obj === null) {\n    obj = {};\n  }\n  obj[ /** @type {?} */((parts.shift()))] = value;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Type} from '@angular/core';\n\nlet /** @type {?} */ _DOM: DomAdapter = /** @type {?} */(( null));\n/**\n * @return {?}\n */\nexport function getDOM() {\n  return _DOM;\n}\n/**\n * @param {?} adapter\n * @return {?}\n */\nexport function setDOM(adapter: DomAdapter) {\n  _DOM = adapter;\n}\n/**\n * @param {?} adapter\n * @return {?}\n */\nexport function setRootDomAdapter(adapter: DomAdapter) {\n  if (!_DOM) {\n    _DOM = adapter;\n  }\n}\n/**\n * Provides DOM operations in an environment-agnostic way.\n * \n * \\@security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n * @abstract\n */\nexport abstract class DomAdapter {\npublic resourceLoaderType: Type<any> = /** @type {?} */(( null));\n/**\n * @abstract\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\nhasProperty(element: any, name: string) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetProperty(el: Element, name: string, value: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} name\n * @return {?}\n */\ngetProperty(el: Element, name: string) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} methodName\n * @param {?} args\n * @return {?}\n */\ninvoke(el: Element, methodName: string, args: any[]) {}\n/**\n * @abstract\n * @param {?} error\n * @return {?}\n */\nlogError(error: any) {}\n/**\n * @abstract\n * @param {?} error\n * @return {?}\n */\nlog(error: any) {}\n/**\n * @abstract\n * @param {?} error\n * @return {?}\n */\nlogGroup(error: any) {}\n/**\n * @abstract\n * @return {?}\n */\nlogGroupEnd() {}\n/**\n * Maps attribute names to their corresponding property names for cases\n * where attribute name doesn't match property name.\n * @return {?}\n */\nget attrToPropMap(): {[key: string]: string} { return this._attrToPropMap; };\n/**\n * @param {?} value\n * @return {?}\n */\nset attrToPropMap(value: {[key: string]: string}) { this._attrToPropMap = value; };\n/**\n * \\@internal\n */\n_attrToPropMap: {[key: string]: string};\n/**\n * @abstract\n * @param {?} nodeA\n * @param {?} nodeB\n * @return {?}\n */\ncontains(nodeA: any, nodeB: any) {}\n/**\n * @abstract\n * @param {?} templateHtml\n * @return {?}\n */\nparse(templateHtml: string) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} selector\n * @return {?}\n */\nquerySelector(el: any, selector: string) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} selector\n * @return {?}\n */\nquerySelectorAll(el: any, selector: string) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} evt\n * @param {?} listener\n * @return {?}\n */\non(el: any, evt: any, listener: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} evt\n * @param {?} listener\n * @return {?}\n */\nonAndCancel(el: any, evt: any, listener: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} evt\n * @return {?}\n */\ndispatchEvent(el: any, evt: any) {}\n/**\n * @abstract\n * @param {?} eventType\n * @return {?}\n */\ncreateMouseEvent(eventType: any) {}\n/**\n * @abstract\n * @param {?} eventType\n * @return {?}\n */\ncreateEvent(eventType: string) {}\n/**\n * @abstract\n * @param {?} evt\n * @return {?}\n */\npreventDefault(evt: any) {}\n/**\n * @abstract\n * @param {?} evt\n * @return {?}\n */\nisPrevented(evt: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetInnerHTML(el: any) {}\n/**\n * Returns content if el is a <template> element, null otherwise.\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetTemplateContent(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetOuterHTML(el: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nnodeName(node: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nnodeValue(node: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\ntype(node: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\ncontent(node: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\nfirstChild(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\nnextSibling(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\nparentElement(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\nchildNodes(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\nchildNodesAsList(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\nclearNodes(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} node\n * @return {?}\n */\nappendChild(el: any, node: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} node\n * @return {?}\n */\nremoveChild(el: any, node: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} newNode\n * @param {?} oldNode\n * @return {?}\n */\nreplaceChild(el: any, newNode: any, oldNode: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\nremove(el: any) {}\n/**\n * @abstract\n * @param {?} parent\n * @param {?} ref\n * @param {?} node\n * @return {?}\n */\ninsertBefore(parent: any, ref: any, node: any) {}\n/**\n * @abstract\n * @param {?} parent\n * @param {?} ref\n * @param {?} nodes\n * @return {?}\n */\ninsertAllBefore(parent: any, ref: any, nodes: any) {}\n/**\n * @abstract\n * @param {?} parent\n * @param {?} el\n * @param {?} node\n * @return {?}\n */\ninsertAfter(parent: any, el: any, node: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} value\n * @return {?}\n */\nsetInnerHTML(el: any, value: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetText(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} value\n * @return {?}\n */\nsetText(el: any, value: string) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetValue(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} value\n * @return {?}\n */\nsetValue(el: any, value: string) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetChecked(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @param {?} value\n * @return {?}\n */\nsetChecked(el: any, value: boolean) {}\n/**\n * @abstract\n * @param {?} text\n * @return {?}\n */\ncreateComment(text: string) {}\n/**\n * @abstract\n * @param {?} html\n * @return {?}\n */\ncreateTemplate(html: any) {}\n/**\n * @abstract\n * @param {?} tagName\n * @param {?=} doc\n * @return {?}\n */\ncreateElement(tagName: any, doc?: any) {}\n/**\n * @abstract\n * @param {?} ns\n * @param {?} tagName\n * @param {?=} doc\n * @return {?}\n */\ncreateElementNS(ns: string, tagName: string, doc?: any) {}\n/**\n * @abstract\n * @param {?} text\n * @param {?=} doc\n * @return {?}\n */\ncreateTextNode(text: string, doc?: any) {}\n/**\n * @abstract\n * @param {?} attrName\n * @param {?} attrValue\n * @param {?=} doc\n * @return {?}\n */\ncreateScriptTag(attrName: string, attrValue: string, doc?: any) {}\n/**\n * @abstract\n * @param {?} css\n * @param {?=} doc\n * @return {?}\n */\ncreateStyleElement(css: string, doc?: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ncreateShadowRoot(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetShadowRoot(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetHost(el: any) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetDistributedNodes(el: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nclone /*<T extends Node>*/ (node: Node) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\ngetElementsByClassName(element: any, name: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\ngetElementsByTagName(element: any, name: string) {}\n/**\n * @abstract\n * @param {?} element\n * @return {?}\n */\nclassList(element: any) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} className\n * @return {?}\n */\naddClass(element: any, className: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} className\n * @return {?}\n */\nremoveClass(element: any, className: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} className\n * @return {?}\n */\nhasClass(element: any, className: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} styleName\n * @param {?} styleValue\n * @return {?}\n */\nsetStyle(element: any, styleName: string, styleValue: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} styleName\n * @return {?}\n */\nremoveStyle(element: any, styleName: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} styleName\n * @return {?}\n */\ngetStyle(element: any, styleName: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} styleName\n * @param {?=} styleValue\n * @return {?}\n */\nhasStyle(element: any, styleName: string, styleValue?: string) {}\n/**\n * @abstract\n * @param {?} element\n * @return {?}\n */\ntagName(element: any) {}\n/**\n * @abstract\n * @param {?} element\n * @return {?}\n */\nattributeMap(element: any) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} attribute\n * @return {?}\n */\nhasAttribute(element: any, attribute: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} ns\n * @param {?} attribute\n * @return {?}\n */\nhasAttributeNS(element: any, ns: string, attribute: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} attribute\n * @return {?}\n */\ngetAttribute(element: any, attribute: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} ns\n * @param {?} attribute\n * @return {?}\n */\ngetAttributeNS(element: any, ns: string, attribute: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetAttribute(element: any, name: string, value: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} ns\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetAttributeNS(element: any, ns: string, name: string, value: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} attribute\n * @return {?}\n */\nremoveAttribute(element: any, attribute: string) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} ns\n * @param {?} attribute\n * @return {?}\n */\nremoveAttributeNS(element: any, ns: string, attribute: string) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ntemplateAwareRoot(el: any) {}\n/**\n * @abstract\n * @return {?}\n */\ncreateHtmlDocument() {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\ngetBoundingClientRect(el: any) {}\n/**\n * @abstract\n * @param {?} doc\n * @return {?}\n */\ngetTitle(doc: Document) {}\n/**\n * @abstract\n * @param {?} doc\n * @param {?} newTitle\n * @return {?}\n */\nsetTitle(doc: Document, newTitle: string) {}\n/**\n * @abstract\n * @param {?} n\n * @param {?} selector\n * @return {?}\n */\nelementMatches(n: any, selector: string) {}\n/**\n * @abstract\n * @param {?} el\n * @return {?}\n */\nisTemplateElement(el: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nisTextNode(node: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nisCommentNode(node: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nisElementNode(node: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nhasShadowRoot(node: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nisShadowRoot(node: any) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nimportIntoDoc /*<T extends Node>*/ (node: Node) {}\n/**\n * @abstract\n * @param {?} node\n * @return {?}\n */\nadoptNode /*<T extends Node>*/ (node: Node) {}\n/**\n * @abstract\n * @param {?} element\n * @return {?}\n */\ngetHref(element: any) {}\n/**\n * @abstract\n * @param {?} event\n * @return {?}\n */\ngetEventKey(event: any) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} baseUrl\n * @param {?} href\n * @return {?}\n */\nresolveAndSetHref(element: any, baseUrl: string, href: string) {}\n/**\n * @abstract\n * @return {?}\n */\nsupportsDOMEvents() {}\n/**\n * @abstract\n * @return {?}\n */\nsupportsNativeShadowDOM() {}\n/**\n * @abstract\n * @param {?} doc\n * @param {?} target\n * @return {?}\n */\ngetGlobalEventTarget(doc: Document, target: string) {}\n/**\n * @abstract\n * @return {?}\n */\ngetHistory() {}\n/**\n * @abstract\n * @return {?}\n */\ngetLocation() {}\n/**\n * @abstract\n * @param {?} doc\n * @return {?}\n */\ngetBaseHref(doc: Document) {}\n/**\n * @abstract\n * @return {?}\n */\nresetBaseElement() {}\n/**\n * @abstract\n * @return {?}\n */\ngetUserAgent() {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetData(element: any, name: string, value: string) {}\n/**\n * @abstract\n * @param {?} element\n * @return {?}\n */\ngetComputedStyle(element: any) {}\n/**\n * @abstract\n * @param {?} element\n * @param {?} name\n * @return {?}\n */\ngetData(element: any, name: string) {}\n/**\n * @abstract\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetGlobalVar(name: string, value: any) {}\n/**\n * @abstract\n * @return {?}\n */\nsupportsWebAnimation() {}\n/**\n * @abstract\n * @return {?}\n */\nperformanceNow() {}\n/**\n * @abstract\n * @return {?}\n */\ngetAnimationPrefix() {}\n/**\n * @abstract\n * @return {?}\n */\ngetTransitionEnd() {}\n/**\n * @abstract\n * @return {?}\n */\nsupportsAnimation() {}\n/**\n * @abstract\n * @return {?}\n */\nsupportsCookies() {}\n/**\n * @abstract\n * @param {?} name\n * @return {?}\n */\ngetCookie(name: string) {}\n/**\n * @abstract\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetCookie(name: string, value: string) {}\n}\n\nfunction DomAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nDomAdapter.prototype.resourceLoaderType;\n/**\n * \\@internal\n * @type {?}\n */\nDomAdapter.prototype._attrToPropMap;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {DomAdapter} from '../dom/dom_adapter';\n/**\n * Provides DOM operations in any browser environment.\n * \n * \\@security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n * @abstract\n */\nexport abstract class GenericBrowserDomAdapter extends DomAdapter {\nprivate _animationPrefix: string|null = null;\nprivate _transitionEnd: string|null = null;\nconstructor() {\n    super();\n    try {\n      const element = this.createElement('div', document);\n      if (this.getStyle(element, 'animationName') != null) {\n        this._animationPrefix = '';\n      } else {\n        const domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];\n\n        for (let i = 0; i < domPrefixes.length; i++) {\n          if (this.getStyle(element, domPrefixes[i] + 'AnimationName') != null) {\n            this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';\n            break;\n          }\n        }\n      }\n\n      const transEndEventNames: {[key: string]: string} = {\n        WebkitTransition: 'webkitTransitionEnd',\n        MozTransition: 'transitionend',\n        OTransition: 'oTransitionEnd otransitionend',\n        transition: 'transitionend'\n      };\n\n      Object.keys(transEndEventNames).forEach((key: string) => {\n        if (this.getStyle(element, key) != null) {\n          this._transitionEnd = transEndEventNames[key];\n        }\n      });\n    } catch (e) {\n      this._animationPrefix = null;\n      this._transitionEnd = null;\n    }\n  }\n/**\n * @param {?} el\n * @return {?}\n */\ngetDistributedNodes(el: HTMLElement): Node[] { return ( /** @type {?} */((<any>el))).getDistributedNodes(); }\n/**\n * @param {?} el\n * @param {?} baseUrl\n * @param {?} href\n * @return {?}\n */\nresolveAndSetHref(el: HTMLAnchorElement, baseUrl: string, href: string) {\n    el.href = href == null ? baseUrl : baseUrl + '/../' + href;\n  }\n/**\n * @return {?}\n */\nsupportsDOMEvents(): boolean { return true; }\n/**\n * @return {?}\n */\nsupportsNativeShadowDOM(): boolean {\n    return typeof( /** @type {?} */((<any>document.body))).createShadowRoot === 'function';\n  }\n/**\n * @return {?}\n */\ngetAnimationPrefix(): string { return this._animationPrefix ? this._animationPrefix : ''; }\n/**\n * @return {?}\n */\ngetTransitionEnd(): string { return this._transitionEnd ? this._transitionEnd : ''; }\n/**\n * @return {?}\n */\nsupportsAnimation(): boolean {\n    return this._animationPrefix != null && this._transitionEnd != null;\n  }\n}\n\nfunction GenericBrowserDomAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nGenericBrowserDomAdapter.prototype._animationPrefix;\n/** @type {?} */\nGenericBrowserDomAdapter.prototype._transitionEnd;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {LocationChangeListener, PlatformLocation} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\n\nimport {getDOM} from '../../dom/dom_adapter';\nimport {DOCUMENT} from '../../dom/dom_tokens';\n\nimport {supportsState} from './history';\n/**\n * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\n * This class should not be used directly by an application developer. Instead, use\n * {\\@link Location}.\n */\nexport class BrowserPlatformLocation extends PlatformLocation {\nprivate _location: Location;\nprivate _history: History;\n/**\n * @param {?} _doc\n */\nconstructor(\nprivate _doc: any) {\n    super();\n    this._init();\n  }\n/**\n * \\@internal\n * @return {?}\n */\n_init() {\n    this._location = getDOM().getLocation();\n    this._history = getDOM().getHistory();\n  }\n/**\n * @return {?}\n */\nget location(): Location { return this._location; }\n/**\n * @return {?}\n */\ngetBaseHrefFromDOM(): string { return /** @type {?} */(( getDOM().getBaseHref(this._doc))); }\n/**\n * @param {?} fn\n * @return {?}\n */\nonPopState(fn: LocationChangeListener): void {\n    getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nonHashChange(fn: LocationChangeListener): void {\n    getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);\n  }\n/**\n * @return {?}\n */\nget pathname(): string { return this._location.pathname; }\n/**\n * @return {?}\n */\nget search(): string { return this._location.search; }\n/**\n * @return {?}\n */\nget hash(): string { return this._location.hash; }\n/**\n * @param {?} newPath\n * @return {?}\n */\nset pathname(newPath: string) { this._location.pathname = newPath; }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @return {?}\n */\npushState(state: any, title: string, url: string): void {\n    if (supportsState()) {\n      this._history.pushState(state, title, url);\n    } else {\n      this._location.hash = url;\n    }\n  }\n/**\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @return {?}\n */\nreplaceState(state: any, title: string, url: string): void {\n    if (supportsState()) {\n      this._history.replaceState(state, title, url);\n    } else {\n      this._location.hash = url;\n    }\n  }\n/**\n * @return {?}\n */\nforward(): void { this._history.forward(); }\n/**\n * @return {?}\n */\nback(): void { this._history.back(); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\n}\n\nfunction BrowserPlatformLocation_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserPlatformLocation.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserPlatformLocation.ctorParameters;\n/** @type {?} */\nBrowserPlatformLocation.prototype._location;\n/** @type {?} */\nBrowserPlatformLocation.prototype._history;\n/** @type {?} */\nBrowserPlatformLocation.prototype._doc;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {isDevMode} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\n\nimport {sanitizeUrl} from './url_sanitizer';\n\n\n/**\n * Regular expression for safe style values.\n *\n * Quotes (\" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.\n *\n * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or\n * font-family) and hence could allow multiple values to get injected, but that should pose no risk\n * of XSS.\n *\n * The function expression checks only for XSS safety, not for CSS validity.\n *\n * This regular expression was taken from the Closure sanitization library, and augmented for\n * transformation values.\n */\nconst /** @type {?} */ VALUES = '[-,.\"\\'%_!# a-zA-Z0-9]+';\nconst /** @type {?} */ TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';\nconst /** @type {?} */ COLOR_FNS = '(?:rgb|hsl)a?';\nconst /** @type {?} */ GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';\nconst /** @type {?} */ CSS3_FNS = '(?:calc|attr)';\nconst /** @type {?} */ FN_ARGS = '\\\\([-0-9.%, #a-zA-Z]+\\\\)';\nconst /** @type {?} */ SAFE_STYLE_VALUE = new RegExp(\n    `^(${VALUES}|` +\n        `(?:${TRANSFORMATION_FNS}|${COLOR_FNS}|${GRADIENTS}|${CSS3_FNS})` +\n        `${FN_ARGS})$`,\n    'g');\n\n/**\n * Matches a `url(...)` value with an arbitrary argument as long as it does\n * not contain parentheses.\n *\n * The URL value still needs to be sanitized separately.\n *\n * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted\n * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.\n * by observing whether scroll bars are displayed, or character ranges used by a font face\n * definition.\n *\n * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that\n * binding a URL value without further cooperation from the page will cause an information leak, and\n * if so, it is just a leak, not a full blown XSS vulnerability.\n *\n * Given the common use case, low likelihood of attack vector, and low impact of an attack, this\n * code is permissive and allows URLs that sanitize otherwise.\n */\nconst /** @type {?} */ URL_RE = /^url\\(([^)]+)\\)$/;\n/**\n * Checks that quotes (\" and ') are properly balanced inside a string. Assumes\n * that neither escape (\\) nor any other character that could result in\n * breaking out of a string parsing context are allowed;\n * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.\n * \n * This code was taken from the Closure sanitization library.\n * @param {?} value\n * @return {?}\n */\nfunction hasBalancedQuotes(value: string) {\n  let /** @type {?} */ outsideSingle = true;\n  let /** @type {?} */ outsideDouble = true;\n  for (let /** @type {?} */ i = 0; i < value.length; i++) {\n    const /** @type {?} */ c = value.charAt(i);\n    if (c === '\\'' && outsideDouble) {\n      outsideSingle = !outsideSingle;\n    } else if (c === '\"' && outsideSingle) {\n      outsideDouble = !outsideDouble;\n    }\n  }\n  return outsideSingle && outsideDouble;\n}\n/**\n * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single\n * value) and returns a value that is safe to use in a browser environment.\n * @param {?} value\n * @return {?}\n */\nexport function sanitizeStyle(value: string): string {\n  value = String(value).trim();  // Make sure it's actually a string.\n  if (!value) return '';\n\n  // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for\n  // reasoning behind this.\n  const /** @type {?} */ urlMatch = value.match(URL_RE);\n  if ((urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||\n      value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {\n    return value;  // Safe style values.\n  }\n\n  if (isDevMode()) {\n    getDOM().log(\n        `WARNING: sanitizing unsafe style value ${value} (see http://g.co/ng/security#xss).`);\n  }\n\n  return 'unsafe';\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {InjectionToken} from '@angular/core';\n/**\n * A DI Token representing the main rendering context. In a browser this is the DOM Document.\n * \n * Note: Document might not be available in the Application Context when Application and Rendering\n * Contexts are not the same (e.g. when running the application into a Web Worker).\n * \n * \\@stable\n */\nexport const DOCUMENT = new InjectionToken<Document>('DocumentToken');\n"],"names":["Observable_1","require","of_1","Observable","of","LocalStorageService","this","prefix","prototype","set","key","value","toStorageItem","localStorage","setItem","JSON","stringify","get","getItem","parse","remove","removeItem","decorators","type","Injectable","ctorParameters","AuthService","http","setAccessToken","accessToken","cachedAccessToken","getAccessToken","setUser","user","getUser","isLoggedIn","logout","Http","AppConfig","setInitialConfig","config","initialConfig","Object","defineProperty","APIService","authService","apiURL","clientId","clientSecret","path","query","options","getUrlParams","getRequestOptions","map","extractData","catch","handleError","put","data","post","delete","headers","Headers","Content-Type","requestOptions","RequestOptions","undefined","credentials","append","urlParams","params","keys","_i","keys_1","length","push","encodeURIComponent","join","res","json","error","errMsg","Response","body","err","status","statusText","message","toString","throw","CRUDService","_super","resourceName","_this","call","localResourceIdName","__extends","list","limit","fields","sort","read","resourceId","save","resource","resourceIdName","UsersService","localOnUserLogsIn","Subject","asObservable","login","username","password","loginResponse","access_token","next","LizardSDKModule","forRoot","ngModule","providers","forChild","NgModule","args","declarations","exports","Request","url","paramsArg","search","URLSearchParams","urlEncodeParams","indexOf","_body","method","normalizeMethodName","detectContentType","ContentType","FORM","FORM_DATA","TEXT","detectContentTypeFromBody","NONE","FormData","Blob$1","BLOB","ArrayBuffer$1","ARRAY_BUFFER","getBody","contentType","text","blob","arrayBuffer","Body","w","window","noop","request","responseObservable","httpRequest","_backend","mergeOptions","_defaultOptions","RequestMethod","Get","Options","Jsonp","Error","HttpModule","provide","useFactory","httpFactory","deps","XHRBackend","BrowserXhr","useClass","BaseRequestOptions","ResponseOptions","BaseResponseOptions","JsonpModule","jsonpFactory","JSONPBackend","BrowserJsonp","_a","_b","withCredentials","responseType","merge","_mergeSearchParams","clone","_parseParams","objParams","forEach","Array","isArray","item","_appendParam","XHRConnection","req","browserXHR","baseResponseOptions","response","responseObserver","_xhr","open","toUpperCase","onLoad","responseText","fromResponseHeaderString","getAllResponseHeaders","getResponseURL","responseOptions","ok","isSuccess","onError","ResponseType","setDetectedContentType","has","values","name","setRequestHeader","ResponseContentType","ArrayBuffer","Json","Text","Blob","addEventListener","send","removeEventListener","CookieXSRFStrategy","configureRequest","xsrfToken","ɵgetDOM","getCookie","_cookieName","createConnection","_xsrfStrategy","_browserXHR","_baseResponseOptions","JSONPConnection_","_dom","_finished","TypeError","JSONP_ERR_WRONG_METHOD","readyState","ReadyState","Loading","id","_id","nextRequestID","exposeConnection","callback","requestCallback","replace","lastIndexOf","substring","script","_script","build","event","Cancelled","Done","cleanup","responseOptions_1","JSONP_ERR_NO_CALLBACK","_responseData","complete","finished","removeConnection","JSONPBackend_","_browserJSONP","QueryEncoder","encodeKey","k","standardEncoding","paramsMap","paramParser","rawParams","param","val","setAll","searchParams","appendAll","i","replaceAll","paramsList","encodingHint","String","fromCharCode","apply","Uint16Array","Uint8Array","JSONP_HOME","_jsonpConnections","node","_nextRequestId","document","appendChild","parentNode","removeChild","Post","Put","Delete","Head","Patch","Unsent","Open","HeadersReceived","Basic","Cors","Default","Opaque","_headers","Map","_normalizedNames","headersString","split","line","index","slice","trim","getAll","toLowerCase","from","toJSON","serialized","entries","mayBeSetNormalizedName","lcName","DATA_URL_PATTERN","DOM","VOID_ELEMENTS","tagSet","OPTIONAL_END_TAG_BLOCK_ELEMENTS","OPTIONAL_END_TAG_INLINE_ELEMENTS","BLOCK_ELEMENTS","INLINE_ELEMENTS","VALID_ELEMENTS","OPTIONAL_END_TAG_ELEMENTS","URI_ATTRS","SRCSET_ATTRS","VALID_ATTRS","HTML_ATTRS","SanitizingHtmlSerializer","sanitizeChildren","el","current","isElementNode","startElement","isTextNode","chars","nodeValue","sanitizedSomething","firstChild","endElement","checkClobberedElement","nextSibling","element","tagName","nodeName","hasOwnProperty","buf","attributeMap","attrName","lower","sanitizeUrl","sanitizeSrcset","DomSanitizer","DomSanitizerImpl","sanitize","ctx","SecurityContext","HTML","SafeHtmlImpl","changingThisBreaksApplicationSecurity","checkNotSafeValue","sanitizeHtml","_doc","STYLE","SafeStyleImpl","sanitizeStyle","SCRIPT","SafeScriptImpl","URL","SafeResourceUrlImpl","SafeUrlImpl","RESOURCE_URL","expectedType","bypassSecurityTrustHtml","bypassSecurityTrustStyle","bypassSecurityTrustScript","bypassSecurityTrustUrl","bypassSecurityTrustResourceUrl","Inject","DOCUMENT","SafeValueImpl","getTypeName","INTERNAL_BROWSER_PLATFORM_PROVIDERS","BrowserModule","createPlatformFactory","platformCore","withServerTransition","APP_ID","useValue","appId","SERVER_TRANSITION_PROVIDERS","BROWSER_SANITIZATION_PROVIDERS","ErrorHandler","errorHandler","EVENT_MANAGER_PLUGINS","DomEventsPlugin","multi","KeyEventsPlugin","HammerGesturesPlugin","HAMMER_GESTURE_CONFIG","HammerGestureConfig","DomRendererFactory2","RendererFactory2","useExisting","SharedStylesHost","DomSharedStylesHost","Testability","EventManager","ELEMENT_PROBE_PROVIDERS","Meta","MODIFIER_KEYS","MODIFIER_KEY_GETTERS","shift","shiftKey","doc","eventName","handler","parsedEvent","parseEventName","parts","domEventName","_normalizeKey","pop","fullKey","modifierName","splice","getEventFullKey","getDOM","getEventKey","modifierGetter","eventCallback","zone","keyName","EVENT_NAMES","pan","panstart","panmove","panend","panleft","panright","panup","pandown","pinch","pinchstart","pinchend","pinchcancel","pinchout","press","pressup","rotatestart","rotatemove","rotateend","rotatecancel","swipeleft","swiperight","InjectionToken","buildHammer","mc","Hammer","enable","overrides","supports","isCustomEvent","manager","getZone","runOutsideAngular","_config","eventObj","runGuarded","EventManagerPlugin","NAMESPACE_URIS","svg","xhtml","xlink","xml","xmlns","CONTENT_ATTR","eventManager","sharedStylesHost","createRenderer","defaultRenderer","encapsulation","ViewEncapsulation","Emulated","renderer","rendererByCompId","EmulatedEncapsulationDomRenderer2","applyToHost","Native","ShadowDomRenderer","styles","flattenStyles","addStyles","DefaultDomRenderer2","create","createElement","namespace","createComment","selectRootElement","selectorOrNode","querySelector","setAttribute","namespaceUri","setAttributeNS","removeAttribute","removeAttributeNS","setStyle","style","flags","RendererStyleFlags2","DashCase","setProperty","Important","removeProperty","listen","target","checkNoSyntheticProp","addGlobalEventListener","decoratePreventDefault","component","parent","hostEl","shadowRoot","createShadowRoot","addHost","p","s","t","CORE_TOKENS","NgProbeToken$1","token","APP_INITIALIZER","_createNgProbe","Optional","plugins","_zone","_findPluginFor","plugin","_eventNameToPlugin","_plugins","plugin_1","NgZone","getGlobalEventTarget","additions","Set","_stylesSet","add","_addStylesToHost","host","removeHost","hostNode","_hostNodes","TRANSITION_ID","BrowserGetTestability","init","setTestabilityGetter","addToWindow","registry","ɵglobal","elem","findInAncestors","testability","findTestabilityInTree","global","getAllTestabilities","getAllRootElements","whenAllStable","testabilities","count","didWork","decrement","didWork_","whenStable","getTestability","isShadowRoot","Title","addTags","tags","forceCreation","reduce","result","tag","getTags","attrSelector","updateTag","selector","_parseSelector","meta","getTag","removeTag","removeTagElement","_containsAttributes","every","getAttribute","catch_1","_catch","nodeContains","_DOM","DomAdapter","logGroup","templateAwareRoot","resolveAndSetHref","baseUrl","href","supportsDOMEvents","getHistory","getBaseHref","resetBaseElement","setGlobalVar","supportsWebAnimation","performanceNow","getAnimationPrefix","getTransitionEnd","supportsAnimation","GenericBrowserDomAdapter","_animationPrefix","_transitionEnd","element_1","getStyle","domPrefixes","transEndEventNames_1","WebkitTransition","MozTransition","OTransition","transition","_attrToPropMap","class","readonly","_keyMap","\b","\t","","\u001b","Del","Esc","Left","Right","Up","Win","_chromeNumKeyPadMap","A","B","C","D","E","F","G","H","I","J","K","M","N","`","","urlParsingNode","BrowserDomAdapter","invoke","methodName","logError","console","onAndCancel","evt","listener","dispatchEvent","getInnerHTML","innerHTML","getOuterHTML","outerHTML","content","hasProperty","parentElement","childNodes","childNodesAsList","replaceChild","newChild","oldChild","setInnerHTML","setText","textContent","setValue","setChecked","checked","getShadowRoot","getHost","elAttrs","attributes","isTemplateElement","getBoundingClientRect","elementMatches","n","HTMLElement","matches","nodeType","Node","TEXT_NODE","isCommentNode","COMMENT_NODE","ELEMENT_NODE","DocumentFragment","importIntoDoc","importNode","adoptNode","getHref","keyIdentifier","parseInt","location","getLocation","relativePath","setValueOnPath","Date","getTime","supportsCookies","setCookie","baseElement","BrowserPlatformLocation","_history","getBaseHrefFromDOM","fn","_location","hash","pushState","state","title","supportsState","replaceState","PlatformLocation","defaultOpts","providedOpts","newOptions","eqIdx","v","_getJsonpConnections","xhr","responseURL","stringToArrayBuffer","input","view","charCodeAt","bootstrapListenerFactory","transitionId","dom","querySelectorAll","filter","extraTokens","coreTokens","tokens","prev","compId","COMPONENT_REGEX","eventHandler","preventDefault","nameKind","match","SAFE_URL_PATTERN","srcset","getInertElement","inertElement","templateEl","createHtmlDocument","html","sets","arguments","sets_1","nextNode","encodeEntities","SURROGATE_PAIR_REGEXP","stripCustomNsAttrs","_","containerEl","unsafeHtml","unsafeHtmlInput","mXSSAttempts","parsedHtml","defaultDoc","documentMode","sanitizer","safeHtml","getTemplateContent","child","isDevMode","e","hasBalancedQuotes","outsideSingle","outsideDouble","c","charAt","urlMatch","URL_RE","SAFE_STYLE_VALUE","log","getBaseElementHref","parseCookieValue","cookieStr","cookie","eqIndex","cookieName","cookieValue","obj"],"mappings":"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"}