{"version":3,"file":"lizard-angular-sdk.es5.js","sources":["../../index.ts","../../public_api.ts","../../src/lizard-angular-sdk.ts","../../src/modules/lizard-sdk.module.ts","../../src/resources/services.service.ts","../../src/resources/geo-location.service.ts","../../src/resources/orders.service.ts","../../src/resources/companies.service.ts","../../src/resources/oauth2.service.ts","../../src/resources/users.service.ts","../../src/common/crud.service.ts","../../src/common/api.service.ts","../../src/common/app-config.service.ts","../../src/lizard-initial-config.ts","../../src/common/auth.service.ts","../../src/common/event-manager.service.ts","../../src/common/local-storage.service.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {LocalStorageService,AuthService,APIService,CRUDService,UsersService,Oauth2Service,CompaniesService,OrdersService,GeoLocationService,ServicesService,EventManagerService,AppConfigService,ILizardConfig,IListOptions,LizardSDKModule} from './public_api';\n\nexport {INITIAL_CONFIG as Éµa} from './src/lizard-initial-config';","/**\n * Entry point for all public APIs of the package.\n */\nexport {LocalStorageService,AuthService,APIService,CRUDService,UsersService,Oauth2Service,CompaniesService,OrdersService,GeoLocationService,ServicesService,EventManagerService,AppConfigService,ILizardConfig,IListOptions,LizardSDKModule} from './src/lizard-angular-sdk';\n","// Public classes.\nexport { LocalStorageService } from './common/local-storage.service';\nexport { AuthService } from './common/auth.service';\nexport { APIService } from './common/api.service';\nexport { CRUDService } from './common/crud.service';\n\nexport { UsersService } from './resources/users.service';\nexport { Oauth2Service } from './resources/oauth2.service';\nexport { CompaniesService } from './resources/companies.service';\nexport { OrdersService } from './resources/orders.service';\nexport { GeoLocationService } from './resources/geo-location.service';\nexport { ServicesService } from './resources/services.service';\n\nexport { EventManagerService } from './common/event-manager.service';\n\nexport { AppConfigService } from './common/app-config.service';\nexport { ILizardConfig } from './common/lizard-config.interface';\n\nexport { IListOptions } from './common/list-options.interface';\n\nexport { LizardSDKModule } from './modules/lizard-sdk.module';\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { LocalStorageService } from '../common/local-storage.service';\nimport { AuthService } from '../common/auth.service';\nimport { APIService } from '../common/api.service';\nimport { ILizardConfig } from '../common/lizard-config.interface';\nimport { AppConfigService } from '../common/app-config.service';\nimport { EventManagerService } from '../common/event-manager.service';\n\nimport { INITIAL_CONFIG } from '../lizard-initial-config';\n\nimport { UsersService } from '../resources/users.service';\nimport { Oauth2Service } from '../resources/oauth2.service';\nimport { CompaniesService } from '../resources/companies.service';\nimport { OrdersService } from '../resources/orders.service';\nimport { ServicesService } from '../resources/services.service';\nimport { GeoLocationService } from '../resources/geo-location.service';\nexport class LizardSDKModule {\n/**\n * @param {?} config\n * @return {?}\n */\npublic static forRoot(config: ILizardConfig): ModuleWithProviders {\n        return {\n            ngModule: LizardSDKModule,\n            providers: [\n                {\n                    provide: INITIAL_CONFIG,\n                    useValue: config\n                },\n                LocalStorageService,\n                AuthService,\n                APIService,\n                AppConfigService,\n                EventManagerService,\n\n                UsersService,\n                Oauth2Service,\n                CompaniesService,\n                OrdersService,\n                GeoLocationService,\n                ServicesService\n            ]\n        };\n    }\n/**\n * @return {?}\n */\npublic static forChild(): ModuleWithProviders {\n        return {\n            ngModule: LizardSDKModule,\n            providers: [\n                APIService,\n                AuthService,\n                APIService,\n                AppConfigService,\n                EventManagerService,\n\n                UsersService,\n                Oauth2Service,\n                CompaniesService,\n                OrdersService,\n                GeoLocationService,\n                ServicesService\n            ]\n        };\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    declarations: [\n        // Pipes.\n        // Directives.\n    ],\n    exports: [\n        // Pipes.\n        // Directives.\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LizardSDKModule_tsickle_Closure_declarations() {\n/** @type {?} */\nLizardSDKModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLizardSDKModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\n\nimport { AuthService } from '../common/auth.service';\nimport { CRUDService } from '../common/crud.service';\n\nimport { AppConfigService } from '../common/app-config.service';\nimport { EventManagerService } from '../common/event-manager.service';\nexport class ServicesService extends CRUDService {\n/**\n * @param {?} http\n * @param {?} authService\n * @param {?} appConfig\n * @param {?} eventsManagerService\n */\nconstructor(public http: Http,\npublic authService: AuthService,\npublic appConfig: AppConfigService,\npublic eventsManagerService: EventManagerService\n    ) {\n        super('services', http, authService, appConfig, eventsManagerService);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: AuthService, },\n{type: AppConfigService, },\n{type: EventManagerService, },\n];\n}\n\nfunction ServicesService_tsickle_Closure_declarations() {\n/** @type {?} */\nServicesService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nServicesService.ctorParameters;\n/** @type {?} */\nServicesService.prototype.http;\n/** @type {?} */\nServicesService.prototype.authService;\n/** @type {?} */\nServicesService.prototype.appConfig;\n/** @type {?} */\nServicesService.prototype.eventsManagerService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\n\nimport { AuthService } from '../common/auth.service';\nimport { APIService } from '../common/api.service';\n\nimport { AppConfigService } from '../common/app-config.service';\nimport { EventManagerService } from '../common/event-manager.service';\n\nimport { Observable } from 'rxjs/Observable';\nexport class GeoLocationService extends APIService {\n/**\n * @param {?} http\n * @param {?} authService\n * @param {?} appConfig\n * @param {?} eventsManagerService\n */\nconstructor(public http: Http,\npublic authService: AuthService,\npublic appConfig: AppConfigService,\npublic eventsManagerService: EventManagerService\n    ) {\n        super(http, authService, appConfig, eventsManagerService);\n    }\n/**\n * @param {?} lat\n * @param {?} lng\n * @return {?}\n */\ngetAddressFromLocation(lat: Number, lng: Number): Observable<any> {\n        return this.get('geolocation/address-from-location', { query: { lat, lng } });\n    }\n/**\n * @param {?} address\n * @return {?}\n */\ngetLocationFromAddress(address: string): Observable<any> {\n        return this.get('geolocation/location-from-address', { query: { address } });\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: AuthService, },\n{type: AppConfigService, },\n{type: EventManagerService, },\n];\n}\n\nfunction GeoLocationService_tsickle_Closure_declarations() {\n/** @type {?} */\nGeoLocationService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGeoLocationService.ctorParameters;\n/** @type {?} */\nGeoLocationService.prototype.http;\n/** @type {?} */\nGeoLocationService.prototype.authService;\n/** @type {?} */\nGeoLocationService.prototype.appConfig;\n/** @type {?} */\nGeoLocationService.prototype.eventsManagerService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\n\nimport { AuthService } from '../common/auth.service';\nimport { CRUDService } from '../common/crud.service';\n\nimport { AppConfigService } from '../common/app-config.service';\nimport { EventManagerService } from '../common/event-manager.service';\nexport class OrdersService extends CRUDService {\n/**\n * @param {?} http\n * @param {?} authService\n * @param {?} appConfig\n * @param {?} eventsManagerService\n */\nconstructor(public http: Http,\npublic authService: AuthService,\npublic appConfig: AppConfigService,\npublic eventsManagerService: EventManagerService\n    ) {\n        super('orders', http, authService, appConfig, eventsManagerService);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: AuthService, },\n{type: AppConfigService, },\n{type: EventManagerService, },\n];\n}\n\nfunction OrdersService_tsickle_Closure_declarations() {\n/** @type {?} */\nOrdersService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOrdersService.ctorParameters;\n/** @type {?} */\nOrdersService.prototype.http;\n/** @type {?} */\nOrdersService.prototype.authService;\n/** @type {?} */\nOrdersService.prototype.appConfig;\n/** @type {?} */\nOrdersService.prototype.eventsManagerService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\n\nimport { AuthService } from '../common/auth.service';\nimport { CRUDService } from '../common/crud.service';\n\nimport { AppConfigService } from '../common/app-config.service';\nimport { EventManagerService } from '../common/event-manager.service';\nexport class CompaniesService extends CRUDService {\n/**\n * @param {?} http\n * @param {?} authService\n * @param {?} appConfig\n * @param {?} eventsManagerService\n */\nconstructor(public http: Http,\npublic authService: AuthService,\npublic appConfig: AppConfigService,\npublic eventsManagerService: EventManagerService\n    ) {\n        super('companies', http, authService, appConfig, eventsManagerService);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: AuthService, },\n{type: AppConfigService, },\n{type: EventManagerService, },\n];\n}\n\nfunction CompaniesService_tsickle_Closure_declarations() {\n/** @type {?} */\nCompaniesService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCompaniesService.ctorParameters;\n/** @type {?} */\nCompaniesService.prototype.http;\n/** @type {?} */\nCompaniesService.prototype.authService;\n/** @type {?} */\nCompaniesService.prototype.appConfig;\n/** @type {?} */\nCompaniesService.prototype.eventsManagerService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/of';\n\nimport { Subject } from 'rxjs/Subject';\n\nimport { AuthService } from '../common/auth.service';\nimport { CRUDService } from '../common/crud.service';\n\nimport { AppConfigService } from '../common/app-config.service';\nimport { EventManagerService } from '../common/event-manager.service';\nexport class Oauth2Service extends CRUDService {\n/**\n * @param {?} http\n * @param {?} authService\n * @param {?} appConfig\n * @param {?} eventsManagerService\n */\nconstructor(\npublic http: Http,\npublic authService: AuthService,\npublic appConfig: AppConfigService,\npublic eventsManagerService: EventManagerService\n    ) {\n        super('oauth2', http, authService, appConfig, eventsManagerService);\n    }\n/**\n * @param {?} username\n * @param {?} password\n * @return {?}\n */\npublic login(username: string, password: string): Observable<any> {\n        return this.post(this.resource + '/token', {\n            password,\n            username,\n            grant_type: 'password'\n        }, null, { credentials: 'app' })\n            .map((loginResponse) => {\n                if (loginResponse && loginResponse.access_token) {\n                    const /** @type {?} */ accessToken = loginResponse.access_token;\n                    this.authService.setAccessToken(accessToken);\n                    this.authService.setUser(loginResponse.data.identity);\n\n                    this.eventsManagerService.trigger(EventManagerService.ON_USER_SIGN_IN);\n                }\n\n                return Observable.of(loginResponse);\n            });\n    }\n/**\n * @param {?=} clientId\n * @param {?=} clientSecret\n * @return {?}\n */\npublic appLogin(clientId?: string, clientSecret?: string): Observable<any> {\n        if (!clientId) {\n            clientId = this.appConfig.config.clientId;\n        }\n\n        if (!clientSecret) {\n            clientSecret = this.appConfig.config.clientSecret;\n        }\n\n        return this.post(this.resource + '/token', {\n            client_id: clientId,\n            client_secret: clientSecret,\n            grant_type: 'client_credentials'\n        }, null, { credentials: false })\n            .map((loginResponse) => {\n                if (loginResponse && loginResponse.access_token) {\n                    const /** @type {?} */ accessToken = loginResponse.access_token;\n                    this.authService.setAppAccessToken(accessToken);\n                }\n\n                return Observable.of(loginResponse);\n            });\n    }\n/**\n * @return {?}\n */\npublic logout() {\n        this.eventsManagerService.trigger(EventManagerService.ON_USER_SIGN_OUT);\n        this.authService.logout();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: AuthService, },\n{type: AppConfigService, },\n{type: EventManagerService, },\n];\n}\n\nfunction Oauth2Service_tsickle_Closure_declarations() {\n/** @type {?} */\nOauth2Service.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOauth2Service.ctorParameters;\n/** @type {?} */\nOauth2Service.prototype.http;\n/** @type {?} */\nOauth2Service.prototype.authService;\n/** @type {?} */\nOauth2Service.prototype.appConfig;\n/** @type {?} */\nOauth2Service.prototype.eventsManagerService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/of';\n\nimport { Subject } from 'rxjs/Subject';\n\nimport { AuthService } from '../common/auth.service';\nimport { CRUDService } from '../common/crud.service';\n\nimport { AppConfigService } from '../common/app-config.service';\nimport { EventManagerService } from '../common/event-manager.service';\nexport class UsersService extends CRUDService {\n/**\n * @param {?} http\n * @param {?} authService\n * @param {?} appConfig\n * @param {?} eventsManagerService\n */\nconstructor(public http: Http,\npublic authService: AuthService,\npublic appConfig: AppConfigService,\npublic eventsManagerService: EventManagerService\n    ) {\n        super('users', http, authService, appConfig, eventsManagerService);\n    }\n/**\n * @param {?} data\n * @return {?}\n */\npublic register(data: any): Observable<any> {\n        return this.post(this.resource + '/register', data, null, { credentials: 'app' })\n            .map((loginResponse) => {\n                if (loginResponse && loginResponse.access_token) {\n                    const /** @type {?} */ accessToken = loginResponse.access_token;\n                    this.authService.setAccessToken(accessToken);\n                    this.authService.setUser(loginResponse.data.identity);\n\n                    this.eventsManagerService.trigger(EventManagerService.ON_USER_SIGN_IN);\n                }\n\n                return Observable.of(loginResponse);\n            });\n    }\n/**\n * @return {?}\n */\npublic logout() {\n        this.authService.logout();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: AuthService, },\n{type: AppConfigService, },\n{type: EventManagerService, },\n];\n}\n\nfunction UsersService_tsickle_Closure_declarations() {\n/** @type {?} */\nUsersService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUsersService.ctorParameters;\n/** @type {?} */\nUsersService.prototype.http;\n/** @type {?} */\nUsersService.prototype.authService;\n/** @type {?} */\nUsersService.prototype.appConfig;\n/** @type {?} */\nUsersService.prototype.eventsManagerService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\n\nimport { Observable } from 'rxjs/Observable';\n\nimport { APIService } from './api.service';\nimport { AuthService } from './auth.service';\nimport { AppConfigService } from './app-config.service';\nimport { EventManagerService } from '../common/event-manager.service';\n\nimport { IListOptions } from '../common/list-options.interface';\nexport class CRUDService extends APIService {\nprivate resourceName: string;\nprivate localResourceIdName: string = '_id';\n/**\n * @param {?} value\n * @return {?}\n */\npublic set resourceIdName(value: string) {\n        this.localResourceIdName = value;\n    }\n/**\n * @return {?}\n */\npublic get resourceIdName(): string {\n        return this.localResourceIdName;\n    }\n/**\n * @return {?}\n */\npublic get resource(): string {\n        return this.resourceName;\n    }\n/**\n * @param {?} resourceName\n * @param {?} http\n * @param {?} authService\n * @param {?} appConfig\n * @param {?} eventsManagerService\n */\nconstructor(resourceName: string,\npublic http: Http,\npublic authService: AuthService,\npublic appConfig: AppConfigService,\npublic eventsManagerService: EventManagerService\n    ) {\n        super(http, authService, appConfig, eventsManagerService);\n\n        this.resourceName = resourceName;\n    }\n/**\n * @param {?=} config\n * @param {?=} options\n * @return {?}\n */\npublic list(config?: IListOptions, options?: any): Observable<any> {\n        return this.get(this.resourceName, config, options);\n    }\n/**\n * @param {?} resourceId\n * @param {?=} config\n * @return {?}\n */\npublic read(resourceId: string, config: IListOptions = {}): Observable<any> {\n        const { fields, options } = config;\n        return this.get(this.resourceName + '/' + resourceId, { fields }, options);\n    }\n/**\n * @param {?} resource\n * @param {?=} options\n * @return {?}\n */\npublic save(resource: any, options?: any): Observable<any> {\n        if (resource[this.resourceIdName]) {\n            return this.put(this.resourceName + '/' + resource[this.resourceIdName], resource, options);\n        } else {\n            return this.post(this.resourceName, resource, options);\n        }\n    }\n/**\n * @param {?} resourceId\n * @param {?=} options\n * @return {?}\n */\npublic delete(resourceId: string, options?: any): Observable<any> {\n        return super.delete(this.resourceName + '/' + resourceId, options);\n    }\n/**\n * @param {?} resource\n * @param {?} type\n * @param {?} parent\n * @param {?=} context\n * @return {?}\n */\npublic addParent(resource: any, type: string, parent: any, context?: string) {\n        let /** @type {?} */ existingParentIndex: number = -1;\n\n        if (!resource.parents) {\n            resource.parents = [];\n        } else {\n            existingParentIndex = resource.parents.findIndex((item: any) => {\n                if (context) {\n                    return item.id == parent._id && item.type == type && item.context == context;\n                } else {\n                    return item.id == parent._id && item.type == type\n                }\n            });\n        }\n\n        if (!parent || !parent._id) {\n            throw new Error('Invalid parent or parent.id when adding');\n        }\n\n        let /** @type {?} */ parentObject: any = { id: parent._id, type, name: parent.name };\n\n        if (context) {\n            parentObject.context = context;\n        }\n\n        if (existingParentIndex >= 0) {\n            resource.parents[existingParentIndex] = parentObject;\n        } else {\n            resource.parents.push(parentObject);\n        }\n\n        return resource;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\nnull,\n{type: Http, },\n{type: AuthService, },\n{type: AppConfigService, },\n{type: EventManagerService, },\n];\n}\n\nfunction CRUDService_tsickle_Closure_declarations() {\n/** @type {?} */\nCRUDService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCRUDService.ctorParameters;\n/** @type {?} */\nCRUDService.prototype.resourceName;\n/** @type {?} */\nCRUDService.prototype.localResourceIdName;\n/** @type {?} */\nCRUDService.prototype.http;\n/** @type {?} */\nCRUDService.prototype.authService;\n/** @type {?} */\nCRUDService.prototype.appConfig;\n/** @type {?} */\nCRUDService.prototype.eventsManagerService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/observable/throw';\n\nimport { AuthService } from './auth.service';\nimport { AppConfigService } from './app-config.service';\nimport { EventManagerService } from '../common/event-manager.service';\n\nimport { IListOptions } from '../common/list-options.interface';\nexport class APIService {\nprivate apiURL: string;\nprivate clientId: string | undefined;\nprivate clientSecret: string | undefined;\n/**\n * @param {?} http\n * @param {?} authService\n * @param {?} appConfig\n * @param {?} eventsManagerService\n */\nconstructor(public http: Http,\npublic authService: AuthService,\npublic appConfig: AppConfigService,\npublic eventsManagerService: EventManagerService\n    ) {\n        this.apiURL = this.appConfig.config.apiURL;\n        this.clientId = this.appConfig.config.clientId;\n        this.clientSecret = this.appConfig.config.clientSecret;\n    }\n/**\n * @param {?} path\n * @param {?=} config\n * @param {?=} options\n * @return {?}\n */\npublic get(path: string, config?: IListOptions, options?: any): Observable<any> {\n        return this.http.get(\n            this.apiURL + '/' + path + this.getUrlParams(config), this.getRequestOptions(options))\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n/**\n * @param {?} path\n * @param {?=} data\n * @param {?=} query\n * @param {?=} options\n * @return {?}\n */\npublic put(path: string, data?: any, query?: any, options?: any): Observable<any> {\n        return this.http.put(this.apiURL + '/' + path + this.getUrlParams(query), data,\n            this.getRequestOptions(options))\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n/**\n * @param {?} path\n * @param {?=} data\n * @param {?=} query\n * @param {?=} options\n * @return {?}\n */\npublic post(path: string, data?: any, query?: any, options?: any): Observable<any> {\n        return this.http.post(this.apiURL + '/' + path +\n            this.getUrlParams(query), data, this.getRequestOptions(options))\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n/**\n * @param {?} path\n * @param {?=} query\n * @param {?=} options\n * @return {?}\n */\npublic delete(path: string, query?: any, options?: any): Observable<any> {\n        return this.http.delete(this.apiURL + '/' + path +\n            this.getUrlParams(query), this.getRequestOptions(options))\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n/**\n * @param {?=} options\n * @return {?}\n */\nprivate getRequestOptions(options?: any): RequestOptions {\n        const /** @type {?} */ headers = new Headers({ 'Content-Type': 'application/json' });\n        const /** @type {?} */ requestOptions = new RequestOptions({ headers });\n\n        if (!options || options.credentials === undefined || options.credentials === true ||\n            options.credentials === 'app') {\n\n            if (options !== undefined && options.credentials === 'app') {\n                headers.append('Authorization', 'Bearer ' + this.authService.getAppAccessToken());\n            } else {\n                headers.append('Authorization', 'Bearer ' + this.authService.getAccessToken());\n            }\n        }\n\n        return requestOptions;\n    }\n/**\n * @param {?} data\n * @return {?}\n */\nprivate getUrlParams(data: any): string {\n        let /** @type {?} */ urlParams = '';\n\n        if (data) {\n            const /** @type {?} */ params = [];\n            const /** @type {?} */ keys = Object.keys(data);\n            for (const /** @type {?} */ key of keys) {\n                if (data[key] !== undefined && String(data[key]).length > 0) {\n                    let /** @type {?} */ keyValue = data[key];\n                    if (typeof keyValue === 'object') {\n                        try {\n                            keyValue = JSON.stringify(keyValue);\n                        } catch ( /** @type {?} */err) {\n                            // do nothing\n                        }\n                    }\n\n                    params.push(key + '=' + encodeURIComponent(keyValue));\n                }\n            }\n\n            if (params.length > 0) {\n                urlParams = '?' + params.join('&');\n            }\n        }\n\n        return urlParams;\n    }\n/**\n * @param {?} res\n * @return {?}\n */\nprivate extractData(res: Response) {\n        return res.json();\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate handleError(error: Response | any) {\n        // TODO use a remote logging infrastructure\n        let /** @type {?} */ errObj: any;\n        if (error instanceof Response) {\n            const /** @type {?} */ body = error.json() || '';\n            const /** @type {?} */ err = body.error || JSON.stringify(body);\n            errObj = err;\n        } else {\n            errObj = error;\n        }\n        return Observable.throw(errObj);\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: AuthService, },\n{type: AppConfigService, },\n{type: EventManagerService, },\n];\n}\n\nfunction APIService_tsickle_Closure_declarations() {\n/** @type {?} */\nAPIService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAPIService.ctorParameters;\n/** @type {?} */\nAPIService.prototype.apiURL;\n/** @type {?} */\nAPIService.prototype.clientId;\n/** @type {?} */\nAPIService.prototype.clientSecret;\n/** @type {?} */\nAPIService.prototype.http;\n/** @type {?} */\nAPIService.prototype.authService;\n/** @type {?} */\nAPIService.prototype.appConfig;\n/** @type {?} */\nAPIService.prototype.eventsManagerService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { ILizardConfig } from './lizard-config.interface';\n\nimport { INITIAL_CONFIG } from '../lizard-initial-config';\nexport class AppConfigService {\nprivate initialConfig: ILizardConfig;\n/**\n * @param {?} config\n */\nconstructor(  config: ILizardConfig) {\n        this.initialConfig = config;\n    }\n/**\n * @param {?} config\n * @return {?}\n */\npublic setInitialConfig(config: ILizardConfig) {\n        this.initialConfig = config;\n    }\n/**\n * @return {?}\n */\npublic get config(): ILizardConfig {\n        return this.initialConfig;\n    }\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [INITIAL_CONFIG, ] }, ]},\n];\n}\n\nfunction AppConfigService_tsickle_Closure_declarations() {\n/**\n * @nocollapse\n * @type {?}\n */\nAppConfigService.ctorParameters;\n/** @type {?} */\nAppConfigService.prototype.initialConfig;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { ILizardConfig } from './common/lizard-config.interface';\nimport { InjectionToken } from '@angular/core';\n\nexport let /** @type {?} */ INITIAL_CONFIG = new InjectionToken<ILizardConfig>('app.config');","import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\n\nimport { LocalStorageService } from './local-storage.service';\nimport { EventManagerService } from './event-manager.service';\nexport class AuthService {\nprivate cachedAppAccessToken: string | null;\nprivate cachedAccessToken: string | null;\nprivate cachedUser: any;\n/**\n * @param {?} http\n * @param {?} localStorage\n * @param {?} eventManager\n */\nconstructor(\npublic http: Http,\npublic localStorage: LocalStorageService,\npublic eventManager: EventManagerService\n    ) { }\n/**\n * @param {?} accessToken\n * @return {?}\n */\npublic setAccessToken(accessToken: string) {\n        this.localStorage.set('AT', accessToken);\n        this.cachedAccessToken = accessToken;\n    }\n/**\n * @param {?} accessToken\n * @return {?}\n */\npublic setAppAccessToken(accessToken: string) {\n        this.localStorage.set('ATA', accessToken);\n        this.cachedAppAccessToken = accessToken;\n    }\n/**\n * @return {?}\n */\npublic getAccessToken() {\n        if (!this.cachedAccessToken) {\n            this.cachedAccessToken = this.localStorage.get('AT');\n        }\n\n        return this.cachedAccessToken;\n    }\n/**\n * @return {?}\n */\npublic getAppAccessToken() {\n        if (!this.cachedAppAccessToken) {\n            this.cachedAppAccessToken = this.localStorage.get('ATA');\n        }\n\n        return this.cachedAppAccessToken;\n    }\n/**\n * @param {?} user\n * @return {?}\n */\npublic setUser(user: any) {\n        this.cachedUser = user;\n        this.localStorage.set('US', user);\n\n        this.eventManager.trigger(EventManagerService.ON_USER_CHANGED, user);\n    }\n/**\n * @return {?}\n */\npublic getUser(): any {\n        if (!this.cachedUser) {\n            this.cachedUser = this.localStorage.get('US');\n        }\n\n        return this.cachedUser;\n    }\n/**\n * @return {?}\n */\npublic isLoggedIn() {\n        return this.getUser() != null;\n    }\n/**\n * @param {?} roles\n * @return {?}\n */\npublic userHasRole(roles: string[] | string) {\n        const /** @type {?} */ user = this.getUser();\n\n        if (Array.isArray(roles)) {\n            for (let /** @type {?} */ role of roles) {\n                if (user.roles.indexOf(role) >= 0) {\n                    return true;\n                }\n            }\n        } else {\n            if (user.roles.indexOf(roles) >= 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n/**\n * @return {?}\n */\npublic logout() {\n        this.cachedAccessToken = null;\n        this.cachedUser = null;\n        this.localStorage.remove('AT');\n        this.localStorage.remove('US');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: LocalStorageService, },\n{type: EventManagerService, },\n];\n}\n\nfunction AuthService_tsickle_Closure_declarations() {\n/** @type {?} */\nAuthService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAuthService.ctorParameters;\n/** @type {?} */\nAuthService.prototype.cachedAppAccessToken;\n/** @type {?} */\nAuthService.prototype.cachedAccessToken;\n/** @type {?} */\nAuthService.prototype.cachedUser;\n/** @type {?} */\nAuthService.prototype.http;\n/** @type {?} */\nAuthService.prototype.localStorage;\n/** @type {?} */\nAuthService.prototype.eventManager;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\n\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\nexport class EventManagerService {\npublic static ON_USER_SIGN_OUT: string = '_onUserSignOut';\npublic static ON_USER_SIGN_IN: string = '_onUserSignIn';\npublic static ON_USER_CHANGED: string = '_onUserChanged';\nprivate events: { [key: string]: Subject<any> } = {\n        '_onUserSignOut': new Subject(),\n        '_onUserSignIn': new Subject(),\n        '_onUserChanged': new Subject()\n    }\n/**\n * @return {?}\n */\npublic get onUserSignIn(): Observable<any> {\n        return this.events['_onUserSignIn'].asObservable();\n    }\n/**\n * @return {?}\n */\npublic get onUserSignOut(): Observable<any> {\n        return this.events['_onUserSignOut'].asObservable();\n    }\n/**\n * @return {?}\n */\npublic get onUserChanged(): Observable<any> {\n        return this.events['_onUserChanged'].asObservable();\n    }\n/**\n * @param {?} event\n * @param {?=} data\n * @return {?}\n */\npublic trigger(event: string, data?: any) {\n        if (this.events[event] && this.events[event] instanceof Subject) {\n            this.events[event].next(data || {});\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction EventManagerService_tsickle_Closure_declarations() {\n/** @type {?} */\nEventManagerService.ON_USER_SIGN_OUT;\n/** @type {?} */\nEventManagerService.ON_USER_SIGN_IN;\n/** @type {?} */\nEventManagerService.ON_USER_CHANGED;\n/** @type {?} */\nEventManagerService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEventManagerService.ctorParameters;\n/** @type {?} */\nEventManagerService.prototype.events;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/map';\nexport class LocalStorageService {\nprivate prefix: string = 'lizard-';\n/**\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\npublic set(key: string, value: any) {\n        if (typeof value.toStorageItem === 'function') {\n            value = value.toStorageItem();\n        }\n\n        localStorage.setItem(this.prefix + key, JSON.stringify(value));\n    }\n/**\n * @param {?} key\n * @return {?}\n */\npublic get(key: string): any {\n        const /** @type {?} */ value = localStorage.getItem(this.prefix + key);\n\n        if (value != null) {\n            return JSON.parse(value);\n        }\n\n        return null;\n    }\n/**\n * @param {?} key\n * @return {?}\n */\npublic remove(key: string) {\n        localStorage.removeItem(this.prefix + key);\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LocalStorageService_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalStorageService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocalStorageService.ctorParameters;\n/** @type {?} */\nLocalStorageService.prototype.prefix;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":"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"}