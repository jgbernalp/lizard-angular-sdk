{"version":3,"file":"lizard-angular-sdk.es5.js","sources":["../../index.ts","../../public_api.ts","../../src/lizard-angular-sdk.ts","../../src/modules/lizard-sdk.module.ts","../../src/resources/users.service.ts","../../src/common/crud.service.ts","../../src/common/api.service.ts","../../src/common/app-config.factory.ts","../../src/common/auth.service.ts","../../src/common/local-storage.service.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {LocalStorageService,AuthService,APIService,UsersService,ILizardConfig,LizardSDKModule} from './public_api';\n\nexport {CRUDService as Éµa} from './src/common/crud.service';","/**\n * Entry point for all public APIs of the package.\n */\nexport {LocalStorageService,AuthService,APIService,UsersService,ILizardConfig,LizardSDKModule} from './src/lizard-angular-sdk';\n","// Public classes.\nexport { LocalStorageService } from './common/local-storage.service';\nexport { AuthService } from './common/auth.service';\nexport { APIService } from './common/api.service';\n\nexport { UsersService } from './resources/users.service';\nexport { ILizardConfig } from './common/lizard-config.interface';\n\nexport { LizardSDKModule } from './modules/lizard-sdk.module';\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { LocalStorageService } from '../common/local-storage.service';\nimport { AuthService } from '../common/auth.service';\nimport { APIService } from '../common/api.service';\nimport { ILizardConfig } from '../common/lizard-config.interface';\nimport { AppConfig } from '../common/app-config.factory';\n\nimport { UsersService } from '../resources/users.service';\nexport class LizardSDKModule {\n/**\n * @param {?} config\n * @return {?}\n */\npublic static forRoot(config: ILizardConfig): ModuleWithProviders {\n        AppConfig.setInitialConfig(config);\n\n        return {\n            ngModule: LizardSDKModule,\n            providers: [\n                LocalStorageService,\n                AuthService,\n                APIService,\n\n                UsersService\n            ]\n        };\n    }\n/**\n * @return {?}\n */\npublic static forChild(): ModuleWithProviders {\n        return {\n            ngModule: LizardSDKModule,\n            providers: [\n                APIService,\n                AuthService,\n                APIService,\n\n                UsersService\n            ]\n        };\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    declarations: [\n        // Pipes.\n        // Directives.\n    ],\n    exports: [\n        // Pipes.\n        // Directives.\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LizardSDKModule_tsickle_Closure_declarations() {\n/** @type {?} */\nLizardSDKModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLizardSDKModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/of';\n\nimport { Subject } from 'rxjs/Subject';\n\nimport { AuthService } from '../common/auth.service';\nimport { CRUDService } from '../common/crud.service';\nexport class UsersService extends CRUDService {\nprivate localOnUserLogsIn: Subject<any> = new Subject();\n/**\n * @return {?}\n */\npublic get onUserLogsIn(): Observable<any> {\n        return this.localOnUserLogsIn.asObservable();\n    }\n/**\n * @param {?} http\n * @param {?} authService\n */\nconstructor(public http: Http,\npublic authService: AuthService) {\n        super('users', http, authService);\n    }\n/**\n * @param {?} username\n * @param {?} password\n * @return {?}\n */\npublic login(username: string, password: string): Observable<any> {\n        return this.post('login', { username, password }, null, { credentials: false })\n            .map((loginResponse) => {\n                if (loginResponse && loginResponse.access_token) {\n                    const /** @type {?} */ accessToken = loginResponse.access_token;\n                    this.authService.setAccessToken(accessToken);\n\n                    this.localOnUserLogsIn.next();\n                }\n\n                return Observable.of(loginResponse);\n            });\n    }\n/**\n * @return {?}\n */\npublic logout() {\n        this.authService.logout();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: AuthService, },\n];\n}\n\nfunction UsersService_tsickle_Closure_declarations() {\n/** @type {?} */\nUsersService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUsersService.ctorParameters;\n/** @type {?} */\nUsersService.prototype.localOnUserLogsIn;\n/** @type {?} */\nUsersService.prototype.http;\n/** @type {?} */\nUsersService.prototype.authService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\n\nimport { Observable } from 'rxjs/Observable';\n\nimport { APIService } from './api.service';\nimport { AuthService } from './auth.service';\nexport class CRUDService extends APIService {\nprivate resourceName: string;\nprivate localResourceIdName: string = '_id';\n/**\n * @param {?} value\n * @return {?}\n */\npublic set resourceIdName(value: string) {\n        this.localResourceIdName = value;\n    }\n/**\n * @return {?}\n */\npublic get resourceIdName(): string {\n        return this.localResourceIdName;\n    }\n/**\n * @param {?} resourceName\n * @param {?} http\n * @param {?} authService\n */\nconstructor(resourceName: string,\npublic http: Http,\npublic authService: AuthService) {\n        super(http, authService);\n\n        this.resourceName = resourceName;\n    }\n/**\n * @param {?=} query\n * @param {?=} limit\n * @param {?=} fields\n * @param {?=} sort\n * @param {?=} options\n * @return {?}\n */\npublic list(query: any = {}, limit?: number, fields?: [string], sort?: [string], options?: any): Observable<any> {\n        return this.get(this.resourceName, { query, fields, sort }, options);\n    }\n/**\n * @param {?} resourceId\n * @param {?=} fields\n * @param {?=} options\n * @return {?}\n */\npublic read(resourceId: string, fields?: [string], options?: any): Observable<any> {\n        return this.get(this.resourceName + '/' + resourceId, { fields }, options);\n    }\n/**\n * @param {?} resource\n * @param {?} data\n * @param {?} options\n * @return {?}\n */\npublic save(resource: any, data: any, options: any): Observable<any> {\n        if (resource[this.resourceIdName]) {\n            return this.put(this.resourceName + '/' + resource[this.resourceIdName], data, options);\n        } else {\n            return this.post(this.resourceName, data, options);\n        }\n    }\n/**\n * @param {?} resourceId\n * @param {?} options\n * @return {?}\n */\npublic delete(resourceId: string, options: any): Observable<any> {\n        return super.delete(this.resourceName + '/' + resourceId, options);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\nnull,\n{type: Http, },\n{type: AuthService, },\n];\n}\n\nfunction CRUDService_tsickle_Closure_declarations() {\n/** @type {?} */\nCRUDService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCRUDService.ctorParameters;\n/** @type {?} */\nCRUDService.prototype.resourceName;\n/** @type {?} */\nCRUDService.prototype.localResourceIdName;\n/** @type {?} */\nCRUDService.prototype.http;\n/** @type {?} */\nCRUDService.prototype.authService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/map';\n\nimport { AuthService } from './auth.service';\nimport { AppConfig } from './app-config.factory';\nexport class APIService {\nprivate apiURL: string;\nprivate clientId: string | undefined;\nprivate clientSecret: string | undefined;\n/**\n * @param {?} http\n * @param {?} authService\n */\nconstructor(public http: Http,\npublic authService: AuthService) {\n        this.apiURL = AppConfig.config.apiURL;\n        this.clientId = AppConfig.config.clientId;\n        this.clientSecret = AppConfig.config.clientSecret;\n    }\n/**\n * @param {?} path\n * @param {?=} query\n * @param {?=} options\n * @return {?}\n */\npublic get(path: string, query?: any, options?: any): Observable<any> {\n        return this.http.get(this.apiURL + '/' + path + this.getUrlParams(query),\n            this.getRequestOptions(options))\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n/**\n * @param {?} path\n * @param {?=} data\n * @param {?=} query\n * @param {?=} options\n * @return {?}\n */\npublic put(path: string, data?: any, query?: any, options?: any): Observable<any> {\n        return this.http.put(this.apiURL + '/' + path + this.getUrlParams(query), data,\n            this.getRequestOptions(options))\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n/**\n * @param {?} path\n * @param {?=} data\n * @param {?=} query\n * @param {?=} options\n * @return {?}\n */\npublic post(path: string, data?: any, query?: any, options?: any): Observable<any> {\n        return this.http.post(this.apiURL + '/' + path +\n            this.getUrlParams(query), data, this.getRequestOptions(options))\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n/**\n * @param {?} path\n * @param {?=} query\n * @param {?=} options\n * @return {?}\n */\npublic delete(path: string, query?: any, options?: any): Observable<any> {\n        return this.http.delete(this.apiURL + '/' + path +\n            this.getUrlParams(query), this.getRequestOptions(options))\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n/**\n * @param {?=} options\n * @return {?}\n */\nprivate getRequestOptions(options?: any): RequestOptions {\n        const /** @type {?} */ headers = new Headers({ 'Content-Type': 'application/json' });\n        const /** @type {?} */ requestOptions = new RequestOptions({ headers });\n\n        if (!options || options.credentials === undefined || options.credentials === true) {\n            headers.append('Authorization', 'Bearer ' + this.authService.getAccessToken());\n        }\n\n        return requestOptions;\n    }\n/**\n * @param {?} data\n * @return {?}\n */\nprivate getUrlParams(data: any): string {\n        let /** @type {?} */ urlParams = '';\n\n        if (data) {\n            const /** @type {?} */ params = [];\n            const /** @type {?} */ keys = Object.keys(data);\n            for (const /** @type {?} */ key of keys) {\n                params.push(key + '=' + encodeURIComponent(data[key]));\n            }\n\n            if (params.length > 0) {\n                urlParams = '?' + params.join('&');\n            }\n        }\n\n        return urlParams;\n    }\n/**\n * @param {?} res\n * @return {?}\n */\nprivate extractData(res: Response) {\n        const /** @type {?} */ body = res.json();\n        return body.data || {};\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate handleError(error: Response | any) {\n        // TODO use a remote logging infrastructure\n        let /** @type {?} */ errMsg: string;\n        if (error instanceof Response) {\n            const /** @type {?} */ body = error.json() || '';\n            const /** @type {?} */ err = body.error || JSON.stringify(body);\n            errMsg = `${error.status} - ${error.statusText || ''} ${err}`;\n        } else {\n            errMsg = error.message ? error.message : error.toString();\n        }\n        return Observable.throw(errMsg);\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: AuthService, },\n];\n}\n\nfunction APIService_tsickle_Closure_declarations() {\n/** @type {?} */\nAPIService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAPIService.ctorParameters;\n/** @type {?} */\nAPIService.prototype.apiURL;\n/** @type {?} */\nAPIService.prototype.clientId;\n/** @type {?} */\nAPIService.prototype.clientSecret;\n/** @type {?} */\nAPIService.prototype.http;\n/** @type {?} */\nAPIService.prototype.authService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { ILizardConfig } from './lizard-config.interface';\nexport class AppConfig {\nprivate static initialConfig: ILizardConfig;\n/**\n * @param {?} config\n * @return {?}\n */\npublic static setInitialConfig(config: ILizardConfig) {\n        AppConfig.initialConfig = config;\n    }\n/**\n * @return {?}\n */\npublic static get config(): ILizardConfig {\n        return AppConfig.initialConfig;\n    }\n}\n\nfunction AppConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nAppConfig.initialConfig;\n}\n\n","import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\n\nimport { LocalStorageService } from './local-storage.service';\nexport class AuthService {\nprivate cachedAccessToken: string;\nprivate cachedUser: any;\n/**\n * @param {?} http\n * @param {?} localStorage\n */\nconstructor(public http: Http,\npublic localStorage: LocalStorageService) {\n    }\n/**\n * @param {?} accessToken\n * @return {?}\n */\npublic setAccessToken(accessToken: string) {\n        this.localStorage.set('AT', accessToken);\n        this.cachedAccessToken = accessToken;\n    }\n/**\n * @return {?}\n */\npublic getAccessToken() {\n        if (!this.cachedAccessToken) {\n            this.cachedAccessToken = this.localStorage.get('AT');\n        }\n\n        return this.cachedAccessToken;\n    }\n/**\n * @param {?} user\n * @return {?}\n */\npublic setUser(user: any) {\n        this.localStorage.set('US', user);\n    }\n/**\n * @return {?}\n */\npublic getUser(): any {\n        if (!this.cachedAccessToken) {\n            this.cachedAccessToken = this.localStorage.get('US');\n        }\n\n        return this.cachedAccessToken;\n    }\n/**\n * @return {?}\n */\npublic isLoggedIn() {\n        return this.getUser() != null;\n    }\n/**\n * @return {?}\n */\npublic logout() {\n        this.localStorage.remove('AT');\n        this.localStorage.remove('US');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: LocalStorageService, },\n];\n}\n\nfunction AuthService_tsickle_Closure_declarations() {\n/** @type {?} */\nAuthService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAuthService.ctorParameters;\n/** @type {?} */\nAuthService.prototype.cachedAccessToken;\n/** @type {?} */\nAuthService.prototype.cachedUser;\n/** @type {?} */\nAuthService.prototype.http;\n/** @type {?} */\nAuthService.prototype.localStorage;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/map';\nexport class LocalStorageService {\nprivate prefix: string = 'lizard-';\n/**\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\npublic set(key: string, value: any) {\n        if (typeof value.toStorageItem === 'function') {\n            value = value.toStorageItem();\n        }\n\n        localStorage.setItem(this.prefix + key, JSON.stringify(value));\n    }\n/**\n * @param {?} key\n * @return {?}\n */\npublic get(key: string): any {\n        const /** @type {?} */ value = localStorage.getItem(this.prefix + key);\n\n        if (value != null) {\n            return JSON.parse(value);\n        }\n\n        return null;\n    }\n/**\n * @param {?} key\n * @return {?}\n */\npublic remove(key: string) {\n        localStorage.removeItem(key);\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LocalStorageService_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalStorageService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocalStorageService.ctorParameters;\n/** @type {?} */\nLocalStorageService.prototype.prefix;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;ASMA;IAAA;QAGY,IAAZ,CAAA,MAAY,GAAiB,SAAA,CAAU;IAwCvC,CAAC;;;;;;IAtCI,iCAAA,GAAA,UAAA,GAAA,EAAA,KAAA;QAGG,EAAR,CAAA,CAAY,OAFO,KAAA,CAAM,aAAC,KAAiB,UAAA,CAE3C,CAFuD,CAEvD;YACY,KAAK,GAFG,KAAA,CAAM,aAAC,EAAa,CAAE;QAG1C,CAAS;QAED,YAAY,CAFC,OAAC,CAAO,IAAC,CAAI,MAAC,GAAQ,GAAA,EAAK,IAAA,CAAK,SAAC,CAAS,KAAC,CAAK,CAAC,CAAC;IAGvE,CAAK;;;;;IAAA,iCAAA,GAAA,UAAA,GAAA;QAMG,IAAR,gBAAA,CALc,KAAA,GAAQ,YAAA,CAAa,OAAC,CAAO,IAAC,CAAI,MAAC,GAAQ,GAAA,CAAI,CAAC;QAOtD,EAAR,CAAA,CAAY,KALC,IAAQ,IAAA,CAKrB,CAL2B,CAK3B;YACY,MAAZ,CALmB,IAAA,CAAK,KAAC,CAAK,KAAC,CAAK,CAAC;QAMrC,CAAS;QAED,MAAR,CALe,IAAA,CAAK;IAMpB,CAAK;;;;;IAHA,oCAAA,GAAA,UAAA,GAAA;QASG,YAAY,CARC,UAAC,CAAU,GAAC,CAAG,CAAC;IAGrC,CAAE;;CA3BF;AA2BO,mBAAP,CAAA,UAAO,GAAoC;IAS3C,EARE,IAAA,EAAM,UAAA,EAAW;CASlB,CARC;;;;AAED,mBAAD,CAAA,cAAC,GAAA,cAAA,OAAA,EAWA,EAXA,CAWA,CAAC;AD5CF;;;;;IAOA,qBADuB,IAAM,EAAa,YAAc;QAAjC,IAAvB,CAAA,IAAuB,GAAA,IAAA,CAAM;QAAa,IAA1C,CAAA,YAA0C,GAAA,YAAA,CAAc;IAGxD,CAAK;;;;;IAAA,oCAAA,GAAA,UAAA,WAAA;QAMG,IAAI,CALC,YAAC,CAAY,GAAC,CAAG,IAAC,EAAK,WAAA,CAAY,CAAC;QAMzC,IAAI,CALC,iBAAC,GAAmB,WAAA,CAAY;IAM7C,CAAK;;;;IAHA,oCAAA,GAAA;QAQG,EAAR,CAAA,CAAY,CAPC,IAAC,CAAI,iBAAC,CAOnB,CAPqC,CAOrC;YACY,IAAI,CAPC,iBAAC,GAAmB,IAAA,CAAK,YAAC,CAAY,GAAC,CAAG,IAAC,CAAI,CAAC;QAQjE,CAAS;QAED,MAAR,CAPe,IAAA,CAAK,iBAAC,CAAiB;IAQtC,CAAK;;;;;IALA,6BAAA,GAAA,UAAA,IAAA;QAWG,IAAI,CAVC,YAAC,CAAY,GAAC,CAAG,IAAC,EAAK,IAAA,CAAK,CAAC;IAW1C,CAAK;;;;IARA,6BAAA,GAAA;QAaG,EAAR,CAAA,CAAY,CAZC,IAAC,CAAI,iBAAC,CAYnB,CAZqC,CAYrC;YACY,IAAI,CAZC,iBAAC,GAAmB,IAAA,CAAK,YAAC,CAAY,GAAC,CAAG,IAAC,CAAI,CAAC;QAajE,CAAS;QAED,MAAR,CAZe,IAAA,CAAK,iBAAC,CAAiB;IAatC,CAAK;;;;IAVA,gCAAA,GAAA;QAeG,MAAR,CAde,IAAA,CAAK,OAAC,EAAO,IAAK,IAAA,CAAK;IAOtC,CAAE;;;;IAJG,4BAAA,GAAA;QAiBG,IAAI,CAhBC,YAAC,CAAY,MAAC,CAAM,IAAC,CAAI,CAAC;QAiB/B,IAAI,CAhBC,YAAC,CAAY,MAAC,CAAM,IAAC,CAAI,CAAC;IAiBvC,CAAK;;CAzDL;AA0CO,WAAP,CAAA,UAAO,GAAoC;IAiB3C,EAhBE,IAAA,EAAM,UAAA,EAAW;CAiBlB,CAhBC;;;;AAED,WAAD,CAAA,cAAC,GAAA,cAAA,OAAA;IAmBD,EAAC,IAAI,EAAE,IAAI,GAAG;IACd,EAAC,IAAI,EAAE,mBAAmB,GAAG;CAC5B,EArBA,CAqBA,CAAC;ADrEF;IAAA;IAeA,CAAC;;;;;IAZI,0BAAA,GAAA,UAAA,MAAA;QAIG,SAAS,CAHC,aAAC,GAAe,MAAA,CAAO;IAIzC,CAAK;IADA,sBAAA,mBAAA;;;;aAAA;YAMG,MAAR,CALe,SAAA,CAAU,aAAC,CAAa;QAMvC,CAAK;;;OAAA;IACL,gBAAC;AAAD,CAAC,AAfD,IAeC;ADRD;;;;;IAQA,oBADuB,IAAM,EAAa,WAAa;QAAhC,IAAvB,CAAA,IAAuB,GAAA,IAAA,CAAM;QAAa,IAA1C,CAAA,WAA0C,GAAA,WAAA,CAAa;QAG/C,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC;QACtC,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC;QAC1C,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC,MAAM,CAAC,YAAY,CAAC;IAC1D,CAAK;;;;;;;IAAA,wBAAA,GAAA,UAAA,IAAA,EAAA,KAAA,EAAA,OAAA;QAQG,MAAR,CAPe,IAAA,CAAK,IAAC,CAAI,GAAC,CAAG,IAAC,CAAI,MAAC,GAAQ,GAAA,GAAM,IAAA,GAAO,IAAA,CAAK,YAAC,CAAY,KAAC,CAAK,EAQpE,IAAI,CAPC,iBAAC,CAAiB,OAAC,CAAO,CAAC;aAQ/B,GAPC,CAAG,IAAC,CAAI,WAAC,CAAW;aAQrB,KAPC,CAAK,IAAC,CAAI,WAAC,CAAW,CAAC;IAQrC,CAAK;;;;;;;;IALA,wBAAA,GAAA,UAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,OAAA;QAcG,MAAR,CAbe,IAAA,CAAK,IAAC,CAAI,GAAC,CAAG,IAAC,CAAI,MAAC,GAAQ,GAAA,GAAM,IAAA,GAAO,IAAA,CAAK,YAAC,CAAY,KAAC,CAAK,EAAE,IAAA,EActE,IAAI,CAbC,iBAAC,CAAiB,OAAC,CAAO,CAAC;aAc/B,GAbC,CAAG,IAAC,CAAI,WAAC,CAAW;aAcrB,KAbC,CAAK,IAAC,CAAI,WAAC,CAAW,CAAC;IAcrC,CAAK;;;;;;;;IAXA,yBAAA,GAAA,UAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,OAAA;QAoBG,MAAR,CAnBe,IAAA,CAAK,IAAC,CAAI,IAAC,CAAI,IAAC,CAAI,MAAC,GAAQ,GAAA,GAAM,IAAA;YAoBtC,IAAI,CAnBC,YAAC,CAAY,KAAC,CAAK,EAAE,IAAA,EAAM,IAAA,CAAK,iBAAC,CAAiB,OAAC,CAAO,CAAC;aAoB/D,GAnBC,CAAG,IAAC,CAAI,WAAC,CAAW;aAoBrB,KAnBC,CAAK,IAAC,CAAI,WAAC,CAAW,CAAC;IAoBrC,CAAK;;;;;;;IAjBA,2BAAA,GAAA,UAAA,IAAA,EAAA,KAAA,EAAA,OAAA;QAyBG,MAAR,CAxBe,IAAA,CAAK,IAAC,CAAI,MAAC,CAAM,IAAC,CAAI,MAAC,GAAQ,GAAA,GAAM,IAAA;YAyBxC,IAAI,CAxBC,YAAC,CAAY,KAAC,CAAK,EAAE,IAAA,CAAK,iBAAC,CAAiB,OAAC,CAAO,CAAC;aAyBzD,GAxBC,CAAG,IAAC,CAAI,WAAC,CAAW;aAyBrB,KAxBC,CAAK,IAAC,CAAI,WAAC,CAAW,CAAC;IAyBrC,CAAK;;;;;IAtBA,sCAAA,GAAA,UAAA,OAAA;QA4BG,IAAR,gBAAA,CA3Bc,OAAA,GAAU,IAAI,OAAA,CAAQ,EAAE,cAAA,EAAgB,kBAAA,EAAmB,CAAE,CAAC;QA4BpE,IAAR,gBAAA,CA3Bc,cAAA,GAAiB,IAAI,cAAA,CAAe,EAAE,OAAA,SAAA,EAAQ,CAAE,CAAC;QA6BvD,EAAR,CAAA,CAAY,CA3BC,OAAC,IAAU,OAAA,CAAQ,WAAC,KAAe,SAAA,IAAa,OAAA,CAAQ,WAAC,KAAe,IAAA,CA2BrF,CA3B2F,CA2B3F;YACY,OAAO,CA3BC,MAAC,CAAM,eAAC,EAAgB,SAAA,GAAY,IAAA,CAAK,WAAC,CAAW,cAAC,EAAc,CAAE,CAAC;QA4B3F,CAAS;QAED,MAAR,CA3Be,cAAA,CAAe;IA4B9B,CAAK;;;;;IAzBA,iCAAA,GAAA,UAAA,IAAA;QA+BG,IAAR,gBAAA,CA9BY,SAAA,GAAY,EAAA,CAAG;QAgCnB,EAAR,CAAA,CAAY,IA9BC,CA8Bb,CA9BkB,CA8BlB;YACY,IAAZ,gBAAA,CA9BkB,MAAA,GAAS,EAAA,CAAG;YA+BlB,IAAZ,gBAAA,CA9BkB,IAAA,GAAO,MAAA,CAAO,IAAC,CAAI,IAAC,CAAI,CAAC;YA+B/B,GAAZ,CAAA,CA9B8B,UAAA,EAAA,aAAA,EAAA,kBAAA,EAAA,IAAA;gBA8Bb,IA9BM,GAAA,aAAA;gBA+BP,MAAM,CA9BC,IAAC,CAAI,GAAC,GAAK,GAAA,GAAM,kBAAA,CAAmB,IAAC,CAAI,GAAC,CAAG,CAAC,CAAC,CAAC;aA+B1D;YAED,EAAZ,CAAA,CAAgB,MA9BC,CAAM,MAAC,GAAQ,CAAA,CA8BhC,CA9BmC,CA8BnC;gBACgB,SAAS,GA9BG,GAAA,GAAM,MAAA,CAAO,IAAC,CAAI,GAAC,CAAG,CAAC;YA+BnD,CAAa;QACb,CAAS;QAED,MAAR,CA9Be,SAAA,CAAU;IA+BzB,CAAK;;;;;IA5BA,gCAAA,GAAA,UAAA,GAAA;QAkCG,IAAR,gBAAA,CAjCc,IAAA,GAAO,GAAA,CAAI,IAAC,EAAI,CAAE;QAkCxB,MAAR,CAjCe,IAAA,CAAK,IAAC,IAAO,EAAA,CAAG;IAkC/B,CAAK;;;;;IA/BA,gCAAA,GAAA,UAAA,KAAA;;QAsCG,IAAR,gBAAA,CApCY,MAAQ,CAAO;QAqCnB,EAAR,CAAA,CAAY,KApCC,YAAgB,QAAA,CAoC7B,CApCuC,CAoCvC;YACY,IAAZ,gBAAA,CApCkB,IAAA,GAAO,KAAA,CAAM,IAAC,EAAI,IAAK,EAAA,CAAG;YAqChC,IAAZ,gBAAA,CApCkB,GAAA,GAAM,IAAA,CAAK,KAAC,IAAQ,IAAA,CAAK,SAAC,CAAS,IAAC,CAAI,CAAC;YAqC/C,MAAM,GApCG,KAAI,CAAK,MAAC,YAAM,KAAM,CAAK,UAAC,IAAa,EAAA,UAAG,GAAO,CAAE;QAqC1E,CAAS;QApCT,IAAA,CAAe,CAAf;YAqCY,MAAM,GApCG,KAAA,CAAM,OAAC,GAAS,KAAA,CAAM,OAAC,GAAS,KAAA,CAAM,QAAC,EAAQ,CAAE;QAqCtE,CAAS;QACD,MAAR,CApCe,UAAA,CAAW,KAAC,CAAK,MAAC,CAAM,CAAC;IAqCxC,CAAK;;CA1HL;AAwFO,UAAP,CAAA,UAAO,GAAoC;IAqC3C,EApCE,IAAA,EAAM,UAAA,EAAW;CAqClB,CApCC;;;;AAED,UAAD,CAAA,cAAC,GAAA,cAAA,OAAA;IAuCD,EAAC,IAAI,EAAE,IAAI,GAAG;IACd,EAAC,IAAI,EAAE,WAAW,GAAG;CACpB,EAzCA,CAyCA,CAAC;ADvIF;IAEC,+BAAA;;;;;;IAmBD,qBAPK,YAAyB,EAAe,IAAM,EAAa,WAAa;QAO7E,YAGQ,kBAAM,IAAI,EAAE,WAAW,CAAC,SAG3B;QAbwC,KAA7C,CAAA,IAA6C,GAAA,IAAA,CAAM;QAAa,KAAhE,CAAA,WAAgE,GAAA,WAAA,CAAa;QAVjE,KAAZ,CAAA,mBAAY,GAA8B,KAAA,CAAM;QAsBxC,KAAI,CAAC,YAAY,GAAG,YAAY,CAAC;;IACzC,CAAK;IApBL,sBADK,uCAAA;;;;aAOL;YACQ,MAAR,CAHe,IAAA,CAAK,mBAAC,CAAmB;QAIxC,CAAK;;;;;aARL,UADK,KAAA;YAEG,IAAI,CADC,mBAAC,GAAqB,KAAA,CAAM;QAEzC,CAAK;;;OAAA;;;;;;;;;IAWA,0BAAA,GAAA,UAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAA,IAAA,EAAA,OAAA;QAAA,sBAAA,EAAA,UAAA;QAiBG,MAAR,CAhBe,IAAA,CAAK,GAAC,CAAG,IAAC,CAAI,YAAC,EAAa,EAAE,KAAA,OAAA,EAAO,MAAA,QAAA,EAAQ,IAAA,MAAA,EAAK,EAAG,OAAA,CAAQ,CAAC;IAiB7E,CAAK;;;;;;;IAdA,0BAAA,GAAA,UAAA,UAAA,EAAA,MAAA,EAAA,OAAA;QAsBG,MAAR,CArBe,IAAA,CAAK,GAAC,CAAG,IAAC,CAAI,YAAC,GAAc,GAAA,GAAM,UAAA,EAAY,EAAE,MAAA,QAAA,EAAO,EAAG,OAAA,CAAQ,CAAC;IAsBnF,CAAK;;;;;;;IAnBA,0BAAA,GAAA,UAAA,QAAA,EAAA,IAAA,EAAA,OAAA;QA2BG,EAAR,CAAA,CAAY,QA1BC,CAAQ,IAAC,CAAI,cAAC,CAAc,CA0BzC,CA1B2C,CA0B3C;YACY,MAAZ,CA1BmB,IAAA,CAAK,GAAC,CAAG,IAAC,CAAI,YAAC,GAAc,GAAA,GAAM,QAAA,CAAS,IAAC,CAAI,cAAC,CAAc,EAAE,IAAA,EAAM,OAAA,CAAQ,CAAC;QA2BpG,CAAS;QA1BT,IAAA,CAAe,CAAf;YA2BY,MAAZ,CA1BmB,IAAA,CAAK,IAAC,CAAI,IAAC,CAAI,YAAC,EAAa,IAAA,EAAM,OAAA,CAAQ,CAAC;QA2B/D,CAAS;IACT,CAAK;;;;;;IAxBA,4BAAA,GAAA,UAAA,UAAA,EAAA,OAAA;QA+BG,MAAR,CA9Be,iBAAM,MAAC,YAAM,IAAC,CAAI,YAAC,GAAc,GAAA,GAAM,UAAA,EAAY,OAAA,CAAQ,CAAC;IA+B3E,CAAK;;CApEL,CAEC,UAAA;AAqCM,WAAP,CAAA,UAAO,GAAoC;IA+B3C,EA9BE,IAAA,EAAM,UAAA,EAAW;CA+BlB,CA9BC;;;;AAED,WAAD,CAAA,cAAC,GAAA,cAAA,OAAA;IAiCD,IAAI;IACJ,EAAC,IAAI,EAAE,IAAI,GAAG;IACd,EAAC,IAAI,EAAE,WAAW,GAAG;CACpB,EApCA,CAoCA,CAAC;AD5EF;IAEC,gCAAA;;;;;IAUD,sBAHuB,IAAM,EAAa,WAAa;QAGvD,YAEQ,kBAAM,OAAO,EAAE,IAAI,EAAE,WAAW,CAAC,SACpC;QANkB,KAAvB,CAAA,IAAuB,GAAA,IAAA,CAAM;QAAa,KAA1C,CAAA,WAA0C,GAAA,WAAA,CAAa;QAN3C,KAAZ,CAAA,iBAAY,GAAkC,IAAI,OAAA,EAAQ,CAAE;;IAY5D,CAAK;IAVL,sBAAK,sCAAA;;;;aAAL;YACQ,MAAR,CAAe,IAAA,CAAK,iBAAC,CAAiB,YAAC,EAAY,CAAE;QACrD,CAAK;;;OAAA;;;;;;IAMA,4BAAA,GAAA,UAAA,QAAA,EAAA,QAAA;QAAA,iBAoBA;QAXG,MAAR,CARe,IAAA,CAAK,IAAC,CAAI,OAAC,EAAQ,EAAE,QAAA,UAAA,EAAU,QAAA,UAAA,EAAS,EAAG,IAAA,EAAM,EAAE,WAAA,EAAa,KAAA,EAAM,CAAE;aAS1E,GARC,CAAG,UAAC,aAAC;YASH,EAAhB,CAAA,CAAoB,aARC,IAAgB,aAAA,CAAc,YAAC,CAQpD,CARiE,CAQjE;gBACoB,IAApB,gBAAA,CAR0B,WAAA,GAAc,aAAA,CAAc,YAAC,CAAY;gBAS/C,KAAI,CARC,WAAC,CAAW,cAAC,CAAc,WAAC,CAAW,CAAC;gBAU7C,KAAI,CARC,iBAAC,CAAiB,IAAC,EAAI,CAAE;YASlD,CAAiB;YAED,MAAhB,CARuB,UAAA,CAAW,EAAC,CAAE,aAAC,CAAa,CAAC;QASpD,CAAa,CARC,CAAC;IASf,CAAK;;;;IANA,6BAAA,GAAA;QAGH,IAAA,CAFW,WAAC,CAAW,MAAC,EAAM,CAAE;IAWlC,CAAK;;CAvCL,CAEC,WAAA;AA4BM,YAAP,CAAA,UAAO,GAAoC;IAW3C,EAVE,IAAA,EAAM,UAAA,EAAW;CAWlB,CAVC;;;;AAED,YAAD,CAAA,cAAC,GAAA,cAAA,OAAA;IAaD,EAAC,IAAI,EAAE,IAAI,GAAG;IACd,EAAC,IAAI,EAAE,WAAW,GAAG;CACpB,EAfA,CAeA,CAAC;ADlDF;IAAA;;;;;;IAGK,uBAAA,GAAA,UAAA,MAAA;QAGG,SAAS,CAFC,gBAAC,CAAgB,MAAC,CAAM,CAAC;QAInC,MAAR,CAFe;YAGH,QAAQ,EAFE,eAAA;YAGV,SAAS,EAFE;gBAGP,mBAAmB;gBACnB,WAAW;gBACX,UAAU;gBAEV,YAAY;aACf;SACJ,CAFC;IAGV,CAAK;;;;IAAA,wBAAA,GAAA;QAKG,MAAR,CAJe;YAKH,QAAQ,EAJE,eAAA;YAKV,SAAS,EAJE;gBAKP,UAAU;gBACV,WAAW;gBACX,UAAU;gBAEV,YAAY;aACf;SACJ,CAJC;IAKV,CAAK;;CAjCL;AA+BO,eAAP,CAAA,UAAO,GAAoC;IAK3C,EAJE,IAAA,EAAM,QAAA,EAAU,IAAA,EAAM,CAAA;gBAKpB,YAAY,EAJE,EAOb;gBACD,OAAO,EAJE,EAOR;aACJ,EAJC,EAAG;CAKJ,CAJC;;;;AAED,eAAD,CAAA,cAAC,GAAA,cAAA,OAAA,EAOA,EAPA,CAOA,CAAC;AD5DF,kBAAC;ADAD;;GAEG;ADFH;;GAEG;;"}