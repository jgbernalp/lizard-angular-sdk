{"version":3,"file":"lizard-angular-sdk.js","sources":["../../index.ts","../../public_api.ts","../../src/lizard-angular-sdk.ts","../../src/modules/lizard-sdk.module.ts","../../src/resources/configurations.service.ts","../../src/resources/services.service.ts","../../src/resources/geo-location.service.ts","../../src/resources/orders.service.ts","../../src/resources/companies.service.ts","../../src/resources/oauth2.service.ts","../../src/resources/users.service.ts","../../src/common/crud.service.ts","../../src/common/api.service.ts","../../src/common/app-config.service.ts","../../src/lizard-initial-config.ts","../../src/common/http-interceptor.service.ts","../../src/common/auth.service.ts","../../src/common/event-manager.service.ts","../../src/common/local-storage.service.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {LocalStorageService,AuthService,APIService,CRUDService,UsersService,Oauth2Service,CompaniesService,OrdersService,GeoLocationService,ServicesService,ConfigurationsService,EventManagerService,AppConfigService,ILizardConfig,IListOptions,LizardSDKModule} from './public_api';\n\nexport {HttpInterceptor as ɵa} from './src/common/http-interceptor.service';\nexport {INITIAL_CONFIG as ɵb} from './src/lizard-initial-config';","/**\n * Entry point for all public APIs of the package.\n */\nexport {LocalStorageService,AuthService,APIService,CRUDService,UsersService,Oauth2Service,CompaniesService,OrdersService,GeoLocationService,ServicesService,ConfigurationsService,EventManagerService,AppConfigService,ILizardConfig,IListOptions,LizardSDKModule} from './src/lizard-angular-sdk';\n","// Public classes.\nexport { LocalStorageService } from './common/local-storage.service';\nexport { AuthService } from './common/auth.service';\nexport { APIService } from './common/api.service';\nexport { CRUDService } from './common/crud.service';\n\nexport { UsersService } from './resources/users.service';\nexport { Oauth2Service } from './resources/oauth2.service';\nexport { CompaniesService } from './resources/companies.service';\nexport { OrdersService } from './resources/orders.service';\nexport { GeoLocationService } from './resources/geo-location.service';\nexport { ServicesService } from './resources/services.service';\nexport { ConfigurationsService } from './resources/configurations.service';\n\nexport { EventManagerService } from './common/event-manager.service';\n\nexport { AppConfigService } from './common/app-config.service';\nexport { ILizardConfig } from './common/lizard-config.interface';\n\nexport { IListOptions } from './common/list-options.interface';\n\nexport { LizardSDKModule } from './modules/lizard-sdk.module';\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { LocalStorageService } from '../common/local-storage.service';\nimport { AuthService } from '../common/auth.service';\nimport { APIService } from '../common/api.service';\nimport { ILizardConfig } from '../common/lizard-config.interface';\nimport { AppConfigService } from '../common/app-config.service';\nimport { EventManagerService } from '../common/event-manager.service';\nimport { HttpInterceptor } from '../common/http-interceptor.service';\n\nimport { HttpModule } from '@angular/http';\n\nimport { INITIAL_CONFIG } from '../lizard-initial-config';\n\nimport { UsersService } from '../resources/users.service';\nimport { Oauth2Service } from '../resources/oauth2.service';\nimport { CompaniesService } from '../resources/companies.service';\nimport { OrdersService } from '../resources/orders.service';\nimport { ServicesService } from '../resources/services.service';\nimport { GeoLocationService } from '../resources/geo-location.service';\nimport { ConfigurationsService } from '../resources/configurations.service';\nexport class LizardSDKModule {\n/**\n * @param {?} config\n * @return {?}\n */\npublic static forRoot(config: ILizardConfig): ModuleWithProviders {\n        return {\n            ngModule: LizardSDKModule,\n            providers: [\n                {\n                    provide: INITIAL_CONFIG,\n                    useValue: config\n                },\n                LocalStorageService,\n                AuthService,\n                APIService,\n                AppConfigService,\n                EventManagerService,\n                HttpInterceptor,\n\n                UsersService,\n                Oauth2Service,\n                CompaniesService,\n                OrdersService,\n                GeoLocationService,\n                ServicesService,\n                ConfigurationsService\n            ]\n        };\n    }\n/**\n * @return {?}\n */\npublic static forChild(): ModuleWithProviders {\n        return {\n            ngModule: LizardSDKModule,\n            providers: [\n                APIService,\n                AuthService,\n                APIService,\n                AppConfigService,\n                EventManagerService,\n                HttpInterceptor,\n\n                UsersService,\n                Oauth2Service,\n                CompaniesService,\n                OrdersService,\n                GeoLocationService,\n                ServicesService,\n                ConfigurationsService\n            ]\n        };\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    declarations: [\n        // Pipes.\n        // Directives.\n    ],\n    exports: [\n        // Pipes.\n        // Directives.\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LizardSDKModule_tsickle_Closure_declarations() {\n/** @type {?} */\nLizardSDKModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLizardSDKModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { HttpInterceptor } from '../common/http-interceptor.service';\n\nimport { AuthService } from '../common/auth.service';\nimport { CRUDService } from '../common/crud.service';\n\nimport { AppConfigService } from '../common/app-config.service';\nimport { EventManagerService } from '../common/event-manager.service';\nexport class ConfigurationsService extends CRUDService {\n/**\n * @param {?} http\n * @param {?} authService\n * @param {?} appConfig\n * @param {?} eventsManagerService\n */\nconstructor(public http: HttpInterceptor,\npublic authService: AuthService,\npublic appConfig: AppConfigService,\npublic eventsManagerService: EventManagerService\n    ) {\n        super('configurations', http, authService, appConfig, eventsManagerService);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpInterceptor, },\n{type: AuthService, },\n{type: AppConfigService, },\n{type: EventManagerService, },\n];\n}\n\nfunction ConfigurationsService_tsickle_Closure_declarations() {\n/** @type {?} */\nConfigurationsService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nConfigurationsService.ctorParameters;\n/** @type {?} */\nConfigurationsService.prototype.http;\n/** @type {?} */\nConfigurationsService.prototype.authService;\n/** @type {?} */\nConfigurationsService.prototype.appConfig;\n/** @type {?} */\nConfigurationsService.prototype.eventsManagerService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { HttpInterceptor } from '../common/http-interceptor.service';\n\nimport { AuthService } from '../common/auth.service';\nimport { CRUDService } from '../common/crud.service';\n\nimport { AppConfigService } from '../common/app-config.service';\nimport { EventManagerService } from '../common/event-manager.service';\nexport class ServicesService extends CRUDService {\n/**\n * @param {?} http\n * @param {?} authService\n * @param {?} appConfig\n * @param {?} eventsManagerService\n */\nconstructor(public http: HttpInterceptor,\npublic authService: AuthService,\npublic appConfig: AppConfigService,\npublic eventsManagerService: EventManagerService\n    ) {\n        super('services', http, authService, appConfig, eventsManagerService);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpInterceptor, },\n{type: AuthService, },\n{type: AppConfigService, },\n{type: EventManagerService, },\n];\n}\n\nfunction ServicesService_tsickle_Closure_declarations() {\n/** @type {?} */\nServicesService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nServicesService.ctorParameters;\n/** @type {?} */\nServicesService.prototype.http;\n/** @type {?} */\nServicesService.prototype.authService;\n/** @type {?} */\nServicesService.prototype.appConfig;\n/** @type {?} */\nServicesService.prototype.eventsManagerService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { HttpInterceptor } from '../common/http-interceptor.service';\n\nimport { AuthService } from '../common/auth.service';\nimport { APIService } from '../common/api.service';\n\nimport { AppConfigService } from '../common/app-config.service';\nimport { EventManagerService } from '../common/event-manager.service';\n\nimport { Observable } from 'rxjs/Observable';\nexport class GeoLocationService extends APIService {\n/**\n * @param {?} http\n * @param {?} authService\n * @param {?} appConfig\n * @param {?} eventsManagerService\n */\nconstructor(public http: HttpInterceptor,\npublic authService: AuthService,\npublic appConfig: AppConfigService,\npublic eventsManagerService: EventManagerService\n    ) {\n        super(http, authService, appConfig, eventsManagerService);\n    }\n/**\n * @param {?} lat\n * @param {?} lng\n * @return {?}\n */\ngetAddressFromLocation(lat: Number, lng: Number): Observable<any> {\n        return this.get('geolocation/address-from-location', { query: { lat, lng } });\n    }\n/**\n * @param {?} address\n * @return {?}\n */\ngetLocationFromAddress(address: string): Observable<any> {\n        return this.get('geolocation/location-from-address', { query: { address } });\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpInterceptor, },\n{type: AuthService, },\n{type: AppConfigService, },\n{type: EventManagerService, },\n];\n}\n\nfunction GeoLocationService_tsickle_Closure_declarations() {\n/** @type {?} */\nGeoLocationService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nGeoLocationService.ctorParameters;\n/** @type {?} */\nGeoLocationService.prototype.http;\n/** @type {?} */\nGeoLocationService.prototype.authService;\n/** @type {?} */\nGeoLocationService.prototype.appConfig;\n/** @type {?} */\nGeoLocationService.prototype.eventsManagerService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { HttpInterceptor } from '../common/http-interceptor.service';\n\nimport { AuthService } from '../common/auth.service';\nimport { CRUDService } from '../common/crud.service';\n\nimport { AppConfigService } from '../common/app-config.service';\nimport { EventManagerService } from '../common/event-manager.service';\nexport class OrdersService extends CRUDService {\n/**\n * @param {?} http\n * @param {?} authService\n * @param {?} appConfig\n * @param {?} eventsManagerService\n */\nconstructor(public http: HttpInterceptor,\npublic authService: AuthService,\npublic appConfig: AppConfigService,\npublic eventsManagerService: EventManagerService\n    ) {\n        super('orders', http, authService, appConfig, eventsManagerService);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpInterceptor, },\n{type: AuthService, },\n{type: AppConfigService, },\n{type: EventManagerService, },\n];\n}\n\nfunction OrdersService_tsickle_Closure_declarations() {\n/** @type {?} */\nOrdersService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOrdersService.ctorParameters;\n/** @type {?} */\nOrdersService.prototype.http;\n/** @type {?} */\nOrdersService.prototype.authService;\n/** @type {?} */\nOrdersService.prototype.appConfig;\n/** @type {?} */\nOrdersService.prototype.eventsManagerService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\n\nimport { AuthService } from '../common/auth.service';\nimport { CRUDService } from '../common/crud.service';\nimport { HttpInterceptor } from '../common/http-interceptor.service';\n\nimport { AppConfigService } from '../common/app-config.service';\nimport { EventManagerService } from '../common/event-manager.service';\nexport class CompaniesService extends CRUDService {\n/**\n * @param {?} http\n * @param {?} authService\n * @param {?} appConfig\n * @param {?} eventsManagerService\n */\nconstructor(public http: HttpInterceptor,\npublic authService: AuthService,\npublic appConfig: AppConfigService,\npublic eventsManagerService: EventManagerService\n    ) {\n        super('companies', http, authService, appConfig, eventsManagerService);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpInterceptor, },\n{type: AuthService, },\n{type: AppConfigService, },\n{type: EventManagerService, },\n];\n}\n\nfunction CompaniesService_tsickle_Closure_declarations() {\n/** @type {?} */\nCompaniesService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCompaniesService.ctorParameters;\n/** @type {?} */\nCompaniesService.prototype.http;\n/** @type {?} */\nCompaniesService.prototype.authService;\n/** @type {?} */\nCompaniesService.prototype.appConfig;\n/** @type {?} */\nCompaniesService.prototype.eventsManagerService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\n\nimport { HttpInterceptor } from '../common/http-interceptor.service';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/of';\nimport'rxjs/add/operator/first';\n\nimport { Subject } from 'rxjs/Subject';\n\nimport { AuthService } from '../common/auth.service';\nimport { CRUDService } from '../common/crud.service';\n\nimport { AppConfigService } from '../common/app-config.service';\nimport { EventManagerService } from '../common/event-manager.service';\nexport class Oauth2Service extends CRUDService {\n/**\n * @param {?} http\n * @param {?} authService\n * @param {?} appConfig\n * @param {?} eventsManagerService\n */\nconstructor(\npublic http: HttpInterceptor,\npublic authService: AuthService,\npublic appConfig: AppConfigService,\npublic eventsManagerService: EventManagerService\n    ) {\n        super('oauth2', http, authService, appConfig, eventsManagerService);\n    }\n/**\n * @return {?}\n */\npublic init() {\n        this.eventsManagerService.refreshToken.subscribe(() => {\n            this.refreshToken(this.authService.getRefreshToken()).first().subscribe();\n        });\n    }\n/**\n * @param {?} username\n * @param {?} password\n * @return {?}\n */\npublic login(username: string, password: string): Observable<any> {\n        return this.post(this.resource + '/token', {\n            password,\n            username,\n            grant_type: 'password'\n        }, null, { credentials: 'app' })\n            .map((loginResponse) => {\n                if (loginResponse && loginResponse.access_token) {\n                    const /** @type {?} */ accessToken = loginResponse.access_token;\n                    this.authService.setAccessToken(accessToken);\n                    this.authService.setUser(loginResponse.data.identity);\n\n                    if (loginResponse.refresh_token) {\n                        const /** @type {?} */ refreshToken = loginResponse.refresh_token;\n                        this.authService.setRefreshToken(refreshToken);\n                    }\n\n                    this.eventsManagerService.trigger(EventManagerService.ON_USER_SIGN_IN);\n                }\n\n                return Observable.of(loginResponse);\n            });\n    }\n/**\n * @param {?=} clientId\n * @param {?=} clientSecret\n * @return {?}\n */\npublic appLogin(clientId?: string, clientSecret?: string): Observable<any> {\n        if (!clientId) {\n            clientId = this.appConfig.config.clientId;\n        }\n\n        if (!clientSecret) {\n            clientSecret = this.appConfig.config.clientSecret;\n        }\n\n        return this.post(this.resource + '/token', {\n            client_id: clientId,\n            client_secret: clientSecret,\n            grant_type: 'client_credentials'\n        }, null, { credentials: false })\n            .map((loginResponse) => {\n                if (loginResponse && loginResponse.access_token) {\n                    const /** @type {?} */ accessToken = loginResponse.access_token;\n                    this.authService.setAppAccessToken(accessToken);\n                }\n\n                return Observable.of(loginResponse);\n            });\n    }\n/**\n * @param {?} refreshToken\n * @return {?}\n */\npublic refreshToken(refreshToken: string) {\n        return this.post(this.resource + '/token', {\n            refresh_token: refreshToken,\n            grant_type: 'refresh_token'\n        }, null, { credentials: false })\n            .map((refreshTokenResponse) => {\n                if (refreshTokenResponse && refreshTokenResponse.refresh_token) {\n                    const /** @type {?} */ refreshToken = refreshTokenResponse.refresh_token;\n                    const /** @type {?} */ accessToken = refreshTokenResponse.access_token;\n\n                    this.authService.setAccessToken(accessToken);\n                    this.authService.setRefreshToken(refreshToken);\n\n                    this.eventsManagerService.trigger(EventManagerService.ON_TOKEN_REFRESHED, { newAccessToken: accessToken, newRefreshToken: refreshToken });\n                }\n\n                return Observable.of(refreshTokenResponse);\n            });\n    }\n/**\n * @return {?}\n */\npublic logout() {\n        this.eventsManagerService.trigger(EventManagerService.ON_USER_SIGN_OUT);\n        this.authService.logout();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpInterceptor, },\n{type: AuthService, },\n{type: AppConfigService, },\n{type: EventManagerService, },\n];\n}\n\nfunction Oauth2Service_tsickle_Closure_declarations() {\n/** @type {?} */\nOauth2Service.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOauth2Service.ctorParameters;\n/** @type {?} */\nOauth2Service.prototype.http;\n/** @type {?} */\nOauth2Service.prototype.authService;\n/** @type {?} */\nOauth2Service.prototype.appConfig;\n/** @type {?} */\nOauth2Service.prototype.eventsManagerService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\n\nimport { HttpInterceptor } from '../common/http-interceptor.service';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/of';\n\nimport { Subject } from 'rxjs/Subject';\n\nimport { AuthService } from '../common/auth.service';\nimport { CRUDService } from '../common/crud.service';\n\nimport { AppConfigService } from '../common/app-config.service';\nimport { EventManagerService } from '../common/event-manager.service';\nexport class UsersService extends CRUDService {\n/**\n * @param {?} http\n * @param {?} authService\n * @param {?} appConfig\n * @param {?} eventsManagerService\n */\nconstructor(public http: HttpInterceptor,\npublic authService: AuthService,\npublic appConfig: AppConfigService,\npublic eventsManagerService: EventManagerService\n    ) {\n        super('users', http, authService, appConfig, eventsManagerService);\n    }\n/**\n * @param {?} data\n * @return {?}\n */\npublic register(data: any): Observable<any> {\n        return this.post(this.resource + '/register', data, null, { credentials: 'app' })\n            .map((loginResponse) => {\n                if (loginResponse && loginResponse.access_token) {\n                    const /** @type {?} */ accessToken = loginResponse.access_token;\n                    this.authService.setAccessToken(accessToken);\n                    this.authService.setUser(loginResponse.data.identity);\n\n                    this.eventsManagerService.trigger(EventManagerService.ON_USER_SIGN_IN);\n                }\n\n                return Observable.of(loginResponse);\n            });\n    }\n/**\n * @param {?} username\n * @return {?}\n */\npublic recoverPassword(username: string): Observable<any> {\n        return this.post(this.resource + '/password/recover', { username }, null, { credentials: 'app' });\n    }\n/**\n * @param {?} recoveryCode\n * @param {?} password\n * @return {?}\n */\npublic resetPassword(recoveryCode: string, password: string): Observable<any> {\n        return this.post(this.resource + '/password/reset', { recoveryCode, password }, null, { credentials: 'app' });\n    }\n/**\n * @param {?} email\n * @return {?}\n */\npublic invite(email: string): Observable<any> {\n        return this.post(this.resource + '/invite', { email });\n    }\n/**\n * @return {?}\n */\npublic logout() {\n        this.authService.logout();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpInterceptor, },\n{type: AuthService, },\n{type: AppConfigService, },\n{type: EventManagerService, },\n];\n}\n\nfunction UsersService_tsickle_Closure_declarations() {\n/** @type {?} */\nUsersService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUsersService.ctorParameters;\n/** @type {?} */\nUsersService.prototype.http;\n/** @type {?} */\nUsersService.prototype.authService;\n/** @type {?} */\nUsersService.prototype.appConfig;\n/** @type {?} */\nUsersService.prototype.eventsManagerService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Response, Headers, RequestOptions } from '@angular/http';\n\nimport { Observable } from 'rxjs/Observable';\n\nimport { HttpInterceptor } from '../common/http-interceptor.service';\n\nimport { APIService } from './api.service';\nimport { AuthService } from './auth.service';\nimport { AppConfigService } from './app-config.service';\nimport { EventManagerService } from '../common/event-manager.service';\n\nimport { IListOptions } from '../common/list-options.interface';\nexport class CRUDService extends APIService {\nprivate resourceName: string;\nprivate localResourceIdName: string = '_id';\n/**\n * @param {?} value\n * @return {?}\n */\npublic set resourceIdName(value: string) {\n        this.localResourceIdName = value;\n    }\n/**\n * @return {?}\n */\npublic get resourceIdName(): string {\n        return this.localResourceIdName;\n    }\n/**\n * @return {?}\n */\npublic get resource(): string {\n        return this.resourceName;\n    }\n/**\n * @param {?} resourceName\n * @param {?} http\n * @param {?} authService\n * @param {?} appConfig\n * @param {?} eventsManagerService\n */\nconstructor(resourceName: string,\npublic http: HttpInterceptor,\npublic authService: AuthService,\npublic appConfig: AppConfigService,\npublic eventsManagerService: EventManagerService\n    ) {\n        super(http, authService, appConfig, eventsManagerService);\n\n        this.resourceName = resourceName;\n    }\n/**\n * @param {?=} config\n * @param {?=} options\n * @return {?}\n */\npublic list(config?: IListOptions, options?: any): Observable<any> {\n        return this.get(this.resourceName, config, options);\n    }\n/**\n * @param {?} resourceId\n * @param {?=} config\n * @return {?}\n */\npublic read(resourceId: string, config: IListOptions = {}): Observable<any> {\n        const { fields, options } = config;\n        return this.get(this.resourceName + '/' + resourceId, { fields }, options);\n    }\n/**\n * @param {?} resource\n * @param {?=} options\n * @return {?}\n */\npublic save(resource: any, options?: any): Observable<any> {\n        if (resource[this.resourceIdName]) {\n            return this.put(this.resourceName + '/' + resource[this.resourceIdName], resource, options);\n        } else {\n            return this.post(this.resourceName, resource, options);\n        }\n    }\n/**\n * @param {?} resourceId\n * @param {?=} options\n * @return {?}\n */\npublic delete(resourceId: string, options?: any): Observable<any> {\n        return super.delete(this.resourceName + '/' + resourceId, options);\n    }\n/**\n * @param {?} resource\n * @param {?} type\n * @param {?} parent\n * @param {?=} context\n * @return {?}\n */\npublic addParent(resource: any, type: string, parent: any, context?: string) {\n        let /** @type {?} */ existingParentIndex: number = -1;\n\n        if (!resource.parents) {\n            resource.parents = [];\n        } else {\n            existingParentIndex = resource.parents.findIndex((item: any) => {\n                if (context) {\n                    return item.id == parent._id && item.type == type && item.context == context;\n                } else {\n                    return item.id == parent._id && item.type == type\n                }\n            });\n        }\n\n        if (!parent || !parent._id) {\n            throw new Error('Invalid parent or parent.id when adding');\n        }\n\n        let /** @type {?} */ parentObject: any = { id: parent._id, type, name: parent.name };\n\n        if (context) {\n            parentObject.context = context;\n        }\n\n        if (existingParentIndex >= 0) {\n            resource.parents[existingParentIndex] = parentObject;\n        } else {\n            resource.parents.push(parentObject);\n        }\n\n        return resource;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\nnull,\n{type: HttpInterceptor, },\n{type: AuthService, },\n{type: AppConfigService, },\n{type: EventManagerService, },\n];\n}\n\nfunction CRUDService_tsickle_Closure_declarations() {\n/** @type {?} */\nCRUDService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCRUDService.ctorParameters;\n/** @type {?} */\nCRUDService.prototype.resourceName;\n/** @type {?} */\nCRUDService.prototype.localResourceIdName;\n/** @type {?} */\nCRUDService.prototype.http;\n/** @type {?} */\nCRUDService.prototype.authService;\n/** @type {?} */\nCRUDService.prototype.appConfig;\n/** @type {?} */\nCRUDService.prototype.eventsManagerService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Response, Headers, RequestOptions } from '@angular/http';\n\nimport { HttpInterceptor } from '../common/http-interceptor.service';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/map';\nimport'rxjs/add/observable/throw';\n\nimport { AuthService } from './auth.service';\nimport { AppConfigService } from './app-config.service';\nimport { EventManagerService } from '../common/event-manager.service';\n\nimport { IListOptions } from '../common/list-options.interface';\nexport class APIService {\nprivate apiURL: string;\nprivate clientId: string | undefined;\nprivate clientSecret: string | undefined;\n/**\n * @param {?} http\n * @param {?} authService\n * @param {?} appConfig\n * @param {?} eventsManagerService\n */\nconstructor(public http: HttpInterceptor,\npublic authService: AuthService,\npublic appConfig: AppConfigService,\npublic eventsManagerService: EventManagerService\n    ) {\n        this.apiURL = this.appConfig.config.apiURL;\n        this.clientId = this.appConfig.config.clientId;\n        this.clientSecret = this.appConfig.config.clientSecret;\n    }\n/**\n * @param {?} path\n * @param {?=} config\n * @param {?=} options\n * @return {?}\n */\npublic get(path: string, config?: IListOptions, options?: any): Observable<any> {\n        return this.http.get(\n            this.apiURL + '/' + path + this.getUrlParams(config), this.getRequestOptions(options))\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n/**\n * @param {?} path\n * @param {?=} data\n * @param {?=} query\n * @param {?=} options\n * @return {?}\n */\npublic put(path: string, data?: any, query?: any, options?: any): Observable<any> {\n        return this.http.put(this.apiURL + '/' + path + this.getUrlParams(query), data,\n            this.getRequestOptions(options))\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n/**\n * @param {?} path\n * @param {?=} data\n * @param {?=} query\n * @param {?=} options\n * @return {?}\n */\npublic post(path: string, data?: any, query?: any, options?: any): Observable<any> {\n        return this.http.post(this.apiURL + '/' + path +\n            this.getUrlParams(query), data, this.getRequestOptions(options))\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n/**\n * @param {?} path\n * @param {?=} query\n * @param {?=} options\n * @return {?}\n */\npublic delete(path: string, query?: any, options?: any): Observable<any> {\n        return this.http.delete(this.apiURL + '/' + path +\n            this.getUrlParams(query), this.getRequestOptions(options))\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n/**\n * @param {?=} options\n * @return {?}\n */\nprivate getRequestOptions(options?: any): RequestOptions {\n        const /** @type {?} */ headers = new Headers({ 'Content-Type': 'application/json' });\n        const /** @type {?} */ requestOptions = new RequestOptions({ headers });\n\n        if (!options || options.credentials === undefined || options.credentials === true ||\n            options.credentials === 'app') {\n\n            if (options !== undefined && options.credentials === 'app') {\n                headers.append('Authorization', 'Bearer ' + this.authService.getAppAccessToken());\n            } else {\n                headers.append('Authorization', 'Bearer ' + this.authService.getAccessToken());\n            }\n        }\n\n        return requestOptions;\n    }\n/**\n * @param {?} data\n * @return {?}\n */\nprivate getUrlParams(data: any): string {\n        let /** @type {?} */ urlParams = '';\n\n        if (data) {\n            const /** @type {?} */ params = [];\n            const /** @type {?} */ keys = Object.keys(data);\n            for (const /** @type {?} */ key of keys) {\n                if (data[key] !== undefined && String(data[key]).length > 0) {\n                    let /** @type {?} */ keyValue = data[key];\n                    if (typeof keyValue === 'object') {\n                        try {\n                            keyValue = JSON.stringify(keyValue);\n                        } catch ( /** @type {?} */err) {\n                            // do nothing\n                        }\n                    }\n\n                    params.push(key + '=' + encodeURIComponent(keyValue));\n                }\n            }\n\n            if (params.length > 0) {\n                urlParams = '?' + params.join('&');\n            }\n        }\n\n        return urlParams;\n    }\n/**\n * @param {?} res\n * @return {?}\n */\nprivate extractData(res: Response) {\n        return res.json();\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate handleError(error: Response | any) {\n        // TODO use a remote logging infrastructure\n        let /** @type {?} */ errObj: any;\n        if (error instanceof Response) {\n            const /** @type {?} */ body = error.json() || '';\n            const /** @type {?} */ err = body.error || JSON.stringify(body);\n            errObj = err;\n        } else {\n            errObj = error;\n        }\n        return Observable.throw(errObj);\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: HttpInterceptor, },\n{type: AuthService, },\n{type: AppConfigService, },\n{type: EventManagerService, },\n];\n}\n\nfunction APIService_tsickle_Closure_declarations() {\n/** @type {?} */\nAPIService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAPIService.ctorParameters;\n/** @type {?} */\nAPIService.prototype.apiURL;\n/** @type {?} */\nAPIService.prototype.clientId;\n/** @type {?} */\nAPIService.prototype.clientSecret;\n/** @type {?} */\nAPIService.prototype.http;\n/** @type {?} */\nAPIService.prototype.authService;\n/** @type {?} */\nAPIService.prototype.appConfig;\n/** @type {?} */\nAPIService.prototype.eventsManagerService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { ILizardConfig } from './lizard-config.interface';\n\nimport { INITIAL_CONFIG } from '../lizard-initial-config';\nexport class AppConfigService {\nprivate initialConfig: ILizardConfig;\n/**\n * @param {?} config\n */\nconstructor(  config: ILizardConfig) {\n        this.initialConfig = config;\n    }\n/**\n * @param {?} config\n * @return {?}\n */\npublic setInitialConfig(config: ILizardConfig) {\n        this.initialConfig = config;\n    }\n/**\n * @return {?}\n */\npublic get config(): ILizardConfig {\n        return this.initialConfig;\n    }\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [INITIAL_CONFIG, ] }, ]},\n];\n}\n\nfunction AppConfigService_tsickle_Closure_declarations() {\n/**\n * @nocollapse\n * @type {?}\n */\nAppConfigService.ctorParameters;\n/** @type {?} */\nAppConfigService.prototype.initialConfig;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { ILizardConfig } from './common/lizard-config.interface';\nimport { InjectionToken } from '@angular/core';\n\nexport let /** @type {?} */ INITIAL_CONFIG = new InjectionToken<ILizardConfig>('app.config');","import { Http, Request, RequestOptions, RequestOptionsArgs, Response, XHRBackend, Headers } from '@angular/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\n\nimport'rxjs/add/operator/mergeMap';\n\nimport { EventManagerService } from '../common/event-manager.service';\nexport class HttpInterceptor extends Http {\nprivate notifier: Subject<Response> = new Subject<Response>();\nprivate refreshingToken: boolean = false;\n/**\n * @param {?} backend\n * @param {?} options\n * @param {?} eventManager\n */\nconstructor(\n    backend: XHRBackend,\n    options: RequestOptions,\npublic eventManager: EventManagerService\n  ) {\n    super(backend, options);\n\n    this.eventManager.onTokenRefreshed.subscribe(({ newAccessToken }) => {\n      this.refreshingToken = false;\n\n      this.notifier.next(newAccessToken);\n    })\n  }\n/**\n * @param {?} headers\n * @param {?} newAccessToken\n * @return {?}\n */\nprivate getNewHeaders(headers: Headers, newAccessToken: string): Headers {\n    headers.set('authorization', newAccessToken);\n\n    return headers;\n  }\n/**\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\npublic request(url: string | Request, options?: RequestOptionsArgs): Observable<Response> {\n\n    const /** @type {?} */ requestUrl = /** @type {?} */(( url as Request));\n\n    if (requestUrl.url.indexOf('oauth2/token') >= 0) {\n      return super.request(url, options);\n    } else if (this.refreshingToken) {\n      return this.notifier.asObservable().flatMap(() => {\n        return super.request(url, options);\n      });\n    } else {\n      return super.request(url, options).catch((error: any) => {\n        if (error && error.status == 401) {\n          const /** @type {?} */ body = JSON.parse(error._body);\n          if (body && body.error && body.error.code == 100) {\n            this.refreshingToken = true;\n\n            this.eventManager.trigger(EventManagerService.REFRESH_TOKEN);\n\n            return this.notifier.asObservable().flatMap((newAccessToken: any) => {\n              const /** @type {?} */ newRequest = new Request({\n                headers: this.getNewHeaders(requestUrl.headers, newAccessToken),\n                url: requestUrl.url,\n                body: requestUrl.getBody(),\n                method: requestUrl.method,\n                responseType: requestUrl.responseType\n              });\n\n              return super.request(newRequest, options);\n            });\n          } else {\n            return Observable.throw(error);\n          }\n        }\n\n        return Observable.throw(error);\n      });\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: XHRBackend, },\n{type: RequestOptions, },\n{type: EventManagerService, },\n];\n}\n\nfunction HttpInterceptor_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpInterceptor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttpInterceptor.ctorParameters;\n/** @type {?} */\nHttpInterceptor.prototype.notifier;\n/** @type {?} */\nHttpInterceptor.prototype.refreshingToken;\n/** @type {?} */\nHttpInterceptor.prototype.eventManager;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\n\nimport { LocalStorageService } from './local-storage.service';\nimport { EventManagerService } from './event-manager.service';\nexport class AuthService {\nprivate cachedAppAccessToken: string | null;\nprivate cachedAccessToken: string | null;\nprivate cachedUser: any;\n/**\n * @param {?} http\n * @param {?} localStorage\n * @param {?} eventManager\n */\nconstructor(\npublic http: Http,\npublic localStorage: LocalStorageService,\npublic eventManager: EventManagerService\n    ) { }\n/**\n * @param {?} accessToken\n * @return {?}\n */\npublic setAccessToken(accessToken: string) {\n        this.localStorage.set('AT', accessToken);\n        this.cachedAccessToken = accessToken;\n    }\n/**\n * @param {?} accessToken\n * @return {?}\n */\npublic setAppAccessToken(accessToken: string) {\n        this.localStorage.set('ATA', accessToken);\n        this.cachedAppAccessToken = accessToken;\n    }\n/**\n * @return {?}\n */\npublic getAccessToken() {\n        if (!this.cachedAccessToken) {\n            this.cachedAccessToken = this.localStorage.get('AT');\n        }\n\n        return this.cachedAccessToken;\n    }\n/**\n * @return {?}\n */\npublic getAppAccessToken() {\n        if (!this.cachedAppAccessToken) {\n            this.cachedAppAccessToken = this.localStorage.get('ATA');\n        }\n\n        return this.cachedAppAccessToken;\n    }\n/**\n * @return {?}\n */\npublic getRefreshToken() {\n        return this.localStorage.get('RT');\n    }\n/**\n * @param {?} user\n * @return {?}\n */\npublic setUser(user: any) {\n        this.cachedUser = user;\n        this.localStorage.set('US', user);\n\n        this.eventManager.trigger(EventManagerService.ON_USER_CHANGED, user);\n    }\n/**\n * @param {?} refreshToken\n * @return {?}\n */\npublic setRefreshToken(refreshToken: string) {\n        this.localStorage.set('RT', refreshToken);\n\n        this.eventManager.trigger(EventManagerService.ON_TOKEN_REFRESHED, refreshToken);\n    }\n/**\n * @return {?}\n */\npublic getUser(): any {\n        if (!this.cachedUser) {\n            this.cachedUser = this.localStorage.get('US');\n        }\n\n        return this.cachedUser;\n    }\n/**\n * @return {?}\n */\npublic isLoggedIn() {\n        return this.getUser() != null;\n    }\n/**\n * @param {?} roles\n * @return {?}\n */\npublic userHasRole(roles: string[] | string) {\n        const /** @type {?} */ user = this.getUser();\n\n        if (Array.isArray(roles)) {\n            for (let /** @type {?} */ role of roles) {\n                if (user.roles.indexOf(role) >= 0) {\n                    return true;\n                }\n            }\n        } else {\n            if (user.roles.indexOf(roles) >= 0) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n/**\n * @return {?}\n */\npublic logout() {\n        this.cachedAccessToken = null;\n        this.cachedUser = null;\n        this.localStorage.remove('AT');\n        this.localStorage.remove('RT');\n        this.localStorage.remove('US');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: LocalStorageService, },\n{type: EventManagerService, },\n];\n}\n\nfunction AuthService_tsickle_Closure_declarations() {\n/** @type {?} */\nAuthService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAuthService.ctorParameters;\n/** @type {?} */\nAuthService.prototype.cachedAppAccessToken;\n/** @type {?} */\nAuthService.prototype.cachedAccessToken;\n/** @type {?} */\nAuthService.prototype.cachedUser;\n/** @type {?} */\nAuthService.prototype.http;\n/** @type {?} */\nAuthService.prototype.localStorage;\n/** @type {?} */\nAuthService.prototype.eventManager;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\n\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\nexport class EventManagerService {\npublic static ON_USER_SIGN_OUT: string = '_onUserSignOut';\npublic static ON_USER_SIGN_IN: string = '_onUserSignIn';\npublic static ON_USER_CHANGED: string = '_onUserChanged';\npublic static ON_TOKEN_REFRESHED: string = '_onTokenRefreshed';\npublic static REFRESH_TOKEN: string = '_refreshToken';\nprivate events: { [key: string]: Subject<any> } = {\n        '_onUserSignOut': new Subject(),\n        '_onUserSignIn': new Subject(),\n        '_onUserChanged': new Subject(),\n        '_onTokenRefreshed': new Subject(),\n        '_refreshToken': new Subject()\n    }\n/**\n * @return {?}\n */\npublic get onUserSignIn(): Observable<any> {\n        return this.events['_onUserSignIn'].asObservable();\n    }\n/**\n * @return {?}\n */\npublic get onUserSignOut(): Observable<any> {\n        return this.events['_onUserSignOut'].asObservable();\n    }\n/**\n * @return {?}\n */\npublic get onUserChanged(): Observable<any> {\n        return this.events['_onUserChanged'].asObservable();\n    }\n/**\n * @return {?}\n */\npublic get onTokenRefreshed(): Observable<any> {\n        return this.events['_onTokenRefreshed'].asObservable();\n    }\n/**\n * @return {?}\n */\npublic get refreshToken(): Observable<any> {\n        return this.events['_refreshToken'].asObservable();\n    }\n/**\n * @param {?} event\n * @param {?=} data\n * @return {?}\n */\npublic trigger(event: string, data?: any) {\n        if (this.events[event] && this.events[event] instanceof Subject) {\n            this.events[event].next(data || {});\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction EventManagerService_tsickle_Closure_declarations() {\n/** @type {?} */\nEventManagerService.ON_USER_SIGN_OUT;\n/** @type {?} */\nEventManagerService.ON_USER_SIGN_IN;\n/** @type {?} */\nEventManagerService.ON_USER_CHANGED;\n/** @type {?} */\nEventManagerService.ON_TOKEN_REFRESHED;\n/** @type {?} */\nEventManagerService.REFRESH_TOKEN;\n/** @type {?} */\nEventManagerService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEventManagerService.ctorParameters;\n/** @type {?} */\nEventManagerService.prototype.events;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\n\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/operator/catch';\nimport'rxjs/add/operator/map';\nexport class LocalStorageService {\nprivate prefix: string = 'lizard-';\n/**\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\npublic set(key: string, value: any) {\n        if (typeof value.toStorageItem === 'function') {\n            value = value.toStorageItem();\n        }\n\n        localStorage.setItem(this.prefix + key, JSON.stringify(value));\n    }\n/**\n * @param {?} key\n * @return {?}\n */\npublic get(key: string): any {\n        const /** @type {?} */ value = localStorage.getItem(this.prefix + key);\n\n        if (value != null) {\n            return JSON.parse(value);\n        }\n\n        return null;\n    }\n/**\n * @param {?} key\n * @return {?}\n */\npublic remove(key: string) {\n        localStorage.removeItem(this.prefix + key);\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction LocalStorageService_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalStorageService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocalStorageService.ctorParameters;\n/** @type {?} */\nLocalStorageService.prototype.prefix;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":[],"mappings":"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"}